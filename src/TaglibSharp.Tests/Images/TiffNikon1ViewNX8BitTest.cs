// TODO: This file is automatically generated
// TODO: Further manual verification is needed

using NUnit.Framework;
using TagLib;
using TagLib.IFD;
using TagLib.IFD.Entries;
using TagLib.IFD.Tags;
using TaglibSharp.Tests.Images.Validators;

namespace TaglibSharp.Tests.Images
{
	[TestFixture]
	public class TiffNikon1ViewNX8BitTest
	{
		[Test]
		public void Test ()
		{
			ImageTest.Run ("sample_nikon1_viewnx_8bit.tiff",
				ImageTest.CompareLargeImages,
				new TiffNikon1ViewNX8BitTestInvariantValidator (),
				NoModificationValidator.Instance,
				new CommentModificationValidator ("                                    "),
				new TagCommentModificationValidator ("                                    ", TagTypes.TiffIFD, true),
				new TagCommentModificationValidator (null, TagTypes.XMP, false),
				new TagKeywordsModificationValidator (null, TagTypes.XMP, false)
			);
		}
	}

	public class TiffNikon1ViewNX8BitTestInvariantValidator : IMetadataInvariantValidator
	{
		public void ValidateMetadataInvariants (TagLib.Image.File file)
		{
			Assert.IsNotNull (file);
			//  ---------- Start of IFD tests ----------

			var tag = file.GetTag (TagTypes.TiffIFD) as IFDTag;
			Assert.IsNotNull (tag, "IFD tag not found");

			var structure = tag.Structure;

			// Image.0x0100 (ImageWidth/Long/1) "320"
			{
				var entry = structure.GetEntry (0, (ushort)IFDEntryTag.ImageWidth);
				Assert.IsNotNull (entry, "Entry 0x0100 missing in IFD 0");
				Assert.IsNotNull (entry as LongIFDEntry, "Entry is not a long!");
				Assert.AreEqual (320, (entry as LongIFDEntry).Value);
			}
			// Image.0x0101 (ImageLength/Long/1) "213"
			{
				var entry = structure.GetEntry (0, (ushort)IFDEntryTag.ImageLength);
				Assert.IsNotNull (entry, "Entry 0x0101 missing in IFD 0");
				Assert.IsNotNull (entry as LongIFDEntry, "Entry is not a long!");
				Assert.AreEqual (213, (entry as LongIFDEntry).Value);
			}
			// Image.0x0102 (BitsPerSample/Short/3) "8 8 8"
			{
				var entry = structure.GetEntry (0, (ushort)IFDEntryTag.BitsPerSample);
				Assert.IsNotNull (entry, "Entry 0x0102 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.AreEqual (new ushort[] { 8, 8, 8 }, (entry as ShortArrayIFDEntry).Values);
			}
			// Image.0x0103 (Compression/Short/1) "1"
			{
				var entry = structure.GetEntry (0, (ushort)IFDEntryTag.Compression);
				Assert.IsNotNull (entry, "Entry 0x0103 missing in IFD 0");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (1, (entry as ShortIFDEntry).Value);
			}
			// Image.0x0106 (PhotometricInterpretation/Short/1) "2"
			{
				var entry = structure.GetEntry (0, (ushort)IFDEntryTag.PhotometricInterpretation);
				Assert.IsNotNull (entry, "Entry 0x0106 missing in IFD 0");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (2, (entry as ShortIFDEntry).Value);
			}
			// Image.0x010F (Make/Ascii/18) "NIKON CORPORATION"
			{
				var entry = structure.GetEntry (0, (ushort)IFDEntryTag.Make);
				Assert.IsNotNull (entry, "Entry 0x010F missing in IFD 0");
				Assert.IsNotNull (entry as StringIFDEntry, "Entry is not a string!");
				Assert.AreEqual ("NIKON CORPORATION", (entry as StringIFDEntry).Value);
			}
			// Image.0x0110 (Model/Ascii/10) "NIKON D90"
			{
				var entry = structure.GetEntry (0, (ushort)IFDEntryTag.Model);
				Assert.IsNotNull (entry, "Entry 0x0110 missing in IFD 0");
				Assert.IsNotNull (entry as StringIFDEntry, "Entry is not a string!");
				Assert.AreEqual ("NIKON D90", (entry as StringIFDEntry).Value);
			}
			// Image.0x0111 (StripOffsets/StripOffsets/1) "104929"
			{
				var entry = structure.GetEntry (0, (ushort)IFDEntryTag.StripOffsets);
				Assert.IsNotNull (entry, "Entry 0x0111 missing in IFD 0");
				Assert.IsNotNull (entry as StripOffsetsIFDEntry, "Entry is not a strip offsets entry!");
				Assert.AreEqual (1, (entry as StripOffsetsIFDEntry).Values.Length);
			}
			// Image.0x0112 (Orientation/Short/1) "1"
			{
				var entry = structure.GetEntry (0, (ushort)IFDEntryTag.Orientation);
				Assert.IsNotNull (entry, "Entry 0x0112 missing in IFD 0");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (1, (entry as ShortIFDEntry).Value);
			}
			// Image.0x0115 (SamplesPerPixel/Short/1) "3"
			{
				var entry = structure.GetEntry (0, (ushort)IFDEntryTag.SamplesPerPixel);
				Assert.IsNotNull (entry, "Entry 0x0115 missing in IFD 0");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (3, (entry as ShortIFDEntry).Value);
			}
			// Image.0x0116 (RowsPerStrip/Long/1) "213"
			{
				var entry = structure.GetEntry (0, (ushort)IFDEntryTag.RowsPerStrip);
				Assert.IsNotNull (entry, "Entry 0x0116 missing in IFD 0");
				Assert.IsNotNull (entry as LongIFDEntry, "Entry is not a long!");
				Assert.AreEqual (213, (entry as LongIFDEntry).Value);
			}
			// Image.0x0117 (StripByteCounts/Long/1) "204480"
			{
				var entry = structure.GetEntry (0, (ushort)IFDEntryTag.StripByteCounts);
				Assert.IsNotNull (entry, "Entry 0x0117 missing in IFD 0");
				Assert.IsNotNull (entry as LongIFDEntry, "Entry is not a long!");
				Assert.AreEqual (204480, (entry as LongIFDEntry).Value);
			}
			// Image.0x011A (XResolution/Rational/1) "300/1"
			{
				var entry = structure.GetEntry (0, (ushort)IFDEntryTag.XResolution);
				Assert.IsNotNull (entry, "Entry 0x011A missing in IFD 0");
				Assert.IsNotNull (entry as RationalIFDEntry, "Entry is not a rational!");
				Assert.AreEqual (300, (entry as RationalIFDEntry).Value.Numerator);
				Assert.AreEqual (1, (entry as RationalIFDEntry).Value.Denominator);
			}
			// Image.0x011B (YResolution/Rational/1) "300/1"
			{
				var entry = structure.GetEntry (0, (ushort)IFDEntryTag.YResolution);
				Assert.IsNotNull (entry, "Entry 0x011B missing in IFD 0");
				Assert.IsNotNull (entry as RationalIFDEntry, "Entry is not a rational!");
				Assert.AreEqual (300, (entry as RationalIFDEntry).Value.Numerator);
				Assert.AreEqual (1, (entry as RationalIFDEntry).Value.Denominator);
			}
			// Image.0x011C (PlanarConfiguration/Short/1) "1"
			{
				var entry = structure.GetEntry (0, (ushort)IFDEntryTag.PlanarConfiguration);
				Assert.IsNotNull (entry, "Entry 0x011C missing in IFD 0");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (1, (entry as ShortIFDEntry).Value);
			}
			// Image.0x0128 (ResolutionUnit/Short/1) "2"
			{
				var entry = structure.GetEntry (0, (ushort)IFDEntryTag.ResolutionUnit);
				Assert.IsNotNull (entry, "Entry 0x0128 missing in IFD 0");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (2, (entry as ShortIFDEntry).Value);
			}
			// Image.0x0131 (Software/Ascii/13) "ViewNX 1.5 W"
			{
				var entry = structure.GetEntry (0, (ushort)IFDEntryTag.Software);
				Assert.IsNotNull (entry, "Entry 0x0131 missing in IFD 0");
				Assert.IsNotNull (entry as StringIFDEntry, "Entry is not a string!");
				Assert.AreEqual ("ViewNX 1.5 W", (entry as StringIFDEntry).Value);
			}
			// Image.0x0132 (DateTime/Ascii/20) "2010:02:03 10:22:53"
			{
				var entry = structure.GetEntry (0, (ushort)IFDEntryTag.DateTime);
				Assert.IsNotNull (entry, "Entry 0x0132 missing in IFD 0");
				Assert.IsNotNull (entry as StringIFDEntry, "Entry is not a string!");
				Assert.AreEqual ("2010:02:03 10:22:53", (entry as StringIFDEntry).Value);
			}
			// Image.0x0214 (ReferenceBlackWhite/Rational/6) "0/1 255/1 0/1 255/1 0/1 255/1"
			{
				var entry = structure.GetEntry (0, (ushort)IFDEntryTag.ReferenceBlackWhite);
				Assert.IsNotNull (entry, "Entry 0x0214 missing in IFD 0");
				Assert.IsNotNull (entry as RationalArrayIFDEntry, "Entry is not a rational array!");
				var parts = (entry as RationalArrayIFDEntry).Values;
				Assert.AreEqual (6, parts.Length);
				Assert.AreEqual (0, parts[0].Numerator);
				Assert.AreEqual (1, parts[0].Denominator);
				Assert.AreEqual (255, parts[1].Numerator);
				Assert.AreEqual (1, parts[1].Denominator);
				Assert.AreEqual (0, parts[2].Numerator);
				Assert.AreEqual (1, parts[2].Denominator);
				Assert.AreEqual (255, parts[3].Numerator);
				Assert.AreEqual (1, parts[3].Denominator);
				Assert.AreEqual (0, parts[4].Numerator);
				Assert.AreEqual (1, parts[4].Denominator);
				Assert.AreEqual (255, parts[5].Numerator);
				Assert.AreEqual (1, parts[5].Denominator);
			}
			// Image.0x8769 (ExifTag/SubIFD/1) "9046"
			{
				var entry = structure.GetEntry (0, (ushort)IFDEntryTag.ExifIFD);
				Assert.IsNotNull (entry, "Entry 0x8769 missing in IFD 0");
				Assert.IsNotNull (entry as SubIFDEntry, "Entry is not a sub IFD!");
			}

			var exif = structure.GetEntry (0, (ushort)IFDEntryTag.ExifIFD) as SubIFDEntry;
			Assert.IsNotNull (exif, "Exif tag not found");
			var exif_structure = exif.Structure;

			// Photo.0x829A (ExposureTime/Rational/1) "4/3000"
			{
				var entry = exif_structure.GetEntry (0, (ushort)ExifEntryTag.ExposureTime);
				Assert.IsNotNull (entry, "Entry 0x829A missing in IFD 0");
				Assert.IsNotNull (entry as RationalIFDEntry, "Entry is not a rational!");
				Assert.AreEqual (4, (entry as RationalIFDEntry).Value.Numerator);
				Assert.AreEqual (3000, (entry as RationalIFDEntry).Value.Denominator);
			}
			// Photo.0x829D (FNumber/Rational/1) "56/10"
			{
				var entry = exif_structure.GetEntry (0, (ushort)ExifEntryTag.FNumber);
				Assert.IsNotNull (entry, "Entry 0x829D missing in IFD 0");
				Assert.IsNotNull (entry as RationalIFDEntry, "Entry is not a rational!");
				Assert.AreEqual (56, (entry as RationalIFDEntry).Value.Numerator);
				Assert.AreEqual (10, (entry as RationalIFDEntry).Value.Denominator);
			}
			// Photo.0x8822 (ExposureProgram/Short/1) "3"
			{
				var entry = exif_structure.GetEntry (0, (ushort)ExifEntryTag.ExposureProgram);
				Assert.IsNotNull (entry, "Entry 0x8822 missing in IFD 0");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (3, (entry as ShortIFDEntry).Value);
			}
			// Photo.0x8827 (ISOSpeedRatings/Short/1) "200"
			{
				var entry = exif_structure.GetEntry (0, (ushort)ExifEntryTag.ISOSpeedRatings);
				Assert.IsNotNull (entry, "Entry 0x8827 missing in IFD 0");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (200, (entry as ShortIFDEntry).Value);
			}
			// Photo.0x9000 (ExifVersion/Undefined/4) "48 50 50 48 "
			{
				var entry = exif_structure.GetEntry (0, (ushort)ExifEntryTag.ExifVersion);
				Assert.IsNotNull (entry, "Entry 0x9000 missing in IFD 0");
				Assert.IsNotNull (entry as UndefinedIFDEntry, "Entry is not an undefined IFD entry!");
				var bytes = new byte[] { 48, 50, 50, 48 };
				var parsed_bytes = (entry as UndefinedIFDEntry).Data.Data;
				Assert.AreEqual (bytes, parsed_bytes);
			}
			// Photo.0x9003 (DateTimeOriginal/Ascii/20) "2010:01:30 13:21:53"
			{
				var entry = exif_structure.GetEntry (0, (ushort)ExifEntryTag.DateTimeOriginal);
				Assert.IsNotNull (entry, "Entry 0x9003 missing in IFD 0");
				Assert.IsNotNull (entry as StringIFDEntry, "Entry is not a string!");
				Assert.AreEqual ("2010:01:30 13:21:53", (entry as StringIFDEntry).Value);
			}
			// Photo.0x9004 (DateTimeDigitized/Ascii/20) "2010:01:30 13:21:53"
			{
				var entry = exif_structure.GetEntry (0, (ushort)ExifEntryTag.DateTimeDigitized);
				Assert.IsNotNull (entry, "Entry 0x9004 missing in IFD 0");
				Assert.IsNotNull (entry as StringIFDEntry, "Entry is not a string!");
				Assert.AreEqual ("2010:01:30 13:21:53", (entry as StringIFDEntry).Value);
			}
			// Photo.0x9204 (ExposureBiasValue/SRational/1) "6/6"
			{
				var entry = exif_structure.GetEntry (0, (ushort)ExifEntryTag.ExposureBiasValue);
				Assert.IsNotNull (entry, "Entry 0x9204 missing in IFD 0");
				Assert.IsNotNull (entry as SRationalIFDEntry, "Entry is not a srational!");
				Assert.AreEqual (6, (entry as SRationalIFDEntry).Value.Numerator);
				Assert.AreEqual (6, (entry as SRationalIFDEntry).Value.Denominator);
			}
			// Photo.0x9205 (MaxApertureValue/Rational/1) "16/10"
			{
				var entry = exif_structure.GetEntry (0, (ushort)ExifEntryTag.MaxApertureValue);
				Assert.IsNotNull (entry, "Entry 0x9205 missing in IFD 0");
				Assert.IsNotNull (entry as RationalIFDEntry, "Entry is not a rational!");
				Assert.AreEqual (16, (entry as RationalIFDEntry).Value.Numerator);
				Assert.AreEqual (10, (entry as RationalIFDEntry).Value.Denominator);
			}
			// Photo.0x9207 (MeteringMode/Short/1) "5"
			{
				var entry = exif_structure.GetEntry (0, (ushort)ExifEntryTag.MeteringMode);
				Assert.IsNotNull (entry, "Entry 0x9207 missing in IFD 0");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (5, (entry as ShortIFDEntry).Value);
			}
			// Photo.0x9208 (LightSource/Short/1) "0"
			{
				var entry = exif_structure.GetEntry (0, (ushort)ExifEntryTag.LightSource);
				Assert.IsNotNull (entry, "Entry 0x9208 missing in IFD 0");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (0, (entry as ShortIFDEntry).Value);
			}
			// Photo.0x9209 (Flash/Short/1) "0"
			{
				var entry = exif_structure.GetEntry (0, (ushort)ExifEntryTag.Flash);
				Assert.IsNotNull (entry, "Entry 0x9209 missing in IFD 0");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (0, (entry as ShortIFDEntry).Value);
			}
			// Photo.0x920A (FocalLength/Rational/1) "35/1"
			{
				var entry = exif_structure.GetEntry (0, (ushort)ExifEntryTag.FocalLength);
				Assert.IsNotNull (entry, "Entry 0x920A missing in IFD 0");
				Assert.IsNotNull (entry as RationalIFDEntry, "Entry is not a rational!");
				Assert.AreEqual (35, (entry as RationalIFDEntry).Value.Numerator);
				Assert.AreEqual (1, (entry as RationalIFDEntry).Value.Denominator);
			}
			// Photo.0x927C (MakerNote/MakerNote/9744) ""
			{
				var entry = exif_structure.GetEntry (0, (ushort)ExifEntryTag.MakerNote);
				Assert.IsNotNull (entry, "Entry 0x927C missing in IFD 0");
				Assert.IsNotNull (entry as MakernoteIFDEntry, "Entry is not a makernote IFD!");
			}

			var makernote = exif_structure.GetEntry (0, (ushort)ExifEntryTag.MakerNote) as MakernoteIFDEntry;
			Assert.IsNotNull (makernote, "MakerNote tag not found");
			var makernote_structure = makernote.Structure;


			Assert.AreEqual (MakernoteType.Nikon3, makernote.MakernoteType);

			// Nikon3.0x0001 (Version/Undefined/4) "48 50 49 48 "
			{
				var entry = makernote_structure.GetEntry (0, (ushort)Nikon3MakerNoteEntryTag.Version);
				Assert.IsNotNull (entry, "Entry 0x0001 missing in IFD 0");
				Assert.IsNotNull (entry as UndefinedIFDEntry, "Entry is not an undefined IFD entry!");
				var bytes = new byte[] { 48, 50, 49, 48 };
				var parsed_bytes = (entry as UndefinedIFDEntry).Data.Data;
				Assert.AreEqual (bytes, parsed_bytes);
			}
			// Nikon3.0x0002 (ISOSpeed/Short/2) "0 200"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)Nikon3MakerNoteEntryTag.ISOSpeed);
				Assert.IsNotNull (entry, "Entry 0x0002 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.AreEqual (new ushort[] { 0, 200 }, (entry as ShortArrayIFDEntry).Values);
			}
			// Nikon3.0x0004 (Quality/Ascii/8) "RAW    "
			{
				var entry = makernote_structure.GetEntry (0, (ushort)Nikon3MakerNoteEntryTag.Quality);
				Assert.IsNotNull (entry, "Entry 0x0004 missing in IFD 0");
				Assert.IsNotNull (entry as StringIFDEntry, "Entry is not a string!");
				Assert.AreEqual ("RAW    ", (entry as StringIFDEntry).Value);
			}
			// Nikon3.0x0005 (WhiteBalance/Ascii/13) "AUTO        "
			{
				var entry = makernote_structure.GetEntry (0, (ushort)Nikon3MakerNoteEntryTag.WhiteBalance);
				Assert.IsNotNull (entry, "Entry 0x0005 missing in IFD 0");
				Assert.IsNotNull (entry as StringIFDEntry, "Entry is not a string!");
				Assert.AreEqual ("AUTO        ", (entry as StringIFDEntry).Value);
			}
			// Nikon3.0x0007 (Focus/Ascii/7) "AF-S  "
			{
				var entry = makernote_structure.GetEntry (0, (ushort)Nikon3MakerNoteEntryTag.Focus);
				Assert.IsNotNull (entry, "Entry 0x0007 missing in IFD 0");
				Assert.IsNotNull (entry as StringIFDEntry, "Entry is not a string!");
				Assert.AreEqual ("AF-S  ", (entry as StringIFDEntry).Value);
			}
			// Nikon3.0x000B (WhiteBalanceBias/SShort/2) "0 0"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)Nikon3MakerNoteEntryTag.WhiteBalanceBias);
				Assert.IsNotNull (entry, "Entry 0x000B missing in IFD 0");
				Assert.IsNotNull (entry as SShortArrayIFDEntry, "Entry is not a signed short array!");
				Assert.AreEqual (new short[] { 0, 0 }, (entry as SShortArrayIFDEntry).Values);
			}
			// Nikon3.0x000C (ColorBalance1/Rational/4) "180078125/100000000 130859375/100000000 1/1 1/1"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)Nikon3MakerNoteEntryTag.WB_RBLevels);
				Assert.IsNotNull (entry, "Entry 0x000C missing in IFD 0");
				Assert.IsNotNull (entry as RationalArrayIFDEntry, "Entry is not a rational array!");
				var parts = (entry as RationalArrayIFDEntry).Values;
				Assert.AreEqual (4, parts.Length);
				Assert.AreEqual (180078125, parts[0].Numerator);
				Assert.AreEqual (100000000, parts[0].Denominator);
				Assert.AreEqual (130859375, parts[1].Numerator);
				Assert.AreEqual (100000000, parts[1].Denominator);
				Assert.AreEqual (1, parts[2].Numerator);
				Assert.AreEqual (1, parts[2].Denominator);
				Assert.AreEqual (1, parts[3].Numerator);
				Assert.AreEqual (1, parts[3].Denominator);
			}
			// Nikon3.0x000D (ProgramShift/Undefined/4) "0 1 6 0 "
			{
				var entry = makernote_structure.GetEntry (0, (ushort)Nikon3MakerNoteEntryTag.ProgramShift);
				Assert.IsNotNull (entry, "Entry 0x000D missing in IFD 0");
				Assert.IsNotNull (entry as UndefinedIFDEntry, "Entry is not an undefined IFD entry!");
				var bytes = new byte[] { 0, 1, 6, 0 };
				var parsed_bytes = (entry as UndefinedIFDEntry).Data.Data;
				Assert.AreEqual (bytes, parsed_bytes);
			}
			// Nikon3.0x000E (ExposureDiff/Undefined/4) "0 1 12 0 "
			{
				var entry = makernote_structure.GetEntry (0, (ushort)Nikon3MakerNoteEntryTag.ExposureDiff);
				Assert.IsNotNull (entry, "Entry 0x000E missing in IFD 0");
				Assert.IsNotNull (entry as UndefinedIFDEntry, "Entry is not an undefined IFD entry!");
				var bytes = new byte[] { 0, 1, 12, 0 };
				var parsed_bytes = (entry as UndefinedIFDEntry).Data.Data;
				Assert.AreEqual (bytes, parsed_bytes);
			}
			// Nikon3.0x0011 (Preview/SubIFD/1) "9738"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)Nikon3MakerNoteEntryTag.Preview);
				Assert.IsNotNull (entry, "Entry 0x0011 missing in IFD 0");
				Assert.IsNotNull (entry as SubIFDEntry, "Entry is not a sub IFD!");
			}

			var nikonpreview = makernote_structure.GetEntry (0, (ushort)Nikon3MakerNoteEntryTag.Preview) as SubIFDEntry;
			Assert.IsNotNull (nikonpreview, "Nikon preview tag not found");
			var nikonpreview_structure = nikonpreview.Structure;

			// NikonPreview.0x0103 (Compression/Short/1) "6"
			{
				var entry = nikonpreview_structure.GetEntry (0, (ushort)NikonPreviewMakerNoteEntryTag.Compression);
				Assert.IsNotNull (entry, "Entry 0x0103 missing in IFD 0");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (6, (entry as ShortIFDEntry).Value);
			}
			// NikonPreview.0x011A (XResolution/Rational/1) "300/1"
			{
				var entry = nikonpreview_structure.GetEntry (0, (ushort)NikonPreviewMakerNoteEntryTag.XResolution);
				Assert.IsNotNull (entry, "Entry 0x011A missing in IFD 0");
				Assert.IsNotNull (entry as RationalIFDEntry, "Entry is not a rational!");
				Assert.AreEqual (300, (entry as RationalIFDEntry).Value.Numerator);
				Assert.AreEqual (1, (entry as RationalIFDEntry).Value.Denominator);
			}
			// NikonPreview.0x011B (YResolution/Rational/1) "300/1"
			{
				var entry = nikonpreview_structure.GetEntry (0, (ushort)NikonPreviewMakerNoteEntryTag.YResolution);
				Assert.IsNotNull (entry, "Entry 0x011B missing in IFD 0");
				Assert.IsNotNull (entry as RationalIFDEntry, "Entry is not a rational!");
				Assert.AreEqual (300, (entry as RationalIFDEntry).Value.Numerator);
				Assert.AreEqual (1, (entry as RationalIFDEntry).Value.Denominator);
			}
			// NikonPreview.0x0128 (ResolutionUnit/Short/1) "2"
			{
				var entry = nikonpreview_structure.GetEntry (0, (ushort)NikonPreviewMakerNoteEntryTag.ResolutionUnit);
				Assert.IsNotNull (entry, "Entry 0x0128 missing in IFD 0");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (2, (entry as ShortIFDEntry).Value);
			}
			// NikonPreview.0x0201 (JPEGInterchangeFormat/ThumbnailDataIFD/1) "61394"
			{
				var entry = nikonpreview_structure.GetEntry (0, (ushort)NikonPreviewMakerNoteEntryTag.PreviewImageStart);
				Assert.IsNotNull (entry, "Entry 0x0201 missing in IFD 0");
				Assert.IsNotNull (entry as ThumbnailDataIFDEntry, "Entry is not a thumbnail IFD!");
			}
			// NikonPreview.0x0202 (JPEGInterchangeFormatLength/Long/1) "33895"
			{
				var entry = nikonpreview_structure.GetEntry (0, (ushort)NikonPreviewMakerNoteEntryTag.PreviewImageLength);
				Assert.IsNotNull (entry, "Entry 0x0202 missing in IFD 0");
				Assert.IsNotNull (entry as LongIFDEntry, "Entry is not a long!");
				Assert.AreEqual (33895, (entry as LongIFDEntry).Value);
			}
			// Nikon3.0x0013 (ISOSettings/Short/2) "0 200"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)Nikon3MakerNoteEntryTag.ISOSettings);
				Assert.IsNotNull (entry, "Entry 0x0013 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.AreEqual (new ushort[] { 0, 200 }, (entry as ShortArrayIFDEntry).Values);
			}
			// Nikon3.0x0019 (ExposureBracketComp/SRational/1) "0/1"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)Nikon3MakerNoteEntryTag.ExposureBracketComp);
				Assert.IsNotNull (entry, "Entry 0x0019 missing in IFD 0");
				Assert.IsNotNull (entry as SRationalIFDEntry, "Entry is not a srational!");
				Assert.AreEqual (0, (entry as SRationalIFDEntry).Value.Numerator);
				Assert.AreEqual (1, (entry as SRationalIFDEntry).Value.Denominator);
			}
			// Nikon3.0x001B (CropHiSpeed/Short/7) "0 4352 2868 4352 2868 0 0"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)Nikon3MakerNoteEntryTag.CropHiSpeed);
				Assert.IsNotNull (entry, "Entry 0x001B missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.AreEqual (new ushort[] { 0, 4352, 2868, 4352, 2868, 0, 0 }, (entry as ShortArrayIFDEntry).Values);
			}
			// Nikon3.0x001C (0x001c/Undefined/4) "0 1 6 0 "
			{
				// TODO: Unknown IFD tag: Nikon3 / 0x001C
				var entry = makernote_structure.GetEntry (0, 0x001C);
				Assert.IsNotNull (entry, "Entry 0x001C missing in IFD 0");
				Assert.IsNotNull (entry as UndefinedIFDEntry, "Entry is not an undefined IFD entry!");
				var bytes = new byte[] { 0, 1, 6, 0 };
				var parsed_bytes = (entry as UndefinedIFDEntry).Data.Data;
				Assert.AreEqual (bytes, parsed_bytes);
			}
			// Nikon3.0x001D (SerialNumber/Ascii/8) "6004417"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)Nikon3MakerNoteEntryTag.SerialNumber);
				Assert.IsNotNull (entry, "Entry 0x001D missing in IFD 0");
				Assert.IsNotNull (entry as StringIFDEntry, "Entry is not a string!");
				Assert.AreEqual ("6004417", (entry as StringIFDEntry).Value);
			}
			// Nikon3.0x001E (ColorSpace/Short/1) "1"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)Nikon3MakerNoteEntryTag.ColorSpace);
				Assert.IsNotNull (entry, "Entry 0x001E missing in IFD 0");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (1, (entry as ShortIFDEntry).Value);
			}
			// Nikon3.0x001F (VRInfo/Undefined/8) "48 49 48 48 2 2 0 0 "
			{
				var entry = makernote_structure.GetEntry (0, (ushort)Nikon3MakerNoteEntryTag.VRInfo);
				Assert.IsNotNull (entry, "Entry 0x001F missing in IFD 0");
				Assert.IsNotNull (entry as UndefinedIFDEntry, "Entry is not an undefined IFD entry!");
				var bytes = new byte[] { 48, 49, 48, 48, 2, 2, 0, 0 };
				var parsed_bytes = (entry as UndefinedIFDEntry).Data.Data;
				Assert.AreEqual (bytes, parsed_bytes);
			}
			// Nikon3.0x0022 (ActiveDLighting/Short/1) "65535"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)Nikon3MakerNoteEntryTag.ActiveDLighting);
				Assert.IsNotNull (entry, "Entry 0x0022 missing in IFD 0");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (65535, (entry as ShortIFDEntry).Value);
			}
			// Nikon3.0x0023 (PictureControl/Undefined/58) "48 49 48 48 83 84 65 78 68 65 82 68 0 0 0 0 0 0 0 0 0 0 0 0 83 84 65 78 68 65 82 68 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 128 131 128 128 128 128 255 255 255 "
			{
				var entry = makernote_structure.GetEntry (0, (ushort)Nikon3MakerNoteEntryTag.PictureControl);
				Assert.IsNotNull (entry, "Entry 0x0023 missing in IFD 0");
				Assert.IsNotNull (entry as UndefinedIFDEntry, "Entry is not an undefined IFD entry!");
				var bytes = new byte[] { 48, 49, 48, 48, 83, 84, 65, 78, 68, 65, 82, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 84, 65, 78, 68, 65, 82, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 128, 131, 128, 128, 128, 128, 255, 255, 255 };
				var parsed_bytes = (entry as UndefinedIFDEntry).Data.Data;
				Assert.AreEqual (bytes, parsed_bytes);
			}
			// Nikon3.0x0024 (WorldTime/Undefined/4) "60 0 0 0 "
			{
				var entry = makernote_structure.GetEntry (0, (ushort)Nikon3MakerNoteEntryTag.WorldTime);
				Assert.IsNotNull (entry, "Entry 0x0024 missing in IFD 0");
				Assert.IsNotNull (entry as UndefinedIFDEntry, "Entry is not an undefined IFD entry!");
				var bytes = new byte[] { 60, 0, 0, 0 };
				var parsed_bytes = (entry as UndefinedIFDEntry).Data.Data;
				Assert.AreEqual (bytes, parsed_bytes);
			}
			// Nikon3.0x0025 (ISOInfo/Undefined/14) "72 1 12 0 0 0 72 1 12 0 0 0 0 0 "
			{
				var entry = makernote_structure.GetEntry (0, (ushort)Nikon3MakerNoteEntryTag.ISOInfo);
				Assert.IsNotNull (entry, "Entry 0x0025 missing in IFD 0");
				Assert.IsNotNull (entry as UndefinedIFDEntry, "Entry is not an undefined IFD entry!");
				var bytes = new byte[] { 72, 1, 12, 0, 0, 0, 72, 1, 12, 0, 0, 0, 0, 0 };
				var parsed_bytes = (entry as UndefinedIFDEntry).Data.Data;
				Assert.AreEqual (bytes, parsed_bytes);
			}
			// Nikon3.0x002C (0x002c/Undefined/94) "48 49 48 48 5 0 100 1 236 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 "
			{
				// TODO: Unknown IFD tag: Nikon3 / 0x002C
				var entry = makernote_structure.GetEntry (0, 0x002C);
				Assert.IsNotNull (entry, "Entry 0x002C missing in IFD 0");
				Assert.IsNotNull (entry as UndefinedIFDEntry, "Entry is not an undefined IFD entry!");
				var bytes = new byte[] { 48, 49, 48, 48, 5, 0, 100, 1, 236, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
				var parsed_bytes = (entry as UndefinedIFDEntry).Data.Data;
				Assert.AreEqual (bytes, parsed_bytes);
			}
			// Nikon3.0x0083 (LensType/Byte/1) "6 "
			{
				var entry = makernote_structure.GetEntry (0, (ushort)Nikon3MakerNoteEntryTag.LensType);
				Assert.IsNotNull (entry, "Entry 0x0083 missing in IFD 0");
				Assert.IsNotNull (entry as ByteIFDEntry, "Entry is not a byte!");
				Assert.AreEqual (6, (entry as ByteIFDEntry).Value);
			}
			// Nikon3.0x0084 (Lens/Rational/4) "35/1 35/1 18/10 18/10"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)Nikon3MakerNoteEntryTag.Lens);
				Assert.IsNotNull (entry, "Entry 0x0084 missing in IFD 0");
				Assert.IsNotNull (entry as RationalArrayIFDEntry, "Entry is not a rational array!");
				var parts = (entry as RationalArrayIFDEntry).Values;
				Assert.AreEqual (4, parts.Length);
				Assert.AreEqual (35, parts[0].Numerator);
				Assert.AreEqual (1, parts[0].Denominator);
				Assert.AreEqual (35, parts[1].Numerator);
				Assert.AreEqual (1, parts[1].Denominator);
				Assert.AreEqual (18, parts[2].Numerator);
				Assert.AreEqual (10, parts[2].Denominator);
				Assert.AreEqual (18, parts[3].Numerator);
				Assert.AreEqual (10, parts[3].Denominator);
			}
			// Nikon3.0x0087 (FlashMode/Byte/1) "0 "
			{
				var entry = makernote_structure.GetEntry (0, (ushort)Nikon3MakerNoteEntryTag.FlashMode);
				Assert.IsNotNull (entry, "Entry 0x0087 missing in IFD 0");
				Assert.IsNotNull (entry as ByteIFDEntry, "Entry is not a byte!");
				Assert.AreEqual (0, (entry as ByteIFDEntry).Value);
			}
			// Nikon3.0x0089 (ShootingMode/Short/1) "0"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)Nikon3MakerNoteEntryTag.ShootingMode);
				Assert.IsNotNull (entry, "Entry 0x0089 missing in IFD 0");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (0, (entry as ShortIFDEntry).Value);
			}
			// Nikon3.0x008A (AutoBracketRelease/Short/1) "2"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)Nikon3MakerNoteEntryTag.AutoBracketRelease);
				Assert.IsNotNull (entry, "Entry 0x008A missing in IFD 0");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (2, (entry as ShortIFDEntry).Value);
			}
			// Nikon3.0x008B (LensFStops/Undefined/4) "88 1 12 0 "
			{
				var entry = makernote_structure.GetEntry (0, (ushort)Nikon3MakerNoteEntryTag.LensFStops);
				Assert.IsNotNull (entry, "Entry 0x008B missing in IFD 0");
				Assert.IsNotNull (entry as UndefinedIFDEntry, "Entry is not an undefined IFD entry!");
				var bytes = new byte[] { 88, 1, 12, 0 };
				var parsed_bytes = (entry as UndefinedIFDEntry).Data.Data;
				Assert.AreEqual (bytes, parsed_bytes);
			}
			// Nikon3.0x008C (ToneCurve/Undefined/578) "73 48 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 "
			{
				var entry = makernote_structure.GetEntry (0, (ushort)Nikon3MakerNoteEntryTag.ContrastCurve);
				Assert.IsNotNull (entry, "Entry 0x008C missing in IFD 0");
				Assert.IsNotNull (entry as UndefinedIFDEntry, "Entry is not an undefined IFD entry!");
				var bytes = new byte[] { 73, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
				var parsed_bytes = (entry as UndefinedIFDEntry).Data.Data;
				Assert.AreEqual (bytes, parsed_bytes);
			}
			// Nikon3.0x0091 (ShotInfo/Undefined/6600) "48 50 49 51 174 202 190 173 121 234 24 208 182 68 22 73 229 252 76 16 71 212 214 49 249 36 176 160 55 116 37 158 177 102 84 111 239 203 30 205 229 24 56 123 33 104 162 121 176 190 220 251 151 204 102 123 240 218 194 115 81 104 107 230 29 75 101 108 63 196 174 253 177 202 72 42 115 33 50 168 133 198 108 119 231 188 246 149 153 2 208 3 155 152 250 193 226 17 103 207 143 180 62 45 129 58 88 219 195 16 194 217 85 54 124 39 55 172 134 197 105 114 224 179 235 136 138 241 253 174 154 97 222 165 207 92 79 171 118 138 18 1 83 8 46 51 152 215 134 28 28 212 57 147 15 174 58 248 27 138 141 95 148 45 46 148 94 141 33 26 120 88 156 38 248 249 245 22 156 135 215 143 166 233 8 82 1 19 139 104 170 81 93 206 164 223 127 132 238 189 241 138 136 235 179 224 114 105 9 74 172 55 39 124 54 85 217 194 16 195 219 88 58 129 45 62 180 143 207 116 94 237 193 250 152 155 35 208 34 153 154 215 188 231 119 108 230 133 137 50 32 137 43 176 202 118 253 97 196 43 31 39 14 25 145 106 168 75 83 163 146 200 101 103 204 147 11 144 68 67 153 67 48 35 123 58 90 227 204 166 212 239 111 81 156 195 97 180 184 251 111 124 221 6 201 46 220 71 23 83 230 229 77 80 64 211 201 166 234 17 157 142 228 159 191 68 46 125 49 74 200 171 243 130 178 41 5 34 237 247 102 60 118 217 27 50 80 135 27 24 122 141 161 50 56 131 195 248 114 97 205 118 20 151 143 92 142 149 25 122 48 107 123 224 202 137 37 62 172 255 167 196 198 189 241 162 200 51 147 232 130 17 29 230 36 199 95 76 30 69 105 234 192 155 203 208 90 185 117 174 117 224 185 253 153 163 8 221 22 175 175 20 222 13 164 114 248 187 231 50 98 185 117 183 28 7 82 228 38 165 141 144 128 147 11 194 42 209 216 166 36 95 251 70 110 61 113 30 26 157 211 190 224 31 165 216 62 65 71 34 164 35 185 157 130 181 187 7 168 247 77 97 38 249 175 42 236 155 161 164 10 237 99 142 130 31 21 118 46 145 23 51 84 243 201 109 178 5 75 23 88 199 157 241 187 64 99 28 113 98 237 18 215 52 47 184 237 182 25 30 76 23 71 195 214 53 249 61 176 163 251 167 218 97 77 129 84 111 235 150 30 205 229 24 56 123 39 114 162 121 177 20 93 116 150 127 103 214 200 33 193 82 74 169 107 149 28 10 101 27 62 192 175 252 176 203 73 42 114 33 48 25 135 118 110 199 229 12 246 149 153 2 208 3 155 152 250 193 237 126 116 207 143 180 62 45 129 58 88 219 195 16 194 217 85 54 124 39 55 172 134 197 105 114 224 179 235 136 138 241 189 238 132 127 223 164 206 93 81 170 104 139 19 0 82 9 37 166 140 215 135 156 22 245 57 226 240 99 59 120 26 33 141 94 148 47 47 148 94 141 33 26 120 59 67 240 219 113 23 8 170 141 215 196 166 40 75 89 0 35 139 104 168 25 100 208 182 41 159 101 238 188 243 139 174 210 179 224 114 105 219 128 172 55 39 124 54 70 8 194 16 195 183 28 60 185 45 62 180 143 79 68 186 238 173 90 93 153 92 205 28 152 106 9 195 217 136 108 198 196 66 205 223 188 0 98 224 155 253 109 44 252 151 167 14 36 110 149 8 180 172 182 109 54 226 153 51 70 65 111 169 202 134 221 207 92 58 105 100 11 243 219 234 146 110 85 97 178 158 37 186 133 92 79 221 240 53 255 92 5 22 76 25 26 105 232 2 216 203 44 234 17 157 142 228 143 191 65 102 111 7 138 72 168 243 160 178 41 5 82 255 127 87 188 2 5 13 132 83 135 119 92 229 25 41 186 224 91 174 32 184 238 42 254 220 91 67 145 70 89 213 183 252 231 183 44 23 197 233 246 96 115 43 8 10 117 61 94 12 255 87 36 78 205 83 58 204 10 147 185 66 137 165 38 12 126 14 21 198 116 185 99 112 243 187 248 154 161 13 220 20 175 172 20 222 13 161 154 248 187 227 112 98 185 117 150 28 7 86 12 39 165 143 95 132 255 79 232 40 142 108 225 149 239 71 179 216 142 203 176 189 216 130 213 71 82 254 189 144 11 169 145 212 182 61 49 102 101 83 216 186 1 28 158 194 110 254 224 74 47 64 120 24 27 131 80 130 25 21 118 60 103 247 236 70 5 41 178 160 243 171 200 74 49 125 46 68 191 159 228 142 164 31 234 40 203 211 64 18 73 229 230 76 23 71 220 214 53 249 34 176 163 251 184 218 97 77 158 84 111 254 146 30 205 227 168 58 101 33 147 162 72 74 179 163 2 104 30 102 97 201 156 63 165 75 168 106 148 226 223 100 31 58 2 136 69 186 121 67 29 120 171 57 105 142 77 103 239 236 61 253 22 146 98 219 80 144 225 241 255 231 111 126 224 133 231 52 39 139 11 82 78 201 9 203 37 92 181 117 169 62 118 140 238 150 57 31 244 20 183 117 200 66 220 123 79 32 245 49 24 174 232 151 185 236 67 173 63 218 250 115 131 120 163 233 189 198 174 15 92 196 43 229 30 114 27 107 103 208 208 161 197 222 252 120 48 156 26 29 197 245 27 156 129 40 102 89 208 246 174 0 17 139 104 170 91 162 61 91 9 127 132 238 191 14 112 119 25 76 15 141 153 197 137 83 206 216 142 201 164 181 194 16 195 219 88 58 129 45 62 180 143 207 116 126 237 195 8 154 128 1 114 2 168 106 19 67 35 136 190 198 129 169 61 223 133 43 72 202 180 2 127 196 63 26 44 40 165 154 223 163 101 88 78 153 118 110 224 199 24 204 35 93 52 114 195 59 121 112 69 81 160 199 11 222 208 101 1 148 64 107 237 178 108 169 168 43 7 60 83 213 214 30 150 236 207 182 94 191 155 52 107 21 40 98 190 27 177 64 21 209 53 206 9 55 156 12 225 77 31 250 27 19 174 152 124 137 83 230 193 175 195 228 72 133 8 146 185 11 4 240 115 65 232 254 89 216 80 188 126 189 165 213 166 252 173 72 194 249 189 22 14 96 48 107 9 10 124 194 156 251 38 95 36 177 33 46 223 23 242 108 113 45 125 165 36 243 161 248 228 105 140 213 98 112 227 187 248 154 161 13 222 20 175 175 20 222 13 163 98 250 233 225 192 98 139 138 119 227 193 168 221 38 161 137 220 127 122 244 23 42 212 34 158 219 161 250 194 72 133 122 185 3 93 56 235 249 41 78 141 39 47 172 125 189 86 82 34 155 16 80 161 177 63 167 175 62 32 69 167 244 103 75 75 18 142 137 73 139 229 28 245 53 233 254 54 76 46 214 249 95 180 84 247 181 8 130 28 187 143 96 181 113 216 238 168 215 249 44 3 237 127 26 186 179 67 184 227 41 125 6 110 79 156 4 235 37 94 178 219 171 39 16 144 225 133 30 188 56 112 220 218 93 133 181 91 92 193 104 38 153 144 54 110 192 81 75 168 106 155 226 253 155 201 63 196 174 255 78 48 183 217 140 207 205 89 133 201 147 142 24 78 9 100 245 2 208 3 155 152 250 193 237 126 116 207 143 180 62 45 129 58 88 219 195 16 226 11 85 54 92 140 55 172 167 95 105 114 224 178 224 131 117 14 189 238 131 127 223 164 192 126 81 170 104 139 19 0 82 9 37 166 140 215 135 231 113 151 57 133 91 186 59 120 26 33 141 94 148 47 47 148 94 141 42 22 120 59 99 240 226 57 245 22 156 137 214 142 171 38 13 92 5 18 137 101 169 85 83 203 164 223 127 132 238 189 241 138 136 235 179 224 114 105 197 134 172 55 39 124 54 85 217 194 16 195 219 88 58 129 45 62 180 143 207 116 126 237 193 250 152 155 3 208 2 153 149 246 188 231 119 108 223 239 169 50 57 30 43 72 211 203 253 174 221 68 31 100 23 154 145 106 177 236 83 192 139 110 101 102 236 3 199 92 118 34 121 162 16 134 123 56 122 71 205 30 244 94 111 84 190 156 97 218 152 42 163 176 34 249 53 214 220 71 23 76 230 229 73 18 64 211 203 40 234 17 157 142 228 159 191 68 46 125 49 74 200 171 243 160 178 41 5 70 236 247 103 60 118 21 25 130 80 131 27 24 122 65 109 254 244 79 15 52 190 173 1 186 216 91 67 144 66 89 213 182 252 167 183 44 6 69 233 242 96 51 107 8 10 113 61 110 4 255 95 36 78 221 209 42 232 11 147 128 210 137 165 38 12 87 7 28 150 117 185 98 112 227 187 248 154 161 13 222 20 175 175 20 222 13 161 154 248 187 227 112 98 185 117 150 28 7 87 12 38 165 137 210 128 147 11 232 42 209 221 78 36 95 255 4 110 61 113 10 8 107 51 96 242 233 69 6 44 183 167 252 182 213 89 66 144 67 91 216 186 1 173 190 52 15 79 244 254 109 65 122 24 27 131 80 130 25 21 118 60 103 247 237 252 32 41 52 238 157 171 200 93 224 125 46 120 189 159 244 144 57 17 234 42 2 211 64 18 123 229 230 9 238 71 77 140 3 249 34 169 23 251 184 223 89 77 150 181 109 239 212 31 93 225 90 56 73 35 48 162 250 181 86 92 223 91 99 170 202 54 109 63 172 180 87 149 110 226 241 155 224 192 187 81 2 78 53 183 212 140 223 205 86 122 57 147 136 24 67 9 106 102 253 47 252 100 103 5 62 18 129 139 48 112 75 62 45 126 197 167 36 60 239 61 38 170 201 131 216 200 83 121 58 150 141 31 76 20 119 117 14 64 17 123 128 32 91 49 162 174 85 151 116 236 255 173 246 218 89 115 40 120 99 233 10 198 29 15 156 196 135 229 222 114 161 107 208 208 107 161 114 222 229 135 196 156 15 29 198 10 233 99 120 40 115 89 218 246 173 255 236 116 151 85 238 162 49 91 32 128 123 17 66 14 117 119 20 76 31 141 150 58 121 83 200 216 131 201 170 38 61 239 60 36 167 197 126 210 193 75 112 48 139 129 18 62 5 103 100 252 47 253 102 106 9 67 24 136 147 57 122 86 205 223 140 212 183 53 78 2 81 59 192 224 155 241 226 110 149 87 180 172 63 109 54 154 153 51 104 56 163 169 74 134 93 207 220 132 199 165 30 50 225 43 16 144 171 97 178 158 37 71 4 92 79 221 6 202 41 35 184 232 179 25 26 182 237 191 44 52 215 21 238 98 113 27 96 64 187 209 130 206 181 55 84 12 95 77 214 250 185 19 8 152 195 137 234 230 125 175 124 228 231 133 190 146 1 11 176 240 203 65 82 254 69 39 164 188 111 189 166 42 73 3 88 72 211 249 186 150 13 159 204 148 247 245 142 194 145 251 0 160 219 177 34 46 213 23 244 104 127 45 118 90 217 243 168 248 227 105 138 70 157 143 28 68 7 101 94 242 33 235 80 80 235 33 242 94 101 7 68 28 143 157 70 138 105 227 248 168 243 217 90 118 45 127 108 244 23 213 46 34 177 219 160 0 251 145 194 142 245 247 148 204 159 13 22 186 249 211 72 88 3 73 42 166 189 111 188 164 39 69 254 82 65 203 240 176 11 1 146 190 133 231 228 124 175 125 230 234 137 195 152 8 19 185 250 214 77 95 12 84 55 181 206 130 209 187 64 96 27 113 98 238 21 215 52 40 191 237 182 26 25 179 232 184 35 41 202 6 221 79 92 4 71 37 158 178 97 171 144 16 43 225 50 30 165 199 132 220 207 93 134 74 169 163 56 104 51 153 154 54 109 63 172 180 87 149 110 226 241 155 224 192 59 81 2 70 53 183 212 140 223 205 86 122 41 147 136 24 67 9 106 102 253 47 252 100 103 5 62 18 129 139 48 112 75 193 210 126 197 167 36 60 239 61 38 170 201 131 216 200 83 121 58 150 141 31 76 20 119 117 14 66 17 123 128 32 91 49 162 174 85 151 116 236 255 173 246 218 89 115 40 120 99 233 10 198 29 15 156 196 135 229 222 114 161 107 208 208 107 161 114 222 229 135 196 156 15 29 198 10 233 99 120 40 115 89 218 246 173 255 236 116 151 85 174 162 49 91 32 128 123 17 66 14 117 119 20 76 31 141 150 58 121 83 200 216 131 201 170 38 61 239 60 36 167 197 126 210 193 75 112 48 139 129 18 62 5 103 100 252 47 253 102 106 9 67 24 136 147 57 122 86 205 223 140 212 183 53 78 2 81 59 192 224 155 241 226 110 148 87 180 172 63 109 54 154 153 51 104 56 163 169 74 134 93 207 220 132 199 165 30 50 225 43 16 144 171 97 178 158 37 71 4 92 79 221 6 202 41 35 184 232 179 25 26 182 237 191 44 52 215 21 238 98 113 27 96 64 187 209 130 206 181 55 84 12 95 77 214 250 185 19 8 152 195 137 234 230 125 175 124 228 231 133 190 146 1 11 176 240 203 65 82 254 69 39 164 188 111 189 166 42 73 3 88 72 211 249 186 22 13 159 204 148 247 245 142 194 145 251 0 160 219 177 34 46 213 23 244 108 127 45 118 90 217 243 232 248 227 105 138 70 157 143 28 68 7 101 94 242 33 235 80 80 235 33 242 94 101 7 68 28 143 157 70 138 105 227 248 168 243 217 90 118 45 127 108 244 23 213 46 34 177 219 160 0 251 145 194 142 245 247 148 204 159 13 22 186 249 211 72 88 3 73 42 166 189 111 188 164 39 69 254 82 65 203 240 176 11 1 146 190 133 231 228 124 175 125 230 234 137 195 152 8 19 185 250 214 77 95 12 84 55 181 206 130 209 187 64 96 27 113 98 238 21 215 52 44 191 237 182 26 25 179 232 184 35 41 202 6 221 79 92 4 71 37 158 178 97 171 144 16 43 225 50 30 165 199 132 220 207 93 134 74 169 163 56 104 51 153 154 54 109 63 172 180 87 149 110 226 241 155 224 192 59 81 2 78 53 183 212 140 223 205 86 122 57 147 136 24 67 9 106 102 253 47 252 100 103 5 62 18 129 139 48 112 75 193 210 126 197 167 36 60 239 61 38 170 201 131 216 200 83 121 58 150 141 31 76 20 119 117 14 66 17 123 128 32 91 49 162 174 85 151 116 236 255 173 246 218 89 115 40 120 99 233 10 198 29 15 156 196 135 229 222 114 161 107 208 208 107 161 114 222 229 135 196 156 15 29 198 10 233 99 120 40 115 89 218 246 173 255 236 116 151 85 174 162 49 91 32 128 123 17 66 14 117 119 20 76 31 141 150 58 121 83 200 216 131 201 170 38 61 239 60 36 166 197 126 210 193 75 112 48 139 129 18 62 5 103 100 252 47 253 102 106 9 67 24 136 147 57 122 86 205 223 140 212 183 53 78 2 81 59 192 224 155 241 226 110 149 87 180 172 63 109 54 154 153 51 104 56 163 169 74 134 93 207 220 132 199 165 30 50 225 43 16 144 171 97 178 158 37 71 4 92 79 221 6 202 41 35 184 232 179 25 26 182 237 191 44 52 215 21 238 98 113 27 96 64 187 209 130 206 181 55 84 12 95 77 214 250 185 19 8 152 195 137 234 230 125 175 124 228 231 133 190 146 1 11 176 240 203 65 82 254 69 39 164 188 111 189 166 42 73 3 88 72 211 249 186 22 13 159 204 148 247 245 142 194 145 251 0 160 219 177 34 46 213 23 244 108 127 45 118 90 217 243 168 248 227 105 138 70 157 143 28 68 7 101 94 242 33 235 80 80 235 33 242 94 101 7 68 28 143 157 70 138 105 227 248 168 243 217 90 118 45 127 108 244 23 213 46 34 177 223 160 0 251 145 194 142 245 247 148 204 159 13 22 186 249 211 72 88 3 73 42 166 189 111 188 164 39 69 254 82 65 203 240 176 11 1 146 190 133 231 228 124 175 125 230 234 137 195 152 8 19 185 250 214 77 95 12 84 55 181 206 130 209 187 64 96 27 113 98 238 21 215 52 44 191 237 182 26 25 179 232 184 35 41 202 6 221 79 92 4 71 37 158 178 97 171 144 16 43 225 50 30 165 199 132 220 207 93 134 74 169 163 56 104 51 153 154 54 109 63 172 180 87 149 110 226 241 155 224 192 59 81 2 78 53 183 212 140 223 205 86 122 57 147 136 24 67 9 106 102 253 47 252 100 103 5 62 18 129 139 48 112 75 193 210 126 197 167 36 60 239 61 38 170 201 131 216 200 83 121 58 150 141 31 76 20 119 117 14 66 17 123 128 32 91 49 162 174 85 151 116 236 255 173 246 218 89 115 40 120 99 233 10 198 29 15 156 196 135 229 222 114 161 107 208 208 107 161 114 222 229 135 196 156 15 29 198 10 233 99 120 40 115 89 218 246 173 255 236 116 151 85 174 162 49 91 32 128 123 17 66 14 117 119 20 76 31 141 150 58 121 83 200 216 131 201 170 38 61 239 60 36 167 197 126 210 193 75 112 48 139 129 18 62 5 103 100 252 47 253 102 106 9 67 24 136 147 57 122 86 205 223 140 212 183 53 78 2 81 59 192 224 155 241 226 110 149 87 180 172 63 109 54 154 153 51 104 56 163 169 74 134 93 207 220 132 197 165 30 50 225 43 16 144 171 97 178 158 37 71 4 92 79 221 6 202 41 35 184 232 179 25 26 150 237 191 44 52 215 21 238 98 113 27 96 64 187 209 130 206 181 55 84 12 95 77 214 250 185 19 8 152 195 137 234 230 125 175 124 228 231 133 190 146 1 11 176 240 203 65 82 254 69 39 164 188 111 189 166 42 73 3 88 72 211 249 186 22 13 159 204 148 247 245 142 194 145 251 0 160 219 177 34 46 213 23 244 108 127 45 118 90 217 243 168 248 227 105 138 70 157 143 28 68 7 101 94 242 33 235 80 80 235 33 242 94 101 71 68 28 143 157 70 138 105 227 248 168 243 217 90 118 45 127 108 244 23 213 46 34 177 219 160 0 251 145 194 142 245 247 148 204 159 13 22 186 249 211 72 88 3 73 42 166 189 111 188 164 39 69 254 82 65 203 240 176 11 1 146 190 133 231 228 124 175 125 230 234 137 195 152 8 19 185 250 214 77 95 12 84 55 181 206 130 209 187 64 96 27 113 98 238 21 215 52 44 191 237 182 26 25 179 232 184 35 41 202 6 221 79 92 4 71 37 158 178 97 171 144 16 43 225 50 30 165 199 132 220 207 93 134 74 169 163 56 104 51 153 154 54 109 63 172 180 87 149 110 226 241 155 224 192 59 81 2 78 53 183 212 140 223 205 86 122 57 147 136 24 67 9 106 102 253 47 252 100 103 5 62 18 129 139 48 112 75 193 210 126 197 167 36 60 239 61 38 170 201 131 216 200 83 121 58 150 141 31 76 20 119 117 14 66 17 123 128 32 91 49 162 174 85 151 116 236 255 173 246 218 89 115 40 120 99 233 10 198 29 15 156 196 135 229 222 114 161 107 208 208 107 161 114 222 229 135 196 156 15 29 198 10 233 99 120 40 115 89 218 246 173 255 236 116 151 85 174 162 49 91 32 128 123 17 66 14 117 119 20 76 31 141 150 58 121 83 200 216 131 201 170 38 61 239 60 36 167 197 126 210 193 75 112 48 139 129 18 62 5 103 100 252 47 253 102 106 9 67 24 136 147 57 122 86 205 223 140 212 183 53 78 2 81 59 192 224 155 241 226 110 149 87 180 172 63 109 54 154 153 51 104 56 163 169 74 134 93 207 220 132 199 165 30 50 225 43 17 144 171 97 178 158 37 71 4 92 79 221 6 202 41 35 184 232 179 25 26 182 237 191 44 52 215 21 238 98 113 27 96 64 187 209 130 206 181 55 84 12 95 77 214 250 185 19 8 152 195 137 234 230 125 175 124 228 231 133 190 146 1 11 176 240 203 65 82 254 69 39 164 188 111 189 166 42 73 3 88 72 211 249 186 22 13 159 204 148 247 245 142 194 153 251 0 160 219 177 34 46 213 23 244 108 127 45 118 90 217 243 168 248 227 105 138 70 157 143 28 68 7 101 94 242 33 235 80 80 235 33 242 94 101 7 68 28 143 157 70 138 105 227 248 168 243 217 90 118 45 127 108 244 23 213 46 34 177 219 160 0 251 145 194 142 245 247 148 204 159 13 22 186 249 211 72 88 3 73 42 166 189 111 188 164 39 69 254 82 65 203 240 176 11 1 146 190 133 231 228 124 175 125 230 234 137 195 152 8 19 185 250 214 77 95 12 84 55 181 206 130 209 187 64 96 27 113 98 238 21 215 52 44 191 237 182 26 25 179 232 184 35 41 202 6 221 79 92 4 71 37 158 178 97 171 144 16 43 225 50 30 165 199 132 220 207 93 134 74 169 163 56 104 51 153 154 54 109 63 172 180 87 149 110 226 241 155 224 192 59 81 2 78 53 183 212 140 223 197 86 122 57 147 136 24 67 9 106 102 253 47 252 100 103 5 62 18 129 139 48 112 75 193 210 126 197 167 36 60 239 61 38 170 201 131 216 200 83 121 58 150 141 31 76 28 119 117 14 66 17 123 128 32 91 49 162 174 85 151 116 236 255 173 246 218 89 115 40 120 99 233 10 198 29 15 156 196 135 229 222 114 161 107 208 208 107 161 114 222 229 135 196 156 15 29 198 10 233 99 120 40 115 89 218 246 173 255 236 116 151 85 174 162 49 91 32 128 123 17 66 14 117 119 20 76 31 141 150 58 121 83 200 216 131 201 170 38 61 239 60 36 167 197 126 210 193 75 112 48 139 129 18 62 5 103 100 252 47 253 102 106 9 67 24 136 147 57 122 86 205 223 140 212 183 53 78 2 81 59 192 224 155 241 226 110 149 87 180 172 63 109 54 154 153 51 104 56 163 169 74 134 93 207 220 140 199 165 30 50 225 43 16 144 171 97 178 158 37 71 4 92 79 221 6 202 41 35 184 232 179 25 26 182 237 191 44 52 215 21 238 98 113 27 96 64 187 209 130 206 181 55 84 12 95 77 214 250 185 19 8 152 195 137 234 230 125 175 124 228 231 133 190 146 1 11 176 240 203 65 82 254 65 39 164 188 111 189 166 42 73 3 88 72 211 249 186 22 13 159 204 148 247 245 142 194 145 251 0 160 219 177 34 46 213 23 244 108 127 45 118 90 217 243 168 248 227 105 138 70 157 143 28 68 7 101 94 242 33 235 80 80 235 33 242 94 101 7 68 28 143 157 70 138 105 227 248 168 243 217 90 118 45 127 108 244 23 213 46 34 177 219 160 0 251 145 194 142 245 247 148 204 159 13 22 186 249 211 72 88 3 73 42 166 189 111 188 164 39 69 254 82 65 203 240 176 11 1 146 190 133 231 228 124 175 125 230 234 137 195 152 8 19 185 250 214 77 95 12 84 55 181 206 130 209 187 64 96 27 113 98 238 21 215 52 44 191 237 182 26 25 179 232 184 35 41 202 6 221 79 92 4 71 37 158 178 97 171 144 16 43 225 50 30 165 199 132 220 207 93 134 74 169 163 56 104 51 153 154 54 109 63 172 180 87 149 110 226 241 155 224 192 59 81 2 78 53 183 212 140 223 205 86 122 57 147 136 24 67 9 106 102 253 47 252 100 103 5 62 18 129 139 48 112 75 193 210 126 197 167 36 60 239 61 38 170 201 131 216 200 83 121 58 182 141 31 76 20 119 117 14 66 17 123 128 36 91 49 162 174 85 151 116 236 255 173 246 218 89 115 40 120 99 233 10 198 29 15 156 196 135 229 222 114 161 107 208 208 107 161 114 222 229 135 196 156 15 29 198 10 233 99 120 40 115 89 218 246 173 255 236 116 151 85 174 162 49 91 32 128 123 17 66 14 117 119 20 76 31 141 150 58 121 83 200 208 131 201 170 38 61 239 60 100 167 197 126 210 193 75 112 48 139 129 18 62 5 103 100 252 47 253 102 106 9 67 24 136 147 57 122 86 205 223 140 212 183 53 78 2 81 59 192 224 155 241 226 110 149 87 180 172 63 109 54 154 153 51 104 56 163 169 74 134 93 207 220 132 199 165 30 50 225 43 16 144 171 97 178 158 37 71 4 92 79 221 6 202 41 35 184 232 179 25 26 182 237 191 44 52 215 21 238 98 113 27 96 64 187 209 130 206 181 55 84 12 95 77 214 250 185 19 8 152 195 137 234 230 125 175 124 228 231 133 190 146 1 11 176 240 203 65 82 254 69 39 164 188 111 189 166 42 73 3 88 72 211 249 186 22 13 159 204 148 247 245 142 194 145 251 0 160 219 177 34 46 213 23 244 108 127 45 118 90 217 243 168 248 227 105 138 70 157 143 28 68 7 101 94 242 33 235 80 80 235 33 242 94 101 7 68 28 143 157 70 138 105 227 248 168 243 217 90 118 45 127 108 244 23 213 46 34 177 219 160 0 251 145 194 134 245 247 148 204 159 13 22 186 249 211 72 88 3 73 42 166 189 111 188 164 39 69 254 82 65 203 240 176 11 1 146 190 133 231 228 124 175 125 230 234 137 195 152 8 19 185 250 214 77 95 12 84 55 181 206 130 209 187 64 96 27 113 98 238 21 215 52 44 190 237 182 26 25 179 232 184 35 41 202 6 221 79 92 4 71 37 158 178 97 171 144 16 43 225 50 30 165 199 132 220 207 93 134 74 169 163 56 104 51 153 154 54 109 63 172 180 87 149 110 226 241 155 224 192 59 81 2 78 53 183 212 140 223 205 86 122 57 147 136 24 67 9 106 102 253 47 252 100 103 5 62 18 129 139 48 112 75 193 210 126 197 167 36 60 239 61 38 170 201 131 216 200 83 121 58 150 141 31 76 20 119 117 14 66 17 123 128 32 91 49 162 174 85 151 116 236 255 173 246 218 89 115 40 120 99 233 10 198 29 15 156 196 135 229 222 114 161 107 208 208 107 161 114 222 229 135 196 156 15 29 198 10 233 99 120 40 115 89 218 246 173 255 236 116 151 85 174 162 49 91 32 128 123 17 66 14 117 119 20 76 31 141 150 58 121 83 200 216 131 201 170 38 61 239 60 36 167 197 126 210 193 75 112 48 139 129 18 62 5 103 100 252 47 253 102 106 9 67 24 136 147 57 122 86 205 223 140 212 183 53 78 2 81 59 192 224 155 241 226 110 149 87 180 172 63 109 54 154 153 51 104 56 163 169 74 134 93 207 220 132 199 165 30 50 225 43 16 144 171 97 178 158 37 71 4 92 79 221 6 202 41 35 184 232 179 25 26 182 237 191 44 52 215 21 238 98 113 27 96 64 187 209 130 206 181 55 92 12 95 77 214 250 185 19 8 152 195 137 234 230 125 175 124 228 231 133 190 146 1 11 176 240 203 65 82 254 69 39 164 188 111 189 166 42 73 3 88 72 211 249 186 22 13 159 204 148 247 245 142 194 145 251 0 160 219 177 34 46 213 23 244 108 127 45 118 90 217 243 168 248 227 105 138 70 157 143 28 68 7 101 94 242 33 235 80 64 235 33 242 94 101 7 68 28 143 157 70 138 105 227 248 168 243 217 90 118 45 127 108 244 23 213 46 34 177 219 160 0 251 145 194 142 245 247 148 204 159 13 22 186 249 211 72 88 3 73 42 166 189 111 188 164 39 69 254 82 65 203 240 176 11 1 146 190 133 231 228 124 175 125 230 234 137 195 152 8 19 185 250 214 77 95 12 84 55 181 206 130 209 187 64 96 27 113 98 238 21 215 52 44 191 237 182 26 25 179 232 184 35 41 202 6 221 79 92 4 71 37 158 178 97 171 144 16 47 225 50 30 165 199 132 220 207 93 134 74 169 163 56 104 51 153 154 54 109 63 172 180 87 149 110 226 241 155 224 192 59 81 2 78 53 183 212 140 223 205 86 122 57 147 136 24 67 9 106 102 253 47 252 100 103 5 62 18 129 139 48 112 75 193 210 126 197 167 36 60 239 61 38 170 201 131 216 200 83 121 58 150 141 31 76 20 119 117 14 66 17 123 128 32 91 49 162 174 85 151 116 236 255 173 246 218 89 115 40 120 99 233 10 198 29 15 156 196 135 229 222 114 161 107 208 208 107 161 114 222 229 135 196 156 15 29 198 10 233 99 120 40 115 89 218 246 173 255 236 116 151 85 174 162 49 91 32 128 107 17 66 14 117 119 20 76 31 141 150 58 121 83 200 216 131 201 170 38 61 239 60 36 167 197 126 210 193 75 112 48 139 129 18 62 5 103 100 188 47 253 102 106 9 67 24 136 147 57 122 86 205 223 140 212 183 53 78 2 81 59 192 224 155 241 226 110 149 87 180 172 63 109 54 154 153 51 104 56 163 169 74 134 93 207 220 132 199 165 30 50 225 43 16 144 171 97 178 158 37 71 4 92 79 221 6 202 41 35 184 232 179 25 26 182 237 191 44 52 215 21 238 98 113 27 96 64 187 209 130 206 181 55 84 12 95 77 214 250 185 19 8 152 195 137 234 230 125 175 124 228 231 133 190 146 1 11 176 240 203 65 82 254 69 39 164 188 111 189 166 42 73 3 88 72 211 249 186 22 13 159 204 148 247 245 142 194 145 251 0 160 219 177 34 46 213 23 244 108 127 45 118 90 217 243 168 248 227 105 138 70 157 143 28 68 7 101 94 242 33 235 80 80 235 33 242 94 101 7 68 47 223 174 22 138 105 227 248 168 243 217 90 118 45 127 108 244 23 213 46 34 177 219 160 0 251 145 194 "
			{
				var entry = makernote_structure.GetEntry (0, (ushort)Nikon3MakerNoteEntryTag.ShotInfo);
				Assert.IsNotNull (entry, "Entry 0x0091 missing in IFD 0");
				Assert.IsNotNull (entry as UndefinedIFDEntry, "Entry is not an undefined IFD entry!");
				var bytes = new byte[] { 48, 50, 49, 51, 174, 202, 190, 173, 121, 234, 24, 208, 182, 68, 22, 73, 229, 252, 76, 16, 71, 212, 214, 49, 249, 36, 176, 160, 55, 116, 37, 158, 177, 102, 84, 111, 239, 203, 30, 205, 229, 24, 56, 123, 33, 104, 162, 121, 176, 190, 220, 251, 151, 204, 102, 123, 240, 218, 194, 115, 81, 104, 107, 230, 29, 75, 101, 108, 63, 196, 174, 253, 177, 202, 72, 42, 115, 33, 50, 168, 133, 198, 108, 119, 231, 188, 246, 149, 153, 2, 208, 3, 155, 152, 250, 193, 226, 17, 103, 207, 143, 180, 62, 45, 129, 58, 88, 219, 195, 16, 194, 217, 85, 54, 124, 39, 55, 172, 134, 197, 105, 114, 224, 179, 235, 136, 138, 241, 253, 174, 154, 97, 222, 165, 207, 92, 79, 171, 118, 138, 18, 1, 83, 8, 46, 51, 152, 215, 134, 28, 28, 212, 57, 147, 15, 174, 58, 248, 27, 138, 141, 95, 148, 45, 46, 148, 94, 141, 33, 26, 120, 88, 156, 38, 248, 249, 245, 22, 156, 135, 215, 143, 166, 233, 8, 82, 1, 19, 139, 104, 170, 81, 93, 206, 164, 223, 127, 132, 238, 189, 241, 138, 136, 235, 179, 224, 114, 105, 9, 74, 172, 55, 39, 124, 54, 85, 217, 194, 16, 195, 219, 88, 58, 129, 45, 62, 180, 143, 207, 116, 94, 237, 193, 250, 152, 155, 35, 208, 34, 153, 154, 215, 188, 231, 119, 108, 230, 133, 137, 50, 32, 137, 43, 176, 202, 118, 253, 97, 196, 43, 31, 39, 14, 25, 145, 106, 168, 75, 83, 163, 146, 200, 101, 103, 204, 147, 11, 144, 68, 67, 153, 67, 48, 35, 123, 58, 90, 227, 204, 166, 212, 239, 111, 81, 156, 195, 97, 180, 184, 251, 111, 124, 221, 6, 201, 46, 220, 71, 23, 83, 230, 229, 77, 80, 64, 211, 201, 166, 234, 17, 157, 142, 228, 159, 191, 68, 46, 125, 49, 74, 200, 171, 243, 130, 178, 41, 5, 34, 237, 247, 102, 60, 118, 217, 27, 50, 80, 135, 27, 24, 122, 141, 161, 50, 56, 131, 195, 248, 114, 97, 205, 118, 20, 151, 143, 92, 142, 149, 25, 122, 48, 107, 123, 224, 202, 137, 37, 62, 172, 255, 167, 196, 198, 189, 241, 162, 200, 51, 147, 232, 130, 17, 29, 230, 36, 199, 95, 76, 30, 69, 105, 234, 192, 155, 203, 208, 90, 185, 117, 174, 117, 224, 185, 253, 153, 163, 8, 221, 22, 175, 175, 20, 222, 13, 164, 114, 248, 187, 231, 50, 98, 185, 117, 183, 28, 7, 82, 228, 38, 165, 141, 144, 128, 147, 11, 194, 42, 209, 216, 166, 36, 95, 251, 70, 110, 61, 113, 30, 26, 157, 211, 190, 224, 31, 165, 216, 62, 65, 71, 34, 164, 35, 185, 157, 130, 181, 187, 7, 168, 247, 77, 97, 38, 249, 175, 42, 236, 155, 161, 164, 10, 237, 99, 142, 130, 31, 21, 118, 46, 145, 23, 51, 84, 243, 201, 109, 178, 5, 75, 23, 88, 199, 157, 241, 187, 64, 99, 28, 113, 98, 237, 18, 215, 52, 47, 184, 237, 182, 25, 30, 76, 23, 71, 195, 214, 53, 249, 61, 176, 163, 251, 167, 218, 97, 77, 129, 84, 111, 235, 150, 30, 205, 229, 24, 56, 123, 39, 114, 162, 121, 177, 20, 93, 116, 150, 127, 103, 214, 200, 33, 193, 82, 74, 169, 107, 149, 28, 10, 101, 27, 62, 192, 175, 252, 176, 203, 73, 42, 114, 33, 48, 25, 135, 118, 110, 199, 229, 12, 246, 149, 153, 2, 208, 3, 155, 152, 250, 193, 237, 126, 116, 207, 143, 180, 62, 45, 129, 58, 88, 219, 195, 16, 194, 217, 85, 54, 124, 39, 55, 172, 134, 197, 105, 114, 224, 179, 235, 136, 138, 241, 189, 238, 132, 127, 223, 164, 206, 93, 81, 170, 104, 139, 19, 0, 82, 9, 37, 166, 140, 215, 135, 156, 22, 245, 57, 226, 240, 99, 59, 120, 26, 33, 141, 94, 148, 47, 47, 148, 94, 141, 33, 26, 120, 59, 67, 240, 219, 113, 23, 8, 170, 141, 215, 196, 166, 40, 75, 89, 0, 35, 139, 104, 168, 25, 100, 208, 182, 41, 159, 101, 238, 188, 243, 139, 174, 210, 179, 224, 114, 105, 219, 128, 172, 55, 39, 124, 54, 70, 8, 194, 16, 195, 183, 28, 60, 185, 45, 62, 180, 143, 79, 68, 186, 238, 173, 90, 93, 153, 92, 205, 28, 152, 106, 9, 195, 217, 136, 108, 198, 196, 66, 205, 223, 188, 0, 98, 224, 155, 253, 109, 44, 252, 151, 167, 14, 36, 110, 149, 8, 180, 172, 182, 109, 54, 226, 153, 51, 70, 65, 111, 169, 202, 134, 221, 207, 92, 58, 105, 100, 11, 243, 219, 234, 146, 110, 85, 97, 178, 158, 37, 186, 133, 92, 79, 221, 240, 53, 255, 92, 5, 22, 76, 25, 26, 105, 232, 2, 216, 203, 44, 234, 17, 157, 142, 228, 143, 191, 65, 102, 111, 7, 138, 72, 168, 243, 160, 178, 41, 5, 82, 255, 127, 87, 188, 2, 5, 13, 132, 83, 135, 119, 92, 229, 25, 41, 186, 224, 91, 174, 32, 184, 238, 42, 254, 220, 91, 67, 145, 70, 89, 213, 183, 252, 231, 183, 44, 23, 197, 233, 246, 96, 115, 43, 8, 10, 117, 61, 94, 12, 255, 87, 36, 78, 205, 83, 58, 204, 10, 147, 185, 66, 137, 165, 38, 12, 126, 14, 21, 198, 116, 185, 99, 112, 243, 187, 248, 154, 161, 13, 220, 20, 175, 172, 20, 222, 13, 161, 154, 248, 187, 227, 112, 98, 185, 117, 150, 28, 7, 86, 12, 39, 165, 143, 95, 132, 255, 79, 232, 40, 142, 108, 225, 149, 239, 71, 179, 216, 142, 203, 176, 189, 216, 130, 213, 71, 82, 254, 189, 144, 11, 169, 145, 212, 182, 61, 49, 102, 101, 83, 216, 186, 1, 28, 158, 194, 110, 254, 224, 74, 47, 64, 120, 24, 27, 131, 80, 130, 25, 21, 118, 60, 103, 247, 236, 70, 5, 41, 178, 160, 243, 171, 200, 74, 49, 125, 46, 68, 191, 159, 228, 142, 164, 31, 234, 40, 203, 211, 64, 18, 73, 229, 230, 76, 23, 71, 220, 214, 53, 249, 34, 176, 163, 251, 184, 218, 97, 77, 158, 84, 111, 254, 146, 30, 205, 227, 168, 58, 101, 33, 147, 162, 72, 74, 179, 163, 2, 104, 30, 102, 97, 201, 156, 63, 165, 75, 168, 106, 148, 226, 223, 100, 31, 58, 2, 136, 69, 186, 121, 67, 29, 120, 171, 57, 105, 142, 77, 103, 239, 236, 61, 253, 22, 146, 98, 219, 80, 144, 225, 241, 255, 231, 111, 126, 224, 133, 231, 52, 39, 139, 11, 82, 78, 201, 9, 203, 37, 92, 181, 117, 169, 62, 118, 140, 238, 150, 57, 31, 244, 20, 183, 117, 200, 66, 220, 123, 79, 32, 245, 49, 24, 174, 232, 151, 185, 236, 67, 173, 63, 218, 250, 115, 131, 120, 163, 233, 189, 198, 174, 15, 92, 196, 43, 229, 30, 114, 27, 107, 103, 208, 208, 161, 197, 222, 252, 120, 48, 156, 26, 29, 197, 245, 27, 156, 129, 40, 102, 89, 208, 246, 174, 0, 17, 139, 104, 170, 91, 162, 61, 91, 9, 127, 132, 238, 191, 14, 112, 119, 25, 76, 15, 141, 153, 197, 137, 83, 206, 216, 142, 201, 164, 181, 194, 16, 195, 219, 88, 58, 129, 45, 62, 180, 143, 207, 116, 126, 237, 195, 8, 154, 128, 1, 114, 2, 168, 106, 19, 67, 35, 136, 190, 198, 129, 169, 61, 223, 133, 43, 72, 202, 180, 2, 127, 196, 63, 26, 44, 40, 165, 154, 223, 163, 101, 88, 78, 153, 118, 110, 224, 199, 24, 204, 35, 93, 52, 114, 195, 59, 121, 112, 69, 81, 160, 199, 11, 222, 208, 101, 1, 148, 64, 107, 237, 178, 108, 169, 168, 43, 7, 60, 83, 213, 214, 30, 150, 236, 207, 182, 94, 191, 155, 52, 107, 21, 40, 98, 190, 27, 177, 64, 21, 209, 53, 206, 9, 55, 156, 12, 225, 77, 31, 250, 27, 19, 174, 152, 124, 137, 83, 230, 193, 175, 195, 228, 72, 133, 8, 146, 185, 11, 4, 240, 115, 65, 232, 254, 89, 216, 80, 188, 126, 189, 165, 213, 166, 252, 173, 72, 194, 249, 189, 22, 14, 96, 48, 107, 9, 10, 124, 194, 156, 251, 38, 95, 36, 177, 33, 46, 223, 23, 242, 108, 113, 45, 125, 165, 36, 243, 161, 248, 228, 105, 140, 213, 98, 112, 227, 187, 248, 154, 161, 13, 222, 20, 175, 175, 20, 222, 13, 163, 98, 250, 233, 225, 192, 98, 139, 138, 119, 227, 193, 168, 221, 38, 161, 137, 220, 127, 122, 244, 23, 42, 212, 34, 158, 219, 161, 250, 194, 72, 133, 122, 185, 3, 93, 56, 235, 249, 41, 78, 141, 39, 47, 172, 125, 189, 86, 82, 34, 155, 16, 80, 161, 177, 63, 167, 175, 62, 32, 69, 167, 244, 103, 75, 75, 18, 142, 137, 73, 139, 229, 28, 245, 53, 233, 254, 54, 76, 46, 214, 249, 95, 180, 84, 247, 181, 8, 130, 28, 187, 143, 96, 181, 113, 216, 238, 168, 215, 249, 44, 3, 237, 127, 26, 186, 179, 67, 184, 227, 41, 125, 6, 110, 79, 156, 4, 235, 37, 94, 178, 219, 171, 39, 16, 144, 225, 133, 30, 188, 56, 112, 220, 218, 93, 133, 181, 91, 92, 193, 104, 38, 153, 144, 54, 110, 192, 81, 75, 168, 106, 155, 226, 253, 155, 201, 63, 196, 174, 255, 78, 48, 183, 217, 140, 207, 205, 89, 133, 201, 147, 142, 24, 78, 9, 100, 245, 2, 208, 3, 155, 152, 250, 193, 237, 126, 116, 207, 143, 180, 62, 45, 129, 58, 88, 219, 195, 16, 226, 11, 85, 54, 92, 140, 55, 172, 167, 95, 105, 114, 224, 178, 224, 131, 117, 14, 189, 238, 131, 127, 223, 164, 192, 126, 81, 170, 104, 139, 19, 0, 82, 9, 37, 166, 140, 215, 135, 231, 113, 151, 57, 133, 91, 186, 59, 120, 26, 33, 141, 94, 148, 47, 47, 148, 94, 141, 42, 22, 120, 59, 99, 240, 226, 57, 245, 22, 156, 137, 214, 142, 171, 38, 13, 92, 5, 18, 137, 101, 169, 85, 83, 203, 164, 223, 127, 132, 238, 189, 241, 138, 136, 235, 179, 224, 114, 105, 197, 134, 172, 55, 39, 124, 54, 85, 217, 194, 16, 195, 219, 88, 58, 129, 45, 62, 180, 143, 207, 116, 126, 237, 193, 250, 152, 155, 3, 208, 2, 153, 149, 246, 188, 231, 119, 108, 223, 239, 169, 50, 57, 30, 43, 72, 211, 203, 253, 174, 221, 68, 31, 100, 23, 154, 145, 106, 177, 236, 83, 192, 139, 110, 101, 102, 236, 3, 199, 92, 118, 34, 121, 162, 16, 134, 123, 56, 122, 71, 205, 30, 244, 94, 111, 84, 190, 156, 97, 218, 152, 42, 163, 176, 34, 249, 53, 214, 220, 71, 23, 76, 230, 229, 73, 18, 64, 211, 203, 40, 234, 17, 157, 142, 228, 159, 191, 68, 46, 125, 49, 74, 200, 171, 243, 160, 178, 41, 5, 70, 236, 247, 103, 60, 118, 21, 25, 130, 80, 131, 27, 24, 122, 65, 109, 254, 244, 79, 15, 52, 190, 173, 1, 186, 216, 91, 67, 144, 66, 89, 213, 182, 252, 167, 183, 44, 6, 69, 233, 242, 96, 51, 107, 8, 10, 113, 61, 110, 4, 255, 95, 36, 78, 221, 209, 42, 232, 11, 147, 128, 210, 137, 165, 38, 12, 87, 7, 28, 150, 117, 185, 98, 112, 227, 187, 248, 154, 161, 13, 222, 20, 175, 175, 20, 222, 13, 161, 154, 248, 187, 227, 112, 98, 185, 117, 150, 28, 7, 87, 12, 38, 165, 137, 210, 128, 147, 11, 232, 42, 209, 221, 78, 36, 95, 255, 4, 110, 61, 113, 10, 8, 107, 51, 96, 242, 233, 69, 6, 44, 183, 167, 252, 182, 213, 89, 66, 144, 67, 91, 216, 186, 1, 173, 190, 52, 15, 79, 244, 254, 109, 65, 122, 24, 27, 131, 80, 130, 25, 21, 118, 60, 103, 247, 237, 252, 32, 41, 52, 238, 157, 171, 200, 93, 224, 125, 46, 120, 189, 159, 244, 144, 57, 17, 234, 42, 2, 211, 64, 18, 123, 229, 230, 9, 238, 71, 77, 140, 3, 249, 34, 169, 23, 251, 184, 223, 89, 77, 150, 181, 109, 239, 212, 31, 93, 225, 90, 56, 73, 35, 48, 162, 250, 181, 86, 92, 223, 91, 99, 170, 202, 54, 109, 63, 172, 180, 87, 149, 110, 226, 241, 155, 224, 192, 187, 81, 2, 78, 53, 183, 212, 140, 223, 205, 86, 122, 57, 147, 136, 24, 67, 9, 106, 102, 253, 47, 252, 100, 103, 5, 62, 18, 129, 139, 48, 112, 75, 62, 45, 126, 197, 167, 36, 60, 239, 61, 38, 170, 201, 131, 216, 200, 83, 121, 58, 150, 141, 31, 76, 20, 119, 117, 14, 64, 17, 123, 128, 32, 91, 49, 162, 174, 85, 151, 116, 236, 255, 173, 246, 218, 89, 115, 40, 120, 99, 233, 10, 198, 29, 15, 156, 196, 135, 229, 222, 114, 161, 107, 208, 208, 107, 161, 114, 222, 229, 135, 196, 156, 15, 29, 198, 10, 233, 99, 120, 40, 115, 89, 218, 246, 173, 255, 236, 116, 151, 85, 238, 162, 49, 91, 32, 128, 123, 17, 66, 14, 117, 119, 20, 76, 31, 141, 150, 58, 121, 83, 200, 216, 131, 201, 170, 38, 61, 239, 60, 36, 167, 197, 126, 210, 193, 75, 112, 48, 139, 129, 18, 62, 5, 103, 100, 252, 47, 253, 102, 106, 9, 67, 24, 136, 147, 57, 122, 86, 205, 223, 140, 212, 183, 53, 78, 2, 81, 59, 192, 224, 155, 241, 226, 110, 149, 87, 180, 172, 63, 109, 54, 154, 153, 51, 104, 56, 163, 169, 74, 134, 93, 207, 220, 132, 199, 165, 30, 50, 225, 43, 16, 144, 171, 97, 178, 158, 37, 71, 4, 92, 79, 221, 6, 202, 41, 35, 184, 232, 179, 25, 26, 182, 237, 191, 44, 52, 215, 21, 238, 98, 113, 27, 96, 64, 187, 209, 130, 206, 181, 55, 84, 12, 95, 77, 214, 250, 185, 19, 8, 152, 195, 137, 234, 230, 125, 175, 124, 228, 231, 133, 190, 146, 1, 11, 176, 240, 203, 65, 82, 254, 69, 39, 164, 188, 111, 189, 166, 42, 73, 3, 88, 72, 211, 249, 186, 150, 13, 159, 204, 148, 247, 245, 142, 194, 145, 251, 0, 160, 219, 177, 34, 46, 213, 23, 244, 104, 127, 45, 118, 90, 217, 243, 168, 248, 227, 105, 138, 70, 157, 143, 28, 68, 7, 101, 94, 242, 33, 235, 80, 80, 235, 33, 242, 94, 101, 7, 68, 28, 143, 157, 70, 138, 105, 227, 248, 168, 243, 217, 90, 118, 45, 127, 108, 244, 23, 213, 46, 34, 177, 219, 160, 0, 251, 145, 194, 142, 245, 247, 148, 204, 159, 13, 22, 186, 249, 211, 72, 88, 3, 73, 42, 166, 189, 111, 188, 164, 39, 69, 254, 82, 65, 203, 240, 176, 11, 1, 146, 190, 133, 231, 228, 124, 175, 125, 230, 234, 137, 195, 152, 8, 19, 185, 250, 214, 77, 95, 12, 84, 55, 181, 206, 130, 209, 187, 64, 96, 27, 113, 98, 238, 21, 215, 52, 40, 191, 237, 182, 26, 25, 179, 232, 184, 35, 41, 202, 6, 221, 79, 92, 4, 71, 37, 158, 178, 97, 171, 144, 16, 43, 225, 50, 30, 165, 199, 132, 220, 207, 93, 134, 74, 169, 163, 56, 104, 51, 153, 154, 54, 109, 63, 172, 180, 87, 149, 110, 226, 241, 155, 224, 192, 59, 81, 2, 70, 53, 183, 212, 140, 223, 205, 86, 122, 41, 147, 136, 24, 67, 9, 106, 102, 253, 47, 252, 100, 103, 5, 62, 18, 129, 139, 48, 112, 75, 193, 210, 126, 197, 167, 36, 60, 239, 61, 38, 170, 201, 131, 216, 200, 83, 121, 58, 150, 141, 31, 76, 20, 119, 117, 14, 66, 17, 123, 128, 32, 91, 49, 162, 174, 85, 151, 116, 236, 255, 173, 246, 218, 89, 115, 40, 120, 99, 233, 10, 198, 29, 15, 156, 196, 135, 229, 222, 114, 161, 107, 208, 208, 107, 161, 114, 222, 229, 135, 196, 156, 15, 29, 198, 10, 233, 99, 120, 40, 115, 89, 218, 246, 173, 255, 236, 116, 151, 85, 174, 162, 49, 91, 32, 128, 123, 17, 66, 14, 117, 119, 20, 76, 31, 141, 150, 58, 121, 83, 200, 216, 131, 201, 170, 38, 61, 239, 60, 36, 167, 197, 126, 210, 193, 75, 112, 48, 139, 129, 18, 62, 5, 103, 100, 252, 47, 253, 102, 106, 9, 67, 24, 136, 147, 57, 122, 86, 205, 223, 140, 212, 183, 53, 78, 2, 81, 59, 192, 224, 155, 241, 226, 110, 148, 87, 180, 172, 63, 109, 54, 154, 153, 51, 104, 56, 163, 169, 74, 134, 93, 207, 220, 132, 199, 165, 30, 50, 225, 43, 16, 144, 171, 97, 178, 158, 37, 71, 4, 92, 79, 221, 6, 202, 41, 35, 184, 232, 179, 25, 26, 182, 237, 191, 44, 52, 215, 21, 238, 98, 113, 27, 96, 64, 187, 209, 130, 206, 181, 55, 84, 12, 95, 77, 214, 250, 185, 19, 8, 152, 195, 137, 234, 230, 125, 175, 124, 228, 231, 133, 190, 146, 1, 11, 176, 240, 203, 65, 82, 254, 69, 39, 164, 188, 111, 189, 166, 42, 73, 3, 88, 72, 211, 249, 186, 22, 13, 159, 204, 148, 247, 245, 142, 194, 145, 251, 0, 160, 219, 177, 34, 46, 213, 23, 244, 108, 127, 45, 118, 90, 217, 243, 232, 248, 227, 105, 138, 70, 157, 143, 28, 68, 7, 101, 94, 242, 33, 235, 80, 80, 235, 33, 242, 94, 101, 7, 68, 28, 143, 157, 70, 138, 105, 227, 248, 168, 243, 217, 90, 118, 45, 127, 108, 244, 23, 213, 46, 34, 177, 219, 160, 0, 251, 145, 194, 142, 245, 247, 148, 204, 159, 13, 22, 186, 249, 211, 72, 88, 3, 73, 42, 166, 189, 111, 188, 164, 39, 69, 254, 82, 65, 203, 240, 176, 11, 1, 146, 190, 133, 231, 228, 124, 175, 125, 230, 234, 137, 195, 152, 8, 19, 185, 250, 214, 77, 95, 12, 84, 55, 181, 206, 130, 209, 187, 64, 96, 27, 113, 98, 238, 21, 215, 52, 44, 191, 237, 182, 26, 25, 179, 232, 184, 35, 41, 202, 6, 221, 79, 92, 4, 71, 37, 158, 178, 97, 171, 144, 16, 43, 225, 50, 30, 165, 199, 132, 220, 207, 93, 134, 74, 169, 163, 56, 104, 51, 153, 154, 54, 109, 63, 172, 180, 87, 149, 110, 226, 241, 155, 224, 192, 59, 81, 2, 78, 53, 183, 212, 140, 223, 205, 86, 122, 57, 147, 136, 24, 67, 9, 106, 102, 253, 47, 252, 100, 103, 5, 62, 18, 129, 139, 48, 112, 75, 193, 210, 126, 197, 167, 36, 60, 239, 61, 38, 170, 201, 131, 216, 200, 83, 121, 58, 150, 141, 31, 76, 20, 119, 117, 14, 66, 17, 123, 128, 32, 91, 49, 162, 174, 85, 151, 116, 236, 255, 173, 246, 218, 89, 115, 40, 120, 99, 233, 10, 198, 29, 15, 156, 196, 135, 229, 222, 114, 161, 107, 208, 208, 107, 161, 114, 222, 229, 135, 196, 156, 15, 29, 198, 10, 233, 99, 120, 40, 115, 89, 218, 246, 173, 255, 236, 116, 151, 85, 174, 162, 49, 91, 32, 128, 123, 17, 66, 14, 117, 119, 20, 76, 31, 141, 150, 58, 121, 83, 200, 216, 131, 201, 170, 38, 61, 239, 60, 36, 166, 197, 126, 210, 193, 75, 112, 48, 139, 129, 18, 62, 5, 103, 100, 252, 47, 253, 102, 106, 9, 67, 24, 136, 147, 57, 122, 86, 205, 223, 140, 212, 183, 53, 78, 2, 81, 59, 192, 224, 155, 241, 226, 110, 149, 87, 180, 172, 63, 109, 54, 154, 153, 51, 104, 56, 163, 169, 74, 134, 93, 207, 220, 132, 199, 165, 30, 50, 225, 43, 16, 144, 171, 97, 178, 158, 37, 71, 4, 92, 79, 221, 6, 202, 41, 35, 184, 232, 179, 25, 26, 182, 237, 191, 44, 52, 215, 21, 238, 98, 113, 27, 96, 64, 187, 209, 130, 206, 181, 55, 84, 12, 95, 77, 214, 250, 185, 19, 8, 152, 195, 137, 234, 230, 125, 175, 124, 228, 231, 133, 190, 146, 1, 11, 176, 240, 203, 65, 82, 254, 69, 39, 164, 188, 111, 189, 166, 42, 73, 3, 88, 72, 211, 249, 186, 22, 13, 159, 204, 148, 247, 245, 142, 194, 145, 251, 0, 160, 219, 177, 34, 46, 213, 23, 244, 108, 127, 45, 118, 90, 217, 243, 168, 248, 227, 105, 138, 70, 157, 143, 28, 68, 7, 101, 94, 242, 33, 235, 80, 80, 235, 33, 242, 94, 101, 7, 68, 28, 143, 157, 70, 138, 105, 227, 248, 168, 243, 217, 90, 118, 45, 127, 108, 244, 23, 213, 46, 34, 177, 223, 160, 0, 251, 145, 194, 142, 245, 247, 148, 204, 159, 13, 22, 186, 249, 211, 72, 88, 3, 73, 42, 166, 189, 111, 188, 164, 39, 69, 254, 82, 65, 203, 240, 176, 11, 1, 146, 190, 133, 231, 228, 124, 175, 125, 230, 234, 137, 195, 152, 8, 19, 185, 250, 214, 77, 95, 12, 84, 55, 181, 206, 130, 209, 187, 64, 96, 27, 113, 98, 238, 21, 215, 52, 44, 191, 237, 182, 26, 25, 179, 232, 184, 35, 41, 202, 6, 221, 79, 92, 4, 71, 37, 158, 178, 97, 171, 144, 16, 43, 225, 50, 30, 165, 199, 132, 220, 207, 93, 134, 74, 169, 163, 56, 104, 51, 153, 154, 54, 109, 63, 172, 180, 87, 149, 110, 226, 241, 155, 224, 192, 59, 81, 2, 78, 53, 183, 212, 140, 223, 205, 86, 122, 57, 147, 136, 24, 67, 9, 106, 102, 253, 47, 252, 100, 103, 5, 62, 18, 129, 139, 48, 112, 75, 193, 210, 126, 197, 167, 36, 60, 239, 61, 38, 170, 201, 131, 216, 200, 83, 121, 58, 150, 141, 31, 76, 20, 119, 117, 14, 66, 17, 123, 128, 32, 91, 49, 162, 174, 85, 151, 116, 236, 255, 173, 246, 218, 89, 115, 40, 120, 99, 233, 10, 198, 29, 15, 156, 196, 135, 229, 222, 114, 161, 107, 208, 208, 107, 161, 114, 222, 229, 135, 196, 156, 15, 29, 198, 10, 233, 99, 120, 40, 115, 89, 218, 246, 173, 255, 236, 116, 151, 85, 174, 162, 49, 91, 32, 128, 123, 17, 66, 14, 117, 119, 20, 76, 31, 141, 150, 58, 121, 83, 200, 216, 131, 201, 170, 38, 61, 239, 60, 36, 167, 197, 126, 210, 193, 75, 112, 48, 139, 129, 18, 62, 5, 103, 100, 252, 47, 253, 102, 106, 9, 67, 24, 136, 147, 57, 122, 86, 205, 223, 140, 212, 183, 53, 78, 2, 81, 59, 192, 224, 155, 241, 226, 110, 149, 87, 180, 172, 63, 109, 54, 154, 153, 51, 104, 56, 163, 169, 74, 134, 93, 207, 220, 132, 197, 165, 30, 50, 225, 43, 16, 144, 171, 97, 178, 158, 37, 71, 4, 92, 79, 221, 6, 202, 41, 35, 184, 232, 179, 25, 26, 150, 237, 191, 44, 52, 215, 21, 238, 98, 113, 27, 96, 64, 187, 209, 130, 206, 181, 55, 84, 12, 95, 77, 214, 250, 185, 19, 8, 152, 195, 137, 234, 230, 125, 175, 124, 228, 231, 133, 190, 146, 1, 11, 176, 240, 203, 65, 82, 254, 69, 39, 164, 188, 111, 189, 166, 42, 73, 3, 88, 72, 211, 249, 186, 22, 13, 159, 204, 148, 247, 245, 142, 194, 145, 251, 0, 160, 219, 177, 34, 46, 213, 23, 244, 108, 127, 45, 118, 90, 217, 243, 168, 248, 227, 105, 138, 70, 157, 143, 28, 68, 7, 101, 94, 242, 33, 235, 80, 80, 235, 33, 242, 94, 101, 71, 68, 28, 143, 157, 70, 138, 105, 227, 248, 168, 243, 217, 90, 118, 45, 127, 108, 244, 23, 213, 46, 34, 177, 219, 160, 0, 251, 145, 194, 142, 245, 247, 148, 204, 159, 13, 22, 186, 249, 211, 72, 88, 3, 73, 42, 166, 189, 111, 188, 164, 39, 69, 254, 82, 65, 203, 240, 176, 11, 1, 146, 190, 133, 231, 228, 124, 175, 125, 230, 234, 137, 195, 152, 8, 19, 185, 250, 214, 77, 95, 12, 84, 55, 181, 206, 130, 209, 187, 64, 96, 27, 113, 98, 238, 21, 215, 52, 44, 191, 237, 182, 26, 25, 179, 232, 184, 35, 41, 202, 6, 221, 79, 92, 4, 71, 37, 158, 178, 97, 171, 144, 16, 43, 225, 50, 30, 165, 199, 132, 220, 207, 93, 134, 74, 169, 163, 56, 104, 51, 153, 154, 54, 109, 63, 172, 180, 87, 149, 110, 226, 241, 155, 224, 192, 59, 81, 2, 78, 53, 183, 212, 140, 223, 205, 86, 122, 57, 147, 136, 24, 67, 9, 106, 102, 253, 47, 252, 100, 103, 5, 62, 18, 129, 139, 48, 112, 75, 193, 210, 126, 197, 167, 36, 60, 239, 61, 38, 170, 201, 131, 216, 200, 83, 121, 58, 150, 141, 31, 76, 20, 119, 117, 14, 66, 17, 123, 128, 32, 91, 49, 162, 174, 85, 151, 116, 236, 255, 173, 246, 218, 89, 115, 40, 120, 99, 233, 10, 198, 29, 15, 156, 196, 135, 229, 222, 114, 161, 107, 208, 208, 107, 161, 114, 222, 229, 135, 196, 156, 15, 29, 198, 10, 233, 99, 120, 40, 115, 89, 218, 246, 173, 255, 236, 116, 151, 85, 174, 162, 49, 91, 32, 128, 123, 17, 66, 14, 117, 119, 20, 76, 31, 141, 150, 58, 121, 83, 200, 216, 131, 201, 170, 38, 61, 239, 60, 36, 167, 197, 126, 210, 193, 75, 112, 48, 139, 129, 18, 62, 5, 103, 100, 252, 47, 253, 102, 106, 9, 67, 24, 136, 147, 57, 122, 86, 205, 223, 140, 212, 183, 53, 78, 2, 81, 59, 192, 224, 155, 241, 226, 110, 149, 87, 180, 172, 63, 109, 54, 154, 153, 51, 104, 56, 163, 169, 74, 134, 93, 207, 220, 132, 199, 165, 30, 50, 225, 43, 17, 144, 171, 97, 178, 158, 37, 71, 4, 92, 79, 221, 6, 202, 41, 35, 184, 232, 179, 25, 26, 182, 237, 191, 44, 52, 215, 21, 238, 98, 113, 27, 96, 64, 187, 209, 130, 206, 181, 55, 84, 12, 95, 77, 214, 250, 185, 19, 8, 152, 195, 137, 234, 230, 125, 175, 124, 228, 231, 133, 190, 146, 1, 11, 176, 240, 203, 65, 82, 254, 69, 39, 164, 188, 111, 189, 166, 42, 73, 3, 88, 72, 211, 249, 186, 22, 13, 159, 204, 148, 247, 245, 142, 194, 153, 251, 0, 160, 219, 177, 34, 46, 213, 23, 244, 108, 127, 45, 118, 90, 217, 243, 168, 248, 227, 105, 138, 70, 157, 143, 28, 68, 7, 101, 94, 242, 33, 235, 80, 80, 235, 33, 242, 94, 101, 7, 68, 28, 143, 157, 70, 138, 105, 227, 248, 168, 243, 217, 90, 118, 45, 127, 108, 244, 23, 213, 46, 34, 177, 219, 160, 0, 251, 145, 194, 142, 245, 247, 148, 204, 159, 13, 22, 186, 249, 211, 72, 88, 3, 73, 42, 166, 189, 111, 188, 164, 39, 69, 254, 82, 65, 203, 240, 176, 11, 1, 146, 190, 133, 231, 228, 124, 175, 125, 230, 234, 137, 195, 152, 8, 19, 185, 250, 214, 77, 95, 12, 84, 55, 181, 206, 130, 209, 187, 64, 96, 27, 113, 98, 238, 21, 215, 52, 44, 191, 237, 182, 26, 25, 179, 232, 184, 35, 41, 202, 6, 221, 79, 92, 4, 71, 37, 158, 178, 97, 171, 144, 16, 43, 225, 50, 30, 165, 199, 132, 220, 207, 93, 134, 74, 169, 163, 56, 104, 51, 153, 154, 54, 109, 63, 172, 180, 87, 149, 110, 226, 241, 155, 224, 192, 59, 81, 2, 78, 53, 183, 212, 140, 223, 197, 86, 122, 57, 147, 136, 24, 67, 9, 106, 102, 253, 47, 252, 100, 103, 5, 62, 18, 129, 139, 48, 112, 75, 193, 210, 126, 197, 167, 36, 60, 239, 61, 38, 170, 201, 131, 216, 200, 83, 121, 58, 150, 141, 31, 76, 28, 119, 117, 14, 66, 17, 123, 128, 32, 91, 49, 162, 174, 85, 151, 116, 236, 255, 173, 246, 218, 89, 115, 40, 120, 99, 233, 10, 198, 29, 15, 156, 196, 135, 229, 222, 114, 161, 107, 208, 208, 107, 161, 114, 222, 229, 135, 196, 156, 15, 29, 198, 10, 233, 99, 120, 40, 115, 89, 218, 246, 173, 255, 236, 116, 151, 85, 174, 162, 49, 91, 32, 128, 123, 17, 66, 14, 117, 119, 20, 76, 31, 141, 150, 58, 121, 83, 200, 216, 131, 201, 170, 38, 61, 239, 60, 36, 167, 197, 126, 210, 193, 75, 112, 48, 139, 129, 18, 62, 5, 103, 100, 252, 47, 253, 102, 106, 9, 67, 24, 136, 147, 57, 122, 86, 205, 223, 140, 212, 183, 53, 78, 2, 81, 59, 192, 224, 155, 241, 226, 110, 149, 87, 180, 172, 63, 109, 54, 154, 153, 51, 104, 56, 163, 169, 74, 134, 93, 207, 220, 140, 199, 165, 30, 50, 225, 43, 16, 144, 171, 97, 178, 158, 37, 71, 4, 92, 79, 221, 6, 202, 41, 35, 184, 232, 179, 25, 26, 182, 237, 191, 44, 52, 215, 21, 238, 98, 113, 27, 96, 64, 187, 209, 130, 206, 181, 55, 84, 12, 95, 77, 214, 250, 185, 19, 8, 152, 195, 137, 234, 230, 125, 175, 124, 228, 231, 133, 190, 146, 1, 11, 176, 240, 203, 65, 82, 254, 65, 39, 164, 188, 111, 189, 166, 42, 73, 3, 88, 72, 211, 249, 186, 22, 13, 159, 204, 148, 247, 245, 142, 194, 145, 251, 0, 160, 219, 177, 34, 46, 213, 23, 244, 108, 127, 45, 118, 90, 217, 243, 168, 248, 227, 105, 138, 70, 157, 143, 28, 68, 7, 101, 94, 242, 33, 235, 80, 80, 235, 33, 242, 94, 101, 7, 68, 28, 143, 157, 70, 138, 105, 227, 248, 168, 243, 217, 90, 118, 45, 127, 108, 244, 23, 213, 46, 34, 177, 219, 160, 0, 251, 145, 194, 142, 245, 247, 148, 204, 159, 13, 22, 186, 249, 211, 72, 88, 3, 73, 42, 166, 189, 111, 188, 164, 39, 69, 254, 82, 65, 203, 240, 176, 11, 1, 146, 190, 133, 231, 228, 124, 175, 125, 230, 234, 137, 195, 152, 8, 19, 185, 250, 214, 77, 95, 12, 84, 55, 181, 206, 130, 209, 187, 64, 96, 27, 113, 98, 238, 21, 215, 52, 44, 191, 237, 182, 26, 25, 179, 232, 184, 35, 41, 202, 6, 221, 79, 92, 4, 71, 37, 158, 178, 97, 171, 144, 16, 43, 225, 50, 30, 165, 199, 132, 220, 207, 93, 134, 74, 169, 163, 56, 104, 51, 153, 154, 54, 109, 63, 172, 180, 87, 149, 110, 226, 241, 155, 224, 192, 59, 81, 2, 78, 53, 183, 212, 140, 223, 205, 86, 122, 57, 147, 136, 24, 67, 9, 106, 102, 253, 47, 252, 100, 103, 5, 62, 18, 129, 139, 48, 112, 75, 193, 210, 126, 197, 167, 36, 60, 239, 61, 38, 170, 201, 131, 216, 200, 83, 121, 58, 182, 141, 31, 76, 20, 119, 117, 14, 66, 17, 123, 128, 36, 91, 49, 162, 174, 85, 151, 116, 236, 255, 173, 246, 218, 89, 115, 40, 120, 99, 233, 10, 198, 29, 15, 156, 196, 135, 229, 222, 114, 161, 107, 208, 208, 107, 161, 114, 222, 229, 135, 196, 156, 15, 29, 198, 10, 233, 99, 120, 40, 115, 89, 218, 246, 173, 255, 236, 116, 151, 85, 174, 162, 49, 91, 32, 128, 123, 17, 66, 14, 117, 119, 20, 76, 31, 141, 150, 58, 121, 83, 200, 208, 131, 201, 170, 38, 61, 239, 60, 100, 167, 197, 126, 210, 193, 75, 112, 48, 139, 129, 18, 62, 5, 103, 100, 252, 47, 253, 102, 106, 9, 67, 24, 136, 147, 57, 122, 86, 205, 223, 140, 212, 183, 53, 78, 2, 81, 59, 192, 224, 155, 241, 226, 110, 149, 87, 180, 172, 63, 109, 54, 154, 153, 51, 104, 56, 163, 169, 74, 134, 93, 207, 220, 132, 199, 165, 30, 50, 225, 43, 16, 144, 171, 97, 178, 158, 37, 71, 4, 92, 79, 221, 6, 202, 41, 35, 184, 232, 179, 25, 26, 182, 237, 191, 44, 52, 215, 21, 238, 98, 113, 27, 96, 64, 187, 209, 130, 206, 181, 55, 84, 12, 95, 77, 214, 250, 185, 19, 8, 152, 195, 137, 234, 230, 125, 175, 124, 228, 231, 133, 190, 146, 1, 11, 176, 240, 203, 65, 82, 254, 69, 39, 164, 188, 111, 189, 166, 42, 73, 3, 88, 72, 211, 249, 186, 22, 13, 159, 204, 148, 247, 245, 142, 194, 145, 251, 0, 160, 219, 177, 34, 46, 213, 23, 244, 108, 127, 45, 118, 90, 217, 243, 168, 248, 227, 105, 138, 70, 157, 143, 28, 68, 7, 101, 94, 242, 33, 235, 80, 80, 235, 33, 242, 94, 101, 7, 68, 28, 143, 157, 70, 138, 105, 227, 248, 168, 243, 217, 90, 118, 45, 127, 108, 244, 23, 213, 46, 34, 177, 219, 160, 0, 251, 145, 194, 134, 245, 247, 148, 204, 159, 13, 22, 186, 249, 211, 72, 88, 3, 73, 42, 166, 189, 111, 188, 164, 39, 69, 254, 82, 65, 203, 240, 176, 11, 1, 146, 190, 133, 231, 228, 124, 175, 125, 230, 234, 137, 195, 152, 8, 19, 185, 250, 214, 77, 95, 12, 84, 55, 181, 206, 130, 209, 187, 64, 96, 27, 113, 98, 238, 21, 215, 52, 44, 190, 237, 182, 26, 25, 179, 232, 184, 35, 41, 202, 6, 221, 79, 92, 4, 71, 37, 158, 178, 97, 171, 144, 16, 43, 225, 50, 30, 165, 199, 132, 220, 207, 93, 134, 74, 169, 163, 56, 104, 51, 153, 154, 54, 109, 63, 172, 180, 87, 149, 110, 226, 241, 155, 224, 192, 59, 81, 2, 78, 53, 183, 212, 140, 223, 205, 86, 122, 57, 147, 136, 24, 67, 9, 106, 102, 253, 47, 252, 100, 103, 5, 62, 18, 129, 139, 48, 112, 75, 193, 210, 126, 197, 167, 36, 60, 239, 61, 38, 170, 201, 131, 216, 200, 83, 121, 58, 150, 141, 31, 76, 20, 119, 117, 14, 66, 17, 123, 128, 32, 91, 49, 162, 174, 85, 151, 116, 236, 255, 173, 246, 218, 89, 115, 40, 120, 99, 233, 10, 198, 29, 15, 156, 196, 135, 229, 222, 114, 161, 107, 208, 208, 107, 161, 114, 222, 229, 135, 196, 156, 15, 29, 198, 10, 233, 99, 120, 40, 115, 89, 218, 246, 173, 255, 236, 116, 151, 85, 174, 162, 49, 91, 32, 128, 123, 17, 66, 14, 117, 119, 20, 76, 31, 141, 150, 58, 121, 83, 200, 216, 131, 201, 170, 38, 61, 239, 60, 36, 167, 197, 126, 210, 193, 75, 112, 48, 139, 129, 18, 62, 5, 103, 100, 252, 47, 253, 102, 106, 9, 67, 24, 136, 147, 57, 122, 86, 205, 223, 140, 212, 183, 53, 78, 2, 81, 59, 192, 224, 155, 241, 226, 110, 149, 87, 180, 172, 63, 109, 54, 154, 153, 51, 104, 56, 163, 169, 74, 134, 93, 207, 220, 132, 199, 165, 30, 50, 225, 43, 16, 144, 171, 97, 178, 158, 37, 71, 4, 92, 79, 221, 6, 202, 41, 35, 184, 232, 179, 25, 26, 182, 237, 191, 44, 52, 215, 21, 238, 98, 113, 27, 96, 64, 187, 209, 130, 206, 181, 55, 92, 12, 95, 77, 214, 250, 185, 19, 8, 152, 195, 137, 234, 230, 125, 175, 124, 228, 231, 133, 190, 146, 1, 11, 176, 240, 203, 65, 82, 254, 69, 39, 164, 188, 111, 189, 166, 42, 73, 3, 88, 72, 211, 249, 186, 22, 13, 159, 204, 148, 247, 245, 142, 194, 145, 251, 0, 160, 219, 177, 34, 46, 213, 23, 244, 108, 127, 45, 118, 90, 217, 243, 168, 248, 227, 105, 138, 70, 157, 143, 28, 68, 7, 101, 94, 242, 33, 235, 80, 64, 235, 33, 242, 94, 101, 7, 68, 28, 143, 157, 70, 138, 105, 227, 248, 168, 243, 217, 90, 118, 45, 127, 108, 244, 23, 213, 46, 34, 177, 219, 160, 0, 251, 145, 194, 142, 245, 247, 148, 204, 159, 13, 22, 186, 249, 211, 72, 88, 3, 73, 42, 166, 189, 111, 188, 164, 39, 69, 254, 82, 65, 203, 240, 176, 11, 1, 146, 190, 133, 231, 228, 124, 175, 125, 230, 234, 137, 195, 152, 8, 19, 185, 250, 214, 77, 95, 12, 84, 55, 181, 206, 130, 209, 187, 64, 96, 27, 113, 98, 238, 21, 215, 52, 44, 191, 237, 182, 26, 25, 179, 232, 184, 35, 41, 202, 6, 221, 79, 92, 4, 71, 37, 158, 178, 97, 171, 144, 16, 47, 225, 50, 30, 165, 199, 132, 220, 207, 93, 134, 74, 169, 163, 56, 104, 51, 153, 154, 54, 109, 63, 172, 180, 87, 149, 110, 226, 241, 155, 224, 192, 59, 81, 2, 78, 53, 183, 212, 140, 223, 205, 86, 122, 57, 147, 136, 24, 67, 9, 106, 102, 253, 47, 252, 100, 103, 5, 62, 18, 129, 139, 48, 112, 75, 193, 210, 126, 197, 167, 36, 60, 239, 61, 38, 170, 201, 131, 216, 200, 83, 121, 58, 150, 141, 31, 76, 20, 119, 117, 14, 66, 17, 123, 128, 32, 91, 49, 162, 174, 85, 151, 116, 236, 255, 173, 246, 218, 89, 115, 40, 120, 99, 233, 10, 198, 29, 15, 156, 196, 135, 229, 222, 114, 161, 107, 208, 208, 107, 161, 114, 222, 229, 135, 196, 156, 15, 29, 198, 10, 233, 99, 120, 40, 115, 89, 218, 246, 173, 255, 236, 116, 151, 85, 174, 162, 49, 91, 32, 128, 107, 17, 66, 14, 117, 119, 20, 76, 31, 141, 150, 58, 121, 83, 200, 216, 131, 201, 170, 38, 61, 239, 60, 36, 167, 197, 126, 210, 193, 75, 112, 48, 139, 129, 18, 62, 5, 103, 100, 188, 47, 253, 102, 106, 9, 67, 24, 136, 147, 57, 122, 86, 205, 223, 140, 212, 183, 53, 78, 2, 81, 59, 192, 224, 155, 241, 226, 110, 149, 87, 180, 172, 63, 109, 54, 154, 153, 51, 104, 56, 163, 169, 74, 134, 93, 207, 220, 132, 199, 165, 30, 50, 225, 43, 16, 144, 171, 97, 178, 158, 37, 71, 4, 92, 79, 221, 6, 202, 41, 35, 184, 232, 179, 25, 26, 182, 237, 191, 44, 52, 215, 21, 238, 98, 113, 27, 96, 64, 187, 209, 130, 206, 181, 55, 84, 12, 95, 77, 214, 250, 185, 19, 8, 152, 195, 137, 234, 230, 125, 175, 124, 228, 231, 133, 190, 146, 1, 11, 176, 240, 203, 65, 82, 254, 69, 39, 164, 188, 111, 189, 166, 42, 73, 3, 88, 72, 211, 249, 186, 22, 13, 159, 204, 148, 247, 245, 142, 194, 145, 251, 0, 160, 219, 177, 34, 46, 213, 23, 244, 108, 127, 45, 118, 90, 217, 243, 168, 248, 227, 105, 138, 70, 157, 143, 28, 68, 7, 101, 94, 242, 33, 235, 80, 80, 235, 33, 242, 94, 101, 7, 68, 47, 223, 174, 22, 138, 105, 227, 248, 168, 243, 217, 90, 118, 45, 127, 108, 244, 23, 213, 46, 34, 177, 219, 160, 0, 251, 145, 194 };
				var parsed_bytes = (entry as UndefinedIFDEntry).Data.Data;
				Assert.AreEqual (bytes, parsed_bytes);
			}
			// Nikon3.0x0095 (NoiseReduction/Ascii/5) "OFF "
			{
				var entry = makernote_structure.GetEntry (0, (ushort)Nikon3MakerNoteEntryTag.NoiseReduction);
				Assert.IsNotNull (entry, "Entry 0x0095 missing in IFD 0");
				Assert.IsNotNull (entry as StringIFDEntry, "Entry is not a string!");
				Assert.AreEqual ("OFF ", (entry as StringIFDEntry).Value);
			}
			// Nikon3.0x0097 (ColorBalance2/Undefined
			{
				var entry = makernote_structure.GetEntry (0, (ushort)Nikon3MakerNoteEntryTag.ColorBalance);
				Assert.IsNotNull (entry, "Entry 0x0097 missing in IFD 0");
				Assert.IsNotNull (entry as UndefinedIFDEntry, "Entry is not an undefined IFD entry!");
				var bytes = new byte[] { 48, 50, 49, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 211, 37, 142, 189, 209, 250, 8, 192, 211, 64, 18, 73, 229, 230, 76, 23, 71, 221, 27, 52, 182, 35, 176, 162, 251, 184, 219, 97, 135, 142, 112, 100, 108, 212, 6, 205, 233, 90, 199, 132, 33, 50, 160, 123, 181, 84, 88, 199, 179, 204, 140, 101, 201, 130, 254, 87, 1, 184, 102, 145, 25, 30, 117, 27, 50, 212, 163, 253, 195, 218, 45, 47, 45, 36, 76, 185, 165, 198, 68, 119, 11, 191, 226, 133, 173, 2, 140, 19, 179, 156, 50, 197, 137, 119, 160, 206, 31, 167, 158, 58, 177, 49, 136, 208, 99, 9, 242, 203, 170, 57, 124, 35, 55, 172, 134, 197, 105, 114, 224, 183, 235, 136, 138, 241, 189, 238, 132, 123, 206, 165, 168, 93, 81, 170, 232, 139, 147, 0, 86, 9, 38, 166, 163, 151, 135, 156, 23, 244, 122, 163, 178, 37, 57, 120, 50, 33, 143, 94, 148, 47, 123, 148, 94, 137, 33, 26, 120, 59, 99, 240, 226, 61, 245, 22, 156, 135, 215, 140, 166, 33, 9, 82, 128, 147, 11, 232, 92, 81, 177, 206, 72, 223, 147, 132, 2, 189, 241, 139, 136, 234, 179, 225, 114, 104, 209, 135, 167, 54, 44, 125, 54, 84, 45, 194, 252, 195, 55, 88, 58, 128, 45, 63, 180, 142, 207, 117, 132, 237, 63, 250, 102, 155, 253, 208, 2, 152, 149, 247, 80, 231, 155, 108, 48, 133, 95, 50, 32, 114, 43, 73, 202, 177, 253, 174, 196, 63, 31, 100, 14, 29, 145, 106, 168, 75, 83, 192, 146, 201, 101, 102, 204, 151, 199, 92, 83, 183, 121, 162, 48, 35, 123, 56, 90, 225, 205, 30, 212, 239, 111, 84, 158, 77, 97, 218, 184, 251, 163, 176, 34, 249, 53, 214, 220, 71, 23, 76, 230, 229, 73, 18, 74, 211, 193, 40, 224, 17, 137, 142, 240, 159, 171, 68, 58, 125, 49, 74, 200, 171, 243, 160, 178, 41, 17, 70, 248, 247, 109, 60, 124, 21, 25, 130, 80, 131, 27, 24, 122, 65, 109, 254, 254, 79, 5, 52, 190, 173, 1, 186, 216, 91, 67, 144, 66, 89, 213, 182, 252, 167, 183, 44, 6, 69, 233, 242, 96, 51, 107, 8, 10, 112, 61, 111, 4, 254, 95, 37, 78, 220, 209, 43, 252, 10, 135, 129, 210, 136, 165, 39, 250, 87, 241, 28, 107, 117, 185, 99, 112, 226, 187, 249, 144, 160, 13, 223, 20, 174, 175, 21, 34, 13, 87, 154, 20, 187, 227, 113, 98, 184, 117, 151, 28, 6, 87, 13, 38, 164, 137, 211, 128, 146, 11, 233, 42, 209, 221, 78, 36, 95, 255, 4, 110, 61, 113, 10, 8, 107, 51, 96, 242, 233, 69, 6, 44, 183, 167, 252, 182, 213, 89, 66, 144, 67, 91, 216, 186, 1, 173, 190, 52, 15, 79, 244, 254, 109, 65, 122, 24, 27, 131, 80, 130, 25, 21, 118, 60, 103, 247, 236, 70, 5, 41, 178, 160, 243, 171, 200, 74, 49, 125, 46, 68, 191, 159, 228, 142, 157, 17, 234, 40, 203, 211, 64, 18, 73, 229, 230, 76, 23, 71, 220, 214, 53, 249, 34, 176, 163, 251, 184, 218, 97, 77, 158, 84, 111, 239, 212, 30, 205, 225, 90, 56, 123, 35, 48, 162, 121, 181, 86, 92, 199, 151, 204, 102, 101, 201, 146, 192, 83, 75, 168, 106, 144, 29, 15, 100, 30, 63, 197, 174, 252, 177, 203, 72, 42, 115, 33, 50, 168, 133, 199, 108, 118, 231, 189, 246, 148, 153, 3, 208, 2, 155, 153, 250, 192, 237, 127, 116, 206, 143, 181, 62, 44, 129, 59, 88, 218, 195, 17, 194, 216, 85, 55, 124, 38, 55, 173, 134, 196, 105, 115, 224, 178, 235, 137, 138, 240, 189, 239, 132, 126, 223, 165, 206, 92, 81, 171, 104, 138, 19, 1, 82, 8, 37, 167, 140, 214, 135, 157, 22, 244, 57, 227, 240, 98, 59, 121, 26, 32, 141, 95, 148, 46, 47, 149, 94, 140, 33, 27, 120, 58, 99, 241, 226, 56, 245, 23, 156, 134, 215, 141, 166, 36, 9, 83, 0, 18, 139, 105, 85, 94, 162, 193, 91, 208, 128, 139, 17, 178, 14, 133, 119, 228, 76, 239, 141, 102, 58, 137, 83, 56, 216, 115, 201, 90, 38, 205, 239, 204, 36, 87, 197, 142, 210, 49, 75, 128, 48, 123, 129, 226, 62, 245, 103, 148, 252, 223, 253, 150, 106, 249, 67, 232, 136, 99, 57, 138, 86, 61, 223, 124, 212, 71, 53, 190, 2, 161, 59, 48, 224, 107, 241, 18, 110, 101, 87, 68, 172, 207, 109, 198, 154, 105, 51, 152, 56, 83, 169, 186, 134, 173, 207, 44, 132, 55, 165, 238, 50, 17, 43, 224, 111, 84, 158, 77, 97, 218, 184, 251, 163, 176, 34, 249, 53, 214, 220, 71, 23, 76, 230, 229, 73, 18, 64, 211, 203, 40, 234, 17, 157, 142, 228, 159, 191, 68, 46, 125, 49, 74, 200, 171, 243, 160, 178, 41, 5, 70, 236, 247, 103, 60, 118, 21, 24, 131, 19, 194, 89, 94, 60, 67, 43, 252, 178, 77, 13, 52, 150, 173, 2, 186, 216, 91, 67, 144, 22, 89, 24, 183, 179, 166, 179, 40, 21, 69, 233, 243, 173, 50, 36, 9, 10, 112, 60, 110, 0, 252, 91, 38, 79, 252, 209, 42, 231, 14, 147, 128, 210, 154, 165, 38, 12, 87, 7, 31, 151, 117, 185, 98, 112, 227, 187, 248, 163, 152, 13, 222, 20, 175, 173, 75, 33, 242, 94, 101, 7, 68, 28, 143, 157, 70, 138, 105, 227, 248, 168, 243, 217, 90, 118, 45, 127, 108, 244, 23, 213, 46, 34, 177, 219, 160, 0, 251, 145, 194, 142, 245, 247, 148, 204, 159, 13, 22, 186, 249, 211, 72, 88, 3, 73, 42, 166, 189, 111, 188, 164, 39, 69, 254, 82, 65, 203, 240, 176, 11, 1, 146, 190, 133, 231, 228, 124, 175, 125, 230, 234, 137, 195, 152, 8, 19, 185, 250, 41, 77, 95, 12, 84, 55 };
				var parsed_bytes = (entry as UndefinedIFDEntry).Data.Data;
				Assert.AreEqual (bytes, parsed_bytes);
			}
			// Nikon3.0x0098 (LensData/Undefined/33) "48 50 48 52 143 240 136 158 21 170 68 143 76 24 86 13 241 242 237 3 65 159 253 113 253 34 176 162 255 184 218 96 77 "
			{
				var entry = makernote_structure.GetEntry (0, (ushort)Nikon3MakerNoteEntryTag.LensData);
				Assert.IsNotNull (entry, "Entry 0x0098 missing in IFD 0");
				Assert.IsNotNull (entry as UndefinedIFDEntry, "Entry is not an undefined IFD entry!");
				var bytes = new byte[] { 48, 50, 48, 52, 143, 240, 136, 158, 21, 170, 68, 143, 76, 24, 86, 13, 241, 242, 237, 3, 65, 159, 253, 113, 253, 34, 176, 162, 255, 184, 218, 96, 77 };
				var parsed_bytes = (entry as UndefinedIFDEntry).Data.Data;
				Assert.AreEqual (bytes, parsed_bytes);
			}
			// Nikon3.0x0099 (RawImageCenter/Short/2) "2176 1434"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)Nikon3MakerNoteEntryTag.RawImageCenter);
				Assert.IsNotNull (entry, "Entry 0x0099 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.AreEqual (new ushort[] { 2176, 1434 }, (entry as ShortArrayIFDEntry).Values);
			}
			// Nikon3.0x009E (RetouchHistory/Short/10) "0 0 0 0 0 0 0 0 0 0"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)Nikon3MakerNoteEntryTag.RetouchHistory);
				Assert.IsNotNull (entry, "Entry 0x009E missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.AreEqual (new ushort[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, (entry as ShortArrayIFDEntry).Values);
			}
			// Nikon3.0x00A1 (0x00a1/Undefined/56) "97 39 3 0 48 0 0 0 157 159 161 134 134 135 162 164 166 168 169 173 167 168 175 162 164 174 162 164 174 190 191 198 168 171 175 149 149 154 146 146 151 154 157 162 166 169 176 163 166 172 176 176 181 168 170 175 "
			{
				// TODO: Unknown IFD tag: Nikon3 / 0x00A1
				var entry = makernote_structure.GetEntry (0, 0x00A1);
				Assert.IsNotNull (entry, "Entry 0x00A1 missing in IFD 0");
				Assert.IsNotNull (entry as UndefinedIFDEntry, "Entry is not an undefined IFD entry!");
				var bytes = new byte[] { 97, 39, 3, 0, 48, 0, 0, 0, 157, 159, 161, 134, 134, 135, 162, 164, 166, 168, 169, 173, 167, 168, 175, 162, 164, 174, 162, 164, 174, 190, 191, 198, 168, 171, 175, 149, 149, 154, 146, 146, 151, 154, 157, 162, 166, 169, 176, 163, 166, 172, 176, 176, 181, 168, 170, 175 };
				var parsed_bytes = (entry as UndefinedIFDEntry).Data.Data;
				Assert.AreEqual (bytes, parsed_bytes);
			}
			// Nikon3.0x00A3 (0x00a3/Byte/1) "0 "
			{
				var entry = makernote_structure.GetEntry (0, (ushort)Nikon3MakerNoteEntryTag.Unknown163);
				Assert.IsNotNull (entry, "Entry 0x00A3 missing in IFD 0");
				Assert.IsNotNull (entry as ByteIFDEntry, "Entry is not a byte!");
				Assert.AreEqual (0, (entry as ByteIFDEntry).Value);
			}
			// Nikon3.0x00A7 (ShutterCount/Long/1) "5073"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)Nikon3MakerNoteEntryTag.ShutterCount);
				Assert.IsNotNull (entry, "Entry 0x00A7 missing in IFD 0");
				Assert.IsNotNull (entry as LongIFDEntry, "Entry is not a long!");
				Assert.AreEqual (5073, (entry as LongIFDEntry).Value);
			}
			// Nikon3.0x00AB (VariProgram/Ascii/2) " "
			{
				var entry = makernote_structure.GetEntry (0, (ushort)Nikon3MakerNoteEntryTag.VariProgram);
				Assert.IsNotNull (entry, "Entry 0x00AB missing in IFD 0");
				Assert.IsNotNull (entry as StringIFDEntry, "Entry is not a string!");
				Assert.AreEqual (" ", (entry as StringIFDEntry).Value);
			}
			// Nikon3.0x00B0 (MultiExposure/Undefined/16) "48 49 48 48 0 0 0 0 0 0 0 0 0 0 0 0 "
			{
				var entry = makernote_structure.GetEntry (0, (ushort)Nikon3MakerNoteEntryTag.MultiExposure);
				Assert.IsNotNull (entry, "Entry 0x00B0 missing in IFD 0");
				Assert.IsNotNull (entry as UndefinedIFDEntry, "Entry is not an undefined IFD entry!");
				var bytes = new byte[] { 48, 49, 48, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
				var parsed_bytes = (entry as UndefinedIFDEntry).Data.Data;
				Assert.AreEqual (bytes, parsed_bytes);
			}
			// Nikon3.0x00B1 (HighISONoiseReduction/Short/1) "0"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)Nikon3MakerNoteEntryTag.HighISONoiseReduction);
				Assert.IsNotNull (entry, "Entry 0x00B1 missing in IFD 0");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (0, (entry as ShortIFDEntry).Value);
			}
			// Nikon3.0x00B6 (0x00b6/Undefined/8) "218 7 1 30 13 21 46 0 "
			{
				// TODO: Unknown IFD tag: Nikon3 / 0x00B6
				var entry = makernote_structure.GetEntry (0, 0x00B6);
				Assert.IsNotNull (entry, "Entry 0x00B6 missing in IFD 0");
				Assert.IsNotNull (entry as UndefinedIFDEntry, "Entry is not an undefined IFD entry!");
				var bytes = new byte[] { 218, 7, 1, 30, 13, 21, 46, 0 };
				var parsed_bytes = (entry as UndefinedIFDEntry).Data.Data;
				Assert.AreEqual (bytes, parsed_bytes);
			}
			// Nikon3.0x00B7 (AFInfo/Undefined/30) "48 49 48 48 0 10 2 11 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 "
			{
				var entry = makernote_structure.GetEntry (0, (ushort)Nikon3MakerNoteEntryTag.AFInfo2);
				Assert.IsNotNull (entry, "Entry 0x00B7 missing in IFD 0");
				Assert.IsNotNull (entry as UndefinedIFDEntry, "Entry is not an undefined IFD entry!");
				var bytes = new byte[] { 48, 49, 48, 48, 0, 10, 2, 11, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
				var parsed_bytes = (entry as UndefinedIFDEntry).Data.Data;
				Assert.AreEqual (bytes, parsed_bytes);
			}
			// Nikon3.0x00B8 (FileInfo/Undefined/172) "48 49 48 48 0 0 0 100 18 75 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 "
			{
				var entry = makernote_structure.GetEntry (0, (ushort)Nikon3MakerNoteEntryTag.FileInfo);
				Assert.IsNotNull (entry, "Entry 0x00B8 missing in IFD 0");
				Assert.IsNotNull (entry as UndefinedIFDEntry, "Entry is not an undefined IFD entry!");
				var bytes = new byte[] { 48, 49, 48, 48, 0, 0, 0, 100, 18, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
				var parsed_bytes = (entry as UndefinedIFDEntry).Data.Data;
				Assert.AreEqual (bytes, parsed_bytes);
			}
			// Nikon3.0x00BB (0x00bb/Undefined/6) "48 49 48 48 255 0 "
			{
				// TODO: Unknown IFD tag: Nikon3 / 0x00BB
				var entry = makernote_structure.GetEntry (0, 0x00BB);
				Assert.IsNotNull (entry, "Entry 0x00BB missing in IFD 0");
				Assert.IsNotNull (entry as UndefinedIFDEntry, "Entry is not an undefined IFD entry!");
				var bytes = new byte[] { 48, 49, 48, 48, 255, 0 };
				var parsed_bytes = (entry as UndefinedIFDEntry).Data.Data;
				Assert.AreEqual (bytes, parsed_bytes);
			}
			// Nikon3.0x0E09 (CaptureVersion/Ascii/13) "ViewNX 1.5 W"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)Nikon3MakerNoteEntryTag.CaptureVersion);
				Assert.IsNotNull (entry, "Entry 0x0E09 missing in IFD 0");
				Assert.IsNotNull (entry as StringIFDEntry, "Entry is not a string!");
				Assert.AreEqual ("ViewNX 1.5 W", (entry as StringIFDEntry).Value);
			}
			// Nikon3.0x0E10 (ScanIFD/Long/1) "9832"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)Nikon3MakerNoteEntryTag.ScanIFD);
				Assert.IsNotNull (entry, "Entry 0x0E10 missing in IFD 0");
				Assert.IsNotNull (entry as LongIFDEntry, "Entry is not a long!");
				Assert.AreEqual (9832, (entry as LongIFDEntry).Value);
			}
			// Nikon3.0x0E22 (0x0e22/Short/4) "12 0 0 0"
			{
				// TODO: Unknown IFD tag: Nikon3 / 0x0E22
				var entry = makernote_structure.GetEntry (0, 0x0E22);
				Assert.IsNotNull (entry, "Entry 0x0E22 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.AreEqual (new ushort[] { 12, 0, 0, 0 }, (entry as ShortArrayIFDEntry).Values);
			}
			// Photo.0x9286 (UserComment/UserComment/44) "charset="Ascii"                                     "
			//  --> Test removed because of CommentModificationValidator, value is checked there.
			// Photo.0x9290 (SubSecTime/Ascii/3) "00"
			{
				var entry = exif_structure.GetEntry (0, (ushort)ExifEntryTag.SubsecTime);
				Assert.IsNotNull (entry, "Entry 0x9290 missing in IFD 0");
				Assert.IsNotNull (entry as StringIFDEntry, "Entry is not a string!");
				Assert.AreEqual ("00", (entry as StringIFDEntry).Value);
			}
			// Photo.0x9291 (SubSecTimeOriginal/Ascii/3) "00"
			{
				var entry = exif_structure.GetEntry (0, (ushort)ExifEntryTag.SubsecTimeOriginal);
				Assert.IsNotNull (entry, "Entry 0x9291 missing in IFD 0");
				Assert.IsNotNull (entry as StringIFDEntry, "Entry is not a string!");
				Assert.AreEqual ("00", (entry as StringIFDEntry).Value);
			}
			// Photo.0x9292 (SubSecTimeDigitized/Ascii/3) "00"
			{
				var entry = exif_structure.GetEntry (0, (ushort)ExifEntryTag.SubsecTimeDigitized);
				Assert.IsNotNull (entry, "Entry 0x9292 missing in IFD 0");
				Assert.IsNotNull (entry as StringIFDEntry, "Entry is not a string!");
				Assert.AreEqual ("00", (entry as StringIFDEntry).Value);
			}
			// Photo.0xA000 (FlashpixVersion/Undefined/4) "48 49 48 48 "
			{
				var entry = exif_structure.GetEntry (0, (ushort)ExifEntryTag.FlashpixVersion);
				Assert.IsNotNull (entry, "Entry 0xA000 missing in IFD 0");
				Assert.IsNotNull (entry as UndefinedIFDEntry, "Entry is not an undefined IFD entry!");
				var bytes = new byte[] { 48, 49, 48, 48 };
				var parsed_bytes = (entry as UndefinedIFDEntry).Data.Data;
				Assert.AreEqual (bytes, parsed_bytes);
			}
			// Photo.0xA001 (ColorSpace/Short/1) "1"
			{
				var entry = exif_structure.GetEntry (0, (ushort)ExifEntryTag.ColorSpace);
				Assert.IsNotNull (entry, "Entry 0xA001 missing in IFD 0");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (1, (entry as ShortIFDEntry).Value);
			}
			// Photo.0xA217 (SensingMethod/Short/1) "2"
			{
				var entry = exif_structure.GetEntry (0, (ushort)ExifEntryTag.SensingMethod);
				Assert.IsNotNull (entry, "Entry 0xA217 missing in IFD 0");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (2, (entry as ShortIFDEntry).Value);
			}
			// Photo.0xA300 (FileSource/Undefined/1) "3 "
			{
				var entry = exif_structure.GetEntry (0, (ushort)ExifEntryTag.FileSource);
				Assert.IsNotNull (entry, "Entry 0xA300 missing in IFD 0");
				Assert.IsNotNull (entry as UndefinedIFDEntry, "Entry is not an undefined IFD entry!");
				var bytes = new byte[] { 3 };
				var parsed_bytes = (entry as UndefinedIFDEntry).Data.Data;
				Assert.AreEqual (bytes, parsed_bytes);
			}
			// Photo.0xA301 (SceneType/Undefined/1) "1 "
			{
				var entry = exif_structure.GetEntry (0, (ushort)ExifEntryTag.SceneType);
				Assert.IsNotNull (entry, "Entry 0xA301 missing in IFD 0");
				Assert.IsNotNull (entry as UndefinedIFDEntry, "Entry is not an undefined IFD entry!");
				var bytes = new byte[] { 1 };
				var parsed_bytes = (entry as UndefinedIFDEntry).Data.Data;
				Assert.AreEqual (bytes, parsed_bytes);
			}
			// Photo.0xA302 (CFAPattern/Undefined/8) "0 2 0 2 1 2 0 1 "
			{
				var entry = exif_structure.GetEntry (0, (ushort)ExifEntryTag.CFAPattern2);
				Assert.IsNotNull (entry, "Entry 0xA302 missing in IFD 0");
				Assert.IsNotNull (entry as UndefinedIFDEntry, "Entry is not an undefined IFD entry!");
				var bytes = new byte[] { 0, 2, 0, 2, 1, 2, 0, 1 };
				var parsed_bytes = (entry as UndefinedIFDEntry).Data.Data;
				Assert.AreEqual (bytes, parsed_bytes);
			}
			// Photo.0xA401 (CustomRendered/Short/1) "0"
			{
				var entry = exif_structure.GetEntry (0, (ushort)ExifEntryTag.CustomRendered);
				Assert.IsNotNull (entry, "Entry 0xA401 missing in IFD 0");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (0, (entry as ShortIFDEntry).Value);
			}
			// Photo.0xA402 (ExposureMode/Short/1) "0"
			{
				var entry = exif_structure.GetEntry (0, (ushort)ExifEntryTag.ExposureMode);
				Assert.IsNotNull (entry, "Entry 0xA402 missing in IFD 0");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (0, (entry as ShortIFDEntry).Value);
			}
			// Photo.0xA403 (WhiteBalance/Short/1) "0"
			{
				var entry = exif_structure.GetEntry (0, (ushort)ExifEntryTag.WhiteBalance);
				Assert.IsNotNull (entry, "Entry 0xA403 missing in IFD 0");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (0, (entry as ShortIFDEntry).Value);
			}
			// Photo.0xA404 (DigitalZoomRatio/Rational/1) "1/1"
			{
				var entry = exif_structure.GetEntry (0, (ushort)ExifEntryTag.DigitalZoomRatio);
				Assert.IsNotNull (entry, "Entry 0xA404 missing in IFD 0");
				Assert.IsNotNull (entry as RationalIFDEntry, "Entry is not a rational!");
				Assert.AreEqual (1, (entry as RationalIFDEntry).Value.Numerator);
				Assert.AreEqual (1, (entry as RationalIFDEntry).Value.Denominator);
			}
			// Photo.0xA405 (FocalLengthIn35mmFilm/Short/1) "52"
			{
				var entry = exif_structure.GetEntry (0, (ushort)ExifEntryTag.FocalLengthIn35mmFilm);
				Assert.IsNotNull (entry, "Entry 0xA405 missing in IFD 0");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (52, (entry as ShortIFDEntry).Value);
			}
			// Photo.0xA406 (SceneCaptureType/Short/1) "0"
			{
				var entry = exif_structure.GetEntry (0, (ushort)ExifEntryTag.SceneCaptureType);
				Assert.IsNotNull (entry, "Entry 0xA406 missing in IFD 0");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (0, (entry as ShortIFDEntry).Value);
			}
			// Photo.0xA407 (GainControl/Short/1) "0"
			{
				var entry = exif_structure.GetEntry (0, (ushort)ExifEntryTag.GainControl);
				Assert.IsNotNull (entry, "Entry 0xA407 missing in IFD 0");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (0, (entry as ShortIFDEntry).Value);
			}
			// Photo.0xA408 (Contrast/Short/1) "0"
			{
				var entry = exif_structure.GetEntry (0, (ushort)ExifEntryTag.Contrast);
				Assert.IsNotNull (entry, "Entry 0xA408 missing in IFD 0");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (0, (entry as ShortIFDEntry).Value);
			}
			// Photo.0xA409 (Saturation/Short/1) "0"
			{
				var entry = exif_structure.GetEntry (0, (ushort)ExifEntryTag.Saturation);
				Assert.IsNotNull (entry, "Entry 0xA409 missing in IFD 0");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (0, (entry as ShortIFDEntry).Value);
			}
			// Photo.0xA40A (Sharpness/Short/1) "0"
			{
				var entry = exif_structure.GetEntry (0, (ushort)ExifEntryTag.Sharpness);
				Assert.IsNotNull (entry, "Entry 0xA40A missing in IFD 0");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (0, (entry as ShortIFDEntry).Value);
			}
			// Photo.0xA40C (SubjectDistanceRange/Short/1) "0"
			{
				var entry = exif_structure.GetEntry (0, (ushort)ExifEntryTag.SubjectDistanceRange);
				Assert.IsNotNull (entry, "Entry 0xA40C missing in IFD 0");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (0, (entry as ShortIFDEntry).Value);
			}
			// Image.0x8773 (InterColorProfile/Undefined/8636) "0 0 33 188 78 75 79 78 2 32 0 0 109 110 116 114 82 71 66 32 88 89 90 32 7 210 0 10 0 25 0 13 0 32 0 16 97 99 115 112 65 80 80 76 0 0 0 0 110 111 110 101 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 246 214 0 1 0 0 0 0 211 45 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 9 100 101 115 99 0 0 0 240 0 0 0 67 114 88 89 90 0 0 1 52 0 0 0 20 103 88 89 90 0 0 1 72 0 0 0 20 98 88 89 90 0 0 1 92 0 0 0 20 119 116 112 116 0 0 1 112 0 0 0 20 99 112 114 116 0 0 1 132 0 0 0 44 114 84 82 67 0 0 1 176 0 0 32 12 103 84 82 67 0 0 1 176 0 0 32 12 98 84 82 67 0 0 1 176 0 0 32 12 100 101 115 99 0 0 0 0 0 0 0 22 78 105 107 111 110 32 115 82 71 66 32 52 46 48 46 48 46 51 48 48 49 0 0 0 0 0 0 0 0 0 0 0 22 78 105 107 111 110 32 115 82 71 66 32 52 46 48 46 48 46 51 48 48 49 0 0 88 89 90 32 0 0 0 0 0 0 111 162 0 0 56 246 0 0 3 144 88 89 90 32 0 0 0 0 0 0 98 148 0 0 183 133 0 0 24 217 88 89 90 32 0 0 0 0 0 0 36 159 0 0 15 132 0 0 182 200 88 89 90 32 0 0 0 0 0 0 243 84 0 1 0 0 0 1 22 207 116 101 120 116 0 0 0 0 78 105 107 111 110 32 73 110 99 46 32 38 32 78 105 107 111 110 32 67 111 114 112 111 114 97 116 105 111 110 32 50 48 48 50 0 99 117 114 118 0 0 0 0 0 0 16 0 0 0 0 1 0 2 0 3 0 4 0 6 0 7 0 8 0 9 0 11 0 12 0 13 0 14 0 16 0 17 0 18 0 19 0 21 0 22 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 42 0 43 0 44 0 45 0 47 0 48 0 49 0 50 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 63 0 64 0 65 0 66 0 68 0 69 0 70 0 71 0 73 0 74 0 75 0 76 0 78 0 79 0 80 0 81 0 82 0 84 0 85 0 86 0 87 0 89 0 90 0 91 0 92 0 94 0 95 0 96 0 97 0 99 0 100 0 101 0 102 0 104 0 105 0 106 0 107 0 109 0 110 0 111 0 112 0 113 0 115 0 116 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 130 0 131 0 132 0 133 0 135 0 136 0 137 0 138 0 139 0 141 0 142 0 143 0 144 0 146 0 147 0 148 0 149 0 151 0 152 0 153 0 154 0 156 0 157 0 158 0 159 0 161 0 162 0 163 0 164 0 165 0 167 0 168 0 169 0 170 0 172 0 173 0 174 0 175 0 177 0 178 0 179 0 180 0 182 0 183 0 184 0 185 0 187 0 188 0 189 0 190 0 191 0 193 0 194 0 195 0 196 0 198 0 199 0 200 0 201 0 203 0 204 0 205 0 206 0 208 0 209 0 210 0 211 0 213 0 214 0 215 0 217 0 218 0 219 0 221 0 222 0 223 0 225 0 226 0 227 0 229 0 230 0 231 0 233 0 234 0 235 0 237 0 238 0 239 0 241 0 242 0 244 0 245 0 246 0 248 0 249 0 251 0 252 0 254 0 255 1 0 1 2 1 3 1 5 1 6 1 8 1 9 1 11 1 12 1 13 1 15 1 16 1 18 1 19 1 21 1 22 1 24 1 25 1 27 1 29 1 30 1 32 1 33 1 35 1 36 1 38 1 39 1 41 1 42 1 44 1 46 1 47 1 49 1 50 1 52 1 54 1 55 1 57 1 58 1 60 1 62 1 63 1 65 1 67 1 68 1 70 1 71 1 73 1 75 1 76 1 78 1 80 1 81 1 83 1 85 1 87 1 88 1 90 1 92 1 93 1 95 1 97 1 99 1 100 1 102 1 104 1 106 1 107 1 109 1 111 1 113 1 114 1 116 1 118 1 120 1 122 1 123 1 125 1 127 1 129 1 131 1 132 1 134 1 136 1 138 1 140 1 142 1 144 1 145 1 147 1 149 1 151 1 153 1 155 1 157 1 159 1 160 1 162 1 164 1 166 1 168 1 170 1 172 1 174 1 176 1 178 1 180 1 182 1 184 1 186 1 188 1 190 1 192 1 194 1 196 1 198 1 200 1 202 1 204 1 206 1 208 1 210 1 212 1 214 1 216 1 218 1 220 1 222 1 224 1 226 1 228 1 230 1 232 1 234 1 237 1 239 1 241 1 243 1 245 1 247 1 249 1 251 1 254 2 0 2 2 2 4 2 6 2 8 2 10 2 13 2 15 2 17 2 19 2 21 2 24 2 26 2 28 2 30 2 32 2 35 2 37 2 39 2 41 2 44 2 46 2 48 2 50 2 53 2 55 2 57 2 60 2 62 2 64 2 67 2 69 2 71 2 73 2 76 2 78 2 80 2 83 2 85 2 87 2 90 2 92 2 95 2 97 2 99 2 102 2 104 2 107 2 109 2 111 2 114 2 116 2 119 2 121 2 123 2 126 2 128 2 131 2 133 2 136 2 138 2 141 2 143 2 146 2 148 2 151 2 153 2 156 2 158 2 161 2 163 2 166 2 168 2 171 2 173 2 176 2 178 2 181 2 184 2 186 2 189 2 191 2 194 2 196 2 199 2 202 2 204 2 207 2 209 2 212 2 215 2 217 2 220 2 223 2 225 2 228 2 231 2 233 2 236 2 239 2 241 2 244 2 247 2 249 2 252 2 255 3 2 3 4 3 7 3 10 3 13 3 15 3 18 3 21 3 24 3 26 3 29 3 32 3 35 3 38 3 40 3 43 3 46 3 49 3 52 3 54 3 57 3 60 3 63 3 66 3 69 3 72 3 74 3 77 3 80 3 83 3 86 3 89 3 92 3 95 3 98 3 100 3 103 3 106 3 109 3 112 3 115 3 118 3 121 3 124 3 127 3 130 3 133 3 136 3 139 3 142 3 145 3 148 3 151 3 154 3 157 3 160 3 163 3 166 3 169 3 172 3 175 3 178 3 182 3 185 3 188 3 191 3 194 3 197 3 200 3 203 3 206 3 209 3 213 3 216 3 219 3 222 3 225 3 228 3 232 3 235 3 238 3 241 3 244 3 247 3 251 3 254 4 1 4 4 4 8 4 11 4 14 4 17 4 21 4 24 4 27 4 30 4 34 4 37 4 40 4 43 4 47 4 50 4 53 4 57 4 60 4 63 4 67 4 70 4 73 4 77 4 80 4 84 4 87 4 90 4 94 4 97 4 100 4 104 4 107 4 111 4 114 4 117 4 121 4 124 4 128 4 131 4 135 4 138 4 142 4 145 4 149 4 152 4 156 4 159 4 163 4 166 4 170 4 173 4 177 4 180 4 184 4 187 4 191 4 194 4 198 4 202 4 205 4 209 4 212 4 216 4 219 4 223 4 227 4 230 4 234 4 238 4 241 4 245 4 249 4 252 5 0 5 4 5 7 5 11 5 15 5 18 5 22 5 26 5 29 5 33 5 37 5 41 5 44 5 48 5 52 5 56 5 59 5 63 5 67 5 71 5 74 5 78 5 82 5 86 5 90 5 93 5 97 5 101 5 105 5 109 5 113 5 116 5 120 5 124 5 128 5 132 5 136 5 140 5 144 5 147 5 151 5 155 5 159 5 163 5 167 5 171 5 175 5 179 5 183 5 187 5 191 5 195 5 199 5 203 5 207 5 211 5 215 5 219 5 223 5 227 5 231 5 235 5 239 5 243 5 247 5 251 5 255 6 3 6 7 6 12 6 16 6 20 6 24 6 28 6 32 6 36 6 40 6 44 6 49 6 53 6 57 6 61 6 65 6 69 6 74 6 78 6 82 6 86 6 90 6 95 6 99 6 103 6 107 6 112 6 116 6 120 6 124 6 129 6 133 6 137 6 142 6 146 6 150 6 154 6 159 6 163 6 167 6 172 6 176 6 180 6 185 6 189 6 193 6 198 6 202 6 207 6 211 6 215 6 220 6 224 6 229 6 233 6 237 6 242 6 246 6 251 6 255 7 4 7 8 7 13 7 17 7 22 7 26 7 31 7 35 7 40 7 44 7 49 7 53 7 58 7 62 7 67 7 71 7 76 7 81 7 85 7 90 7 94 7 99 7 104 7 108 7 113 7 117 7 122 7 127 7 131 7 136 7 141 7 145 7 150 7 155 7 159 7 164 7 169 7 173 7 178 7 183 7 188 7 192 7 197 7 202 7 207 7 211 7 216 7 221 7 226 7 230 7 235 7 240 7 245 7 250 7 254 8 3 8 8 8 13 8 18 8 23 8 27 8 32 8 37 8 42 8 47 8 52 8 57 8 62 8 67 8 71 8 76 8 81 8 86 8 91 8 96 8 101 8 106 8 111 8 116 8 121 8 126 8 131 8 136 8 141 8 146 8 151 8 156 8 161 8 166 8 171 8 176 8 181 8 186 8 191 8 197 8 202 8 207 8 212 8 217 8 222 8 227 8 232 8 237 8 243 8 248 8 253 9 2 9 7 9 12 9 18 9 23 9 28 9 33 9 38 9 44 9 49 9 54 9 59 9 65 9 70 9 75 9 80 9 86 9 91 9 96 9 102 9 107 9 112 9 117 9 123 9 128 9 133 9 139 9 144 9 149 9 155 9 160 9 166 9 171 9 176 9 182 9 187 9 193 9 198 9 203 9 209 9 214 9 220 9 225 9 231 9 236 9 242 9 247 9 252 10 2 10 7 10 13 10 18 10 24 10 30 10 35 10 41 10 46 10 52 10 57 10 63 10 68 10 74 10 80 10 85 10 91 10 96 10 102 10 108 10 113 10 119 10 125 10 130 10 136 10 142 10 147 10 153 10 159 10 164 10 170 10 176 10 181 10 187 10 193 10 199 10 204 10 210 10 216 10 222 10 227 10 233 10 239 10 245 10 250 11 0 11 6 11 12 11 18 11 24 11 29 11 35 11 41 11 47 11 53 11 59 11 65 11 70 11 76 11 82 11 88 11 94 11 100 11 106 11 112 11 118 11 124 11 130 11 136 11 142 11 148 11 154 11 160 11 166 11 172 11 178 11 184 11 190 11 196 11 202 11 208 11 214 11 220 11 226 11 232 11 238 11 244 11 250 12 0 12 7 12 13 12 19 12 25 12 31 12 37 12 43 12 50 12 56 12 62 12 68 12 74 12 80 12 87 12 93 12 99 12 105 12 112 12 118 12 124 12 130 12 137 12 143 12 149 12 155 12 162 12 168 12 174 12 181 12 187 12 193 12 200 12 206 12 212 12 219 12 225 12 231 12 238 12 244 12 250 13 1 13 7 13 14 13 20 13 27 13 33 13 39 13 46 13 52 13 59 13 65 13 72 13 78 13 85 13 91 13 98 13 104 13 111 13 117 13 124 13 130 13 137 13 143 13 150 13 157 13 163 13 170 13 176 13 183 13 190 13 196 13 203 13 209 13 216 13 223 13 229 13 236 13 243 13 249 14 0 14 7 14 13 14 20 14 27 14 34 14 40 14 47 14 54 14 60 14 67 14 74 14 81 14 87 14 94 14 101 14 108 14 115 14 121 14 128 14 135 14 142 14 149 14 156 14 162 14 169 14 176 14 183 14 190 14 197 14 204 14 211 14 218 14 225 14 231 14 238 14 245 14 252 15 3 15 10 15 17 15 24 15 31 15 38 15 45 15 52 15 59 15 66 15 73 15 80 15 87 15 94 15 101 15 108 15 116 15 123 15 130 15 137 15 144 15 151 15 158 15 165 15 172 15 180 15 187 15 194 15 201 15 208 15 215 15 223 15 230 15 237 15 244 15 251 16 3 16 10 16 17 16 24 16 32 16 39 16 46 16 53 16 61 16 68 16 75 16 83 16 90 16 97 16 105 16 112 16 119 16 127 16 134 16 141 16 149 16 156 16 163 16 171 16 178 16 186 16 193 16 200 16 208 16 215 16 223 16 230 16 238 16 245 16 253 17 4 17 12 17 19 17 27 17 34 17 42 17 49 17 57 17 64 17 72 17 79 17 87 17 95 17 102 17 110 17 117 17 125 17 133 17 140 17 148 17 155 17 163 17 171 17 178 17 186 17 194 17 201 17 209 17 217 17 224 17 232 17 240 17 248 17 255 18 7 18 15 18 23 18 30 18 38 18 46 18 54 18 62 18 69 18 77 18 85 18 93 18 101 18 108 18 116 18 124 18 132 18 140 18 148 18 156 18 164 18 171 18 179 18 187 18 195 18 203 18 211 18 219 18 227 18 235 18 243 18 251 19 3 19 11 19 19 19 27 19 35 19 43 19 51 19 59 19 67 19 75 19 83 19 91 19 99 19 107 19 115 19 124 19 132 19 140 19 148 19 156 19 164 19 172 19 180 19 189 19 197 19 205 19 213 19 221 19 230 19 238 19 246 19 254 20 6 20 15 20 23 20 31 20 39 20 48 20 56 20 64 20 73 20 81 20 89 20 97 20 106 20 114 20 122 20 131 20 139 20 148 20 156 20 164 20 173 20 181 20 189 20 198 20 206 20 215 20 223 20 232 20 240 20 248 21 1 21 9 21 18 21 26 21 35 21 43 21 52 21 60 21 69 21 77 21 86 21 95 21 103 21 112 21 120 21 129 21 137 21 146 21 155 21 163 21 172 21 180 21 189 21 198 21 206 21 215 21 224 21 232 21 241 21 250 22 2 22 11 22 20 22 29 22 37 22 46 22 55 22 64 22 72 22 81 22 90 22 99 22 107 22 116 22 125 22 134 22 143 22 152 22 160 22 169 22 178 22 187 22 196 22 205 22 214 22 222 22 231 22 240 22 249 23 2 23 11 23 20 23 29 23 38 23 47 23 56 23 65 23 74 23 83 23 92 23 101 23 110 23 119 23 128 23 137 23 146 23 155 23 164 23 173 23 182 23 191 23 200 23 210 23 219 23 228 23 237 23 246 23 255 24 8 24 18 24 27 24 36 24 45 24 54 24 63 24 73 24 82 24 91 24 100 24 110 24 119 24 128 24 137 24 147 24 156 24 165 24 175 24 184 24 193 24 202 24 212 24 221 24 231 24 240 24 249 25 3 25 12 25 21 25 31 25 40 25 50 25 59 25 68 25 78 25 87 25 97 25 106 25 116 25 125 25 135 25 144 25 154 25 163 25 173 25 182 25 192 25 201 25 211 25 220 25 230 25 239 25 249 26 3 26 12 26 22 26 31 26 41 26 51 26 60 26 70 26 80 26 89 26 99 26 109 26 118 26 128 26 138 26 147 26 157 26 167 26 177 26 186 26 196 26 206 26 216 26 225 26 235 26 245 26 255 27 9 27 18 27 28 27 38 27 48 27 58 27 68 27 77 27 87 27 97 27 107 27 117 27 127 27 137 27 147 27 157 27 167 27 177 27 186 27 196 27 206 27 216 27 226 27 236 27 246 28 0 28 10 28 20 28 30 28 40 28 51 28 61 28 71 28 81 28 91 28 101 28 111 28 121 28 131 28 141 28 151 28 162 28 172 28 182 28 192 28 202 28 212 28 223 28 233 28 243 28 253 29 7 29 18 29 28 29 38 29 48 29 59 29 69 29 79 29 90 29 100 29 110 29 120 29 131 29 141 29 151 29 162 29 172 29 183 29 193 29 203 29 214 29 224 29 234 29 245 29 255 30 10 30 20 30 31 30 41 30 51 30 62 30 72 30 83 30 93 30 104 30 114 30 125 30 135 30 146 30 157 30 167 30 178 30 188 30 199 30 209 30 220 30 231 30 241 30 252 31 6 31 17 31 28 31 38 31 49 31 60 31 70 31 81 31 92 31 102 31 113 31 124 31 135 31 145 31 156 31 167 31 178 31 188 31 199 31 210 31 221 31 232 31 242 31 253 32 8 32 19 32 30 32 41 32 51 32 62 32 73 32 84 32 95 32 106 32 117 32 128 32 139 32 149 32 160 32 171 32 182 32 193 32 204 32 215 32 226 32 237 32 248 33 3 33 14 33 25 33 36 33 47 33 58 33 70 33 81 33 92 33 103 33 114 33 125 33 136 33 147 33 158 33 170 33 181 33 192 33 203 33 214 33 225 33 237 33 248 34 3 34 14 34 25 34 37 34 48 34 59 34 70 34 82 34 93 34 104 34 116 34 127 34 138 34 150 34 161 34 172 34 184 34 195 34 206 34 218 34 229 34 240 34 252 35 7 35 19 35 30 35 41 35 53 35 64 35 76 35 87 35 99 35 110 35 122 35 133 35 145 35 156 35 168 35 179 35 191 35 202 35 214 35 226 35 237 35 249 36 4 36 16 36 28 36 39 36 51 36 62 36 74 36 86 36 97 36 109 36 121 36 132 36 144 36 156 36 168 36 179 36 191 36 203 36 214 36 226 36 238 36 250 37 6 37 17 37 29 37 41 37 53 37 65 37 76 37 88 37 100 37 112 37 124 37 136 37 148 37 159 37 171 37 183 37 195 37 207 37 219 37 231 37 243 37 255 38 11 38 23 38 35 38 47 38 59 38 71 38 83 38 95 38 107 38 119 38 131 38 143 38 155 38 167 38 179 38 191 38 204 38 216 38 228 38 240 38 252 39 8 39 20 39 33 39 45 39 57 39 69 39 81 39 93 39 106 39 118 39 130 39 142 39 155 39 167 39 179 39 191 39 204 39 216 39 228 39 241 39 253 40 9 40 22 40 34 40 46 40 59 40 71 40 83 40 96 40 108 40 121 40 133 40 146 40 158 40 170 40 183 40 195 40 208 40 220 40 233 40 245 41 2 41 14 41 27 41 39 41 52 41 64 41 77 41 90 41 102 41 115 41 127 41 140 41 152 41 165 41 178 41 190 41 203 41 216 41 228 41 241 41 254 42 10 42 23 42 36 42 48 42 61 42 74 42 87 42 99 42 112 42 125 42 138 42 151 42 163 42 176 42 189 42 202 42 215 42 227 42 240 42 253 43 10 43 23 43 36 43 49 43 61 43 74 43 87 43 100 43 113 43 126 43 139 43 152 43 165 43 178 43 191 43 204 43 217 43 230 43 243 44 0 44 13 44 26 44 39 44 52 44 65 44 78 44 91 44 105 44 118 44 131 44 144 44 157 44 170 44 183 44 197 44 210 44 223 44 236 44 249 45 6 45 20 45 33 45 46 45 59 45 73 45 86 45 99 45 112 45 126 45 139 45 152 45 166 45 179 45 192 45 206 45 219 45 232 45 246 46 3 46 16 46 30 46 43 46 57 46 70 46 83 46 97 46 110 46 124 46 137 46 151 46 164 46 178 46 191 46 205 46 218 46 232 46 245 47 3 47 16 47 30 47 43 47 57 47 71 47 84 47 98 47 111 47 125 47 139 47 152 47 166 47 180 47 193 47 207 47 221 47 234 47 248 48 6 48 20 48 33 48 47 48 61 48 74 48 88 48 102 48 116 48 130 48 143 48 157 48 171 48 185 48 199 48 213 48 226 48 240 48 254 49 12 49 26 49 40 49 54 49 68 49 82 49 96 49 109 49 123 49 137 49 151 49 165 49 179 49 193 49 207 49 221 49 235 49 249 50 7 50 21 50 36 50 50 50 64 50 78 50 92 50 106 50 120 50 134 50 148 50 162 50 177 50 191 50 205 50 219 50 233 50 248 51 6 51 20 51 34 51 48 51 63 51 77 51 91 51 105 51 120 51 134 51 148 51 163 51 177 51 191 51 206 51 220 51 234 51 249 52 7 52 21 52 36 52 50 52 65 52 79 52 93 52 108 52 122 52 137 52 151 52 166 52 180 52 195 52 209 52 224 52 238 52 253 53 11 53 26 53 40 53 55 53 69 53 84 53 99 53 113 53 128 53 142 53 157 53 172 53 186 53 201 53 216 53 230 53 245 54 4 54 18 54 33 54 48 54 62 54 77 54 92 54 107 54 121 54 136 54 151 54 166 54 180 54 195 54 210 54 225 54 240 54 255 55 13 55 28 55 43 55 58 55 73 55 88 55 103 55 118 55 133 55 147 55 162 55 177 55 192 55 207 55 222 55 237 55 252 56 11 56 26 56 41 56 56 56 71 56 86 56 101 56 117 56 132 56 147 56 162 56 177 56 192 56 207 56 222 56 237 56 253 57 12 57 27 57 42 57 57 57 72 57 88 57 103 57 118 57 133 57 149 57 164 57 179 57 194 57 210 57 225 57 240 58 0 58 15 58 30 58 46 58 61 58 76 58 92 58 107 58 122 58 138 58 153 58 169 58 184 58 199 58 215 58 230 58 246 59 5 59 21 59 36 59 52 59 67 59 83 59 98 59 114 59 129 59 145 59 160 59 176 59 192 59 207 59 223 59 238 59 254 60 14 60 29 60 45 60 60 60 76 60 92 60 107 60 123 60 139 60 155 60 170 60 186 60 202 60 217 60 233 60 249 61 9 61 25 61 40 61 56 61 72 61 88 61 104 61 119 61 135 61 151 61 167 61 183 61 199 61 215 61 231 61 246 62 6 62 22 62 38 62 54 62 70 62 86 62 102 62 118 62 134 62 150 62 166 62 182 62 198 62 214 62 230 62 246 63 6 63 22 63 38 63 55 63 71 63 87 63 103 63 119 63 135 63 151 63 168 63 184 63 200 63 216 63 232 63 248 64 9 64 25 64 41 64 57 64 74 64 90 64 106 64 122 64 139 64 155 64 171 64 188 64 204 64 220 64 237 64 253 65 13 65 30 65 46 65 63 65 79 65 95 65 112 65 128 65 145 65 161 65 178 65 194 65 211 65 227 65 244 66 4 66 21 66 37 66 54 66 70 66 87 66 103 66 120 66 136 66 153 66 170 66 186 66 203 66 220 66 236 66 253 67 14 67 30 67 47 67 64 67 80 67 97 67 114 67 130 67 147 67 164 67 181 67 197 67 214 67 231 67 248 68 9 68 25 68 42 68 59 68 76 68 93 68 110 68 126 68 143 68 160 68 177 68 194 68 211 68 228 68 245 69 6 69 23 69 40 69 57 69 74 69 91 69 108 69 125 69 142 69 159 69 176 69 193 69 210 69 227 69 244 70 5 70 22 70 39 70 56 70 73 70 91 70 108 70 125 70 142 70 159 70 176 70 194 70 211 70 228 70 245 71 6 71 24 71 41 71 58 71 75 71 93 71 110 71 127 71 145 71 162 71 179 71 197 71 214 71 231 71 249 72 10 72 27 72 45 72 62 72 80 72 97 72 114 72 132 72 149 72 167 72 184 72 202 72 219 72 237 72 254 73 16 73 33 73 51 73 68 73 86 73 103 73 121 73 139 73 156 73 174 73 191 73 209 73 227 73 244 74 6 74 24 74 41 74 59 74 77 74 94 74 112 74 130 74 147 74 165 74 183 74 201 74 218 74 236 74 254 75 16 75 34 75 51 75 69 75 87 75 105 75 123 75 141 75 159 75 176 75 194 75 212 75 230 75 248 76 10 76 28 76 46 76 64 76 82 76 100 76 118 76 136 76 154 76 172 76 190 76 208 76 226 76 244 77 6 77 24 77 42 77 60 77 78 77 96 77 115 77 133 77 151 77 169 77 187 77 205 77 223 77 242 78 4 78 22 78 40 78 59 78 77 78 95 78 113 78 132 78 150 78 168 78 186 78 205 78 223 78 241 79 4 79 22 79 40 79 59 79 77 79 95 79 114 79 132 79 151 79 169 79 188 79 206 79 224 79 243 80 5 80 24 80 42 80 61 80 79 80 98 80 116 80 135 80 153 80 172 80 191 80 209 80 228 80 246 81 9 81 28 81 46 81 65 81 83 81 102 81 121 81 139 81 158 81 177 81 196 81 214 81 233 81 252 82 14 82 33 82 52 82 71 82 90 82 108 82 127 82 146 82 165 82 184 82 202 82 221 82 240 83 3 83 22 83 41 83 60 83 79 83 97 83 116 83 135 83 154 83 173 83 192 83 211 83 230 83 249 84 12 84 31 84 50 84 69 84 88 84 107 84 126 84 146 84 165 84 184 84 203 84 222 84 241 85 4 85 23 85 42 85 62 85 81 85 100 85 119 85 138 85 158 85 177 85 196 85 215 85 235 85 254 86 17 86 36 86 56 86 75 86 94 86 114 86 133 86 152 86 172 86 191 86 210 86 230 86 249 87 13 87 32 87 51 87 71 87 90 87 110 87 129 87 149 87 168 87 188 87 207 87 227 87 246 88 10 88 29 88 49 88 68 88 88 88 107 88 127 88 147 88 166 88 186 88 205 88 225 88 245 89 8 89 28 89 48 89 67 89 87 89 107 89 127 89 146 89 166 89 186 89 206 89 225 89 245 90 9 90 29 90 48 90 68 90 88 90 108 90 128 90 148 90 167 90 187 90 207 90 227 90 247 91 11 91 31 91 51 91 71 91 91 91 111 91 131 91 151 91 171 91 191 91 211 91 231 91 251 92 15 92 35 92 55 92 75 92 95 92 115 92 135 92 155 92 175 92 196 92 216 92 236 93 0 93 20 93 40 93 61 93 81 93 101 93 121 93 141 93 162 93 182 93 202 93 222 93 243 94 7 94 27 94 48 94 68 94 88 94 109 94 129 94 149 94 170 94 190 94 211 94 231 94 251 95 16 95 36 95 57 95 77 95 98 95 118 95 139 95 159 95 180 95 200 95 221 95 241 96 6 96 26 96 47 96 67 96 88 96 108 96 129 96 150 96 170 96 191 96 212 96 232 96 253 97 18 97 38 97 59 97 80 97 100 97 121 97 142 97 163 97 183 97 204 97 225 97 246 98 10 98 31 98 52 98 73 98 94 98 115 98 135 98 156 98 177 98 198 98 219 98 240 99 5 99 26 99 47 99 68 99 89 99 109 99 130 99 151 99 172 99 193 99 214 99 235 100 1 100 22 100 43 100 64 100 85 100 106 100 127 100 148 100 169 100 190 100 211 100 233 100 254 101 19 101 40 101 61 101 82 101 104 101 125 101 146 101 167 101 189 101 210 101 231 101 252 102 18 102 39 102 60 102 82 102 103 102 124 102 146 102 167 102 188 102 210 102 231 102 253 103 18 103 39 103 61 103 82 103 104 103 125 103 147 103 168 103 190 103 211 103 233 103 254 104 20 104 41 104 63 104 84 104 106 104 127 104 149 104 171 104 192 104 214 104 235 105 1 105 23 105 44 105 66 105 88 105 110 105 131 105 153 105 175 105 196 105 218 105 240 106 6 106 27 106 49 106 71 106 93 106 115 106 136 106 158 106 180 106 202 106 224 106 246 107 12 107 34 107 55 107 77 107 99 107 121 107 143 107 165 107 187 107 209 107 231 107 253 108 19 108 41 108 63 108 85 108 107 108 129 108 151 108 173 108 196 108 218 108 240 109 6 109 28 109 50 109 72 109 94 109 117 109 139 109 161 109 183 109 205 109 228 109 250 110 16 110 38 110 61 110 83 110 105 110 127 110 150 110 172 110 194 110 217 110 239 111 5 111 28 111 50 111 73 111 95 111 117 111 140 111 162 111 185 111 207 111 230 111 252 112 19 112 41 112 64 112 86 112 109 112 131 112 154 112 176 112 199 112 221 112 244 113 11 113 33 113 56 113 78 113 101 113 124 113 146 113 169 113 192 113 214 113 237 114 4 114 27 114 49 114 72 114 95 114 117 114 140 114 163 114 186 114 209 114 231 114 254 115 21 115 44 115 67 115 90 115 113 115 135 115 158 115 181 115 204 115 227 115 250 116 17 116 40 116 63 116 86 116 109 116 132 116 155 116 178 116 201 116 224 116 247 117 14 117 37 117 60 117 83 117 106 117 129 117 153 117 176 117 199 117 222 117 245 118 12 118 36 118 59 118 82 118 105 118 128 118 152 118 175 118 198 118 221 118 245 119 12 119 35 119 59 119 82 119 105 119 129 119 152 119 175 119 199 119 222 119 245 120 13 120 36 120 60 120 83 120 106 120 130 120 153 120 177 120 200 120 224 120 247 121 15 121 38 121 62 121 85 121 109 121 133 121 156 121 180 121 203 121 227 121 251 122 18 122 42 122 66 122 89 122 113 122 137 122 160 122 184 122 208 122 231 122 255 123 23 123 47 123 70 123 94 123 118 123 142 123 166 123 189 123 213 123 237 124 5 124 29 124 53 124 76 124 100 124 124 124 148 124 172 124 196 124 220 124 244 125 12 125 36 125 60 125 84 125 108 125 132 125 156 125 180 125 204 125 228 125 252 126 20 126 44 126 68 126 93 126 117 126 141 126 165 126 189 126 213 126 237 127 6 127 30 127 54 127 78 127 102 127 127 127 151 127 175 127 199 127 224 127 248 128 16 128 41 128 65 128 89 128 114 128 138 128 162 128 187 128 211 128 236 129 4 129 28 129 53 129 77 129 102 129 126 129 151 129 175 129 200 129 224 129 249 130 17 130 42 130 66 130 91 130 115 130 140 130 164 130 189 130 214 130 238 131 7 131 32 131 56 131 81 131 105 131 130 131 155 131 180 131 204 131 229 131 254 132 22 132 47 132 72 132 97 132 122 132 146 132 171 132 196 132 221 132 246 133 14 133 39 133 64 133 89 133 114 133 139 133 164 133 189 133 214 133 239 134 8 134 33 134 57 134 82 134 107 134 132 134 158 134 183 134 208 134 233 135 2 135 27 135 52 135 77 135 102 135 127 135 152 135 177 135 203 135 228 135 253 136 22 136 47 136 72 136 98 136 123 136 148 136 173 136 199 136 224 136 249 137 18 137 44 137 69 137 94 137 120 137 145 137 170 137 196 137 221 137 246 138 16 138 41 138 67 138 92 138 117 138 143 138 168 138 194 138 219 138 245 139 14 139 40 139 65 139 91 139 116 139 142 139 168 139 193 139 219 139 244 140 14 140 39 140 65 140 91 140 116 140 142 140 168 140 193 140 219 140 245 141 14 141 40 141 66 141 92 141 117 141 143 141 169 141 195 141 221 141 246 142 16 142 42 142 68 142 94 142 120 142 145 142 171 142 197 142 223 142 249 143 19 143 45 143 71 143 97 143 123 143 149 143 175 143 201 143 227 143 253 144 23 144 49 144 75 144 101 144 127 144 153 144 179 144 205 144 231 145 2 145 28 145 54 145 80 145 106 145 132 145 159 145 185 145 211 145 237 146 7 146 34 146 60 146 86 146 112 146 139 146 165 146 191 146 218 146 244 147 14 147 41 147 67 147 93 147 120 147 146 147 173 147 199 147 225 147 252 148 22 148 49 148 75 148 102 148 128 148 155 148 181 148 208 148 234 149 5 149 31 149 58 149 85 149 111 149 138 149 164 149 191 149 218 149 244 150 15 150 42 150 68 150 95 150 122 150 148 150 175 150 202 150 229 150 255 151 26 151 53 151 80 151 106 151 133 151 160 151 187 151 214 151 241 152 11 152 38 152 65 152 92 152 119 152 146 152 173 152 200 152 227 152 254 153 25 153 52 153 79 153 106 153 133 153 160 153 187 153 214 153 241 154 12 154 39 154 66 154 93 154 120 154 147 154 174 154 202 154 229 155 0 155 27 155 54 155 81 155 109 155 136 155 163 155 190 155 218 155 245 156 16 156 43 156 71 156 98 156 125 156 153 156 180 156 207 156 235 157 6 157 33 157 61 157 88 157 116 157 143 157 171 157 198 157 225 157 253 158 24 158 52 158 79 158 107 158 134 158 162 158 189 158 217 158 245 159 16 159 44 159 71 159 99 159 127 159 154 159 182 159 210 159 237 160 9 160 37 160 64 160 92 160 120 160 147 160 175 160 203 160 231 161 2 161 30 161 58 161 86 161 114 161 141 161 169 161 197 161 225 161 253 162 25 162 53 162 81 162 108 162 136 162 164 162 192 162 220 162 248 163 20 163 48 163 76 163 104 163 132 163 160 163 188 163 216 163 244 164 17 164 45 164 73 164 101 164 129 164 157 164 185 164 213 164 242 165 14 165 42 165 70 165 98 165 127 165 155 165 183 165 211 165 240 166 12 166 40 166 68 166 97 166 125 166 153 166 182 166 210 166 238 167 11 167 39 167 68 167 96 167 124 167 153 167 181 167 210 167 238 168 11 168 39 168 68 168 96 168 125 168 153 168 182 168 210 168 239 169 11 169 40 169 69 169 97 169 126 169 154 169 183 169 212 169 240 170 13 170 42 170 70 170 99 170 128 170 157 170 185 170 214 170 243 171 16 171 44 171 73 171 102 171 131 171 160 171 188 171 217 171 246 172 19 172 48 172 77 172 106 172 135 172 164 172 193 172 221 172 250 173 23 173 52 173 81 173 110 173 139 173 168 173 197 173 227 174 0 174 29 174 58 174 87 174 116 174 145 174 174 174 203 174 232 175 6 175 35 175 64 175 93 175 122 175 152 175 181 175 210 175 239 176 13 176 42 176 71 176 100 176 130 176 159 176 188 176 218 176 247 177 20 177 50 177 79 177 108 177 138 177 167 177 197 177 226 178 0 178 29 178 59 178 88 178 118 178 147 178 177 178 206 178 236 179 9 179 39 179 68 179 98 179 127 179 157 179 187 179 216 179 246 180 20 180 49 180 79 180 109 180 138 180 168 180 198 180 227 181 1 181 31 181 61 181 90 181 120 181 150 181 180 181 210 181 239 182 13 182 43 182 73 182 103 182 133 182 163 182 193 182 222 182 252 183 26 183 56 183 86 183 116 183 146 183 176 183 206 183 236 184 10 184 40 184 70 184 100 184 130 184 160 184 191 184 221 184 251 185 25 185 55 185 85 185 115 185 146 185 176 185 206 185 236 186 10 186 41 186 71 186 101 186 131 186 162 186 192 186 222 186 252 187 27 187 57 187 87 187 118 187 148 187 179 187 209 187 239 188 14 188 44 188 75 188 105 188 135 188 166 188 196 188 227 189 1 189 32 189 62 189 93 189 123 189 154 189 185 189 215 189 246 190 20 190 51 190 82 190 112 190 143 190 173 190 204 190 235 191 10 191 40 191 71 191 102 191 132 191 163 191 194 191 225 191 255 192 30 192 61 192 92 192 123 192 153 192 184 192 215 192 246 193 21 193 52 193 83 193 114 193 145 193 175 193 206 193 237 194 12 194 43 194 74 194 105 194 136 194 167 194 198 194 229 195 4 195 36 195 67 195 98 195 129 195 160 195 191 195 222 195 253 196 29 196 60 196 91 196 122 196 153 196 184 196 216 196 247 197 22 197 53 197 85 197 116 197 147 197 179 197 210 197 241 198 17 198 48 198 79 198 111 198 142 198 173 198 205 198 236 199 12 199 43 199 75 199 106 199 138 199 169 199 201 199 232 200 8 200 39 200 71 200 102 200 134 200 165 200 197 200 229 201 4 201 36 201 67 201 99 201 131 201 162 201 194 201 226 202 1 202 33 202 65 202 97 202 128 202 160 202 192 202 224 203 0 203 31 203 63 203 95 203 127 203 159 203 191 203 222 203 254 204 30 204 62 204 94 204 126 204 158 204 190 204 222 204 254 205 30 205 62 205 94 205 126 205 158 205 190 205 222 205 254 206 30 206 62 206 94 206 126 206 158 206 191 206 223 206 255 207 31 207 63 207 95 207 128 207 160 207 192 207 224 208 1 208 33 208 65 208 97 208 130 208 162 208 194 208 227 209 3 209 35 209 68 209 100 209 132 209 165 209 197 209 230 210 6 210 39 210 71 210 103 210 136 210 168 210 201 210 233 211 10 211 42 211 75 211 108 211 140 211 173 211 205 211 238 212 15 212 47 212 80 212 112 212 145 212 178 212 210 212 243 213 20 213 53 213 85 213 118 213 151 213 184 213 216 213 249 214 26 214 59 214 92 214 124 214 157 214 190 214 223 215 0 215 33 215 66 215 99 215 131 215 164 215 197 215 230 216 7 216 40 216 73 216 106 216 139 216 172 216 205 216 238 217 15 217 48 217 82 217 115 217 148 217 181 217 214 217 247 218 24 218 57 218 91 218 124 218 157 218 190 218 223 219 1 219 34 219 67 219 100 219 134 219 167 219 200 219 234 220 11 220 44 220 78 220 111 220 144 220 178 220 211 220 245 221 22 221 55 221 89 221 122 221 156 221 189 221 223 222 0 222 34 222 67 222 101 222 134 222 168 222 201 222 235 223 13 223 46 223 80 223 113 223 147 223 181 223 214 223 248 224 26 224 59 224 93 224 127 224 161 224 194 224 228 225 6 225 40 225 73 225 107 225 141 225 175 225 209 225 242 226 20 226 54 226 88 226 122 226 156 226 190 226 224 227 2 227 36 227 70 227 104 227 138 227 171 227 206 227 240 228 18 228 52 228 86 228 120 228 154 228 188 228 222 229 0 229 34 229 68 229 102 229 137 229 171 229 205 229 239 230 17 230 52 230 86 230 120 230 154 230 189 230 223 231 1 231 35 231 70 231 104 231 138 231 173 231 207 231 241 232 20 232 54 232 89 232 123 232 157 232 192 232 226 233 5 233 39 233 74 233 108 233 143 233 177 233 212 233 246 234 25 234 59 234 94 234 129 234 163 234 198 234 232 235 11 235 46 235 80 235 115 235 150 235 184 235 219 235 254 236 32 236 67 236 102 236 137 236 171 236 206 236 241 237 20 237 55 237 90 237 124 237 159 237 194 237 229 238 8 238 43 238 78 238 113 238 148 238 182 238 217 238 252 239 31 239 66 239 101 239 136 239 171 239 206 239 241 240 21 240 56 240 91 240 126 240 161 240 196 240 231 241 10 241 45 241 81 241 116 241 151 241 186 241 221 242 1 242 36 242 71 242 106 242 142 242 177 242 212 242 248 243 27 243 62 243 98 243 133 243 168 243 204 243 239 244 18 244 54 244 89 244 125 244 160 244 196 244 231 245 11 245 46 245 82 245 117 245 153 245 188 245 224 246 3 246 39 246 74 246 110 246 146 246 181 246 217 246 253 247 32 247 68 247 104 247 139 247 175 247 211 247 246 248 26 248 62 248 98 248 134 248 169 248 205 248 241 249 21 249 57 249 92 249 128 249 164 249 200 249 236 250 16 250 52 250 88 250 124 250 160 250 196 250 232 251 11 251 47 251 84 251 120 251 156 251 192 251 228 252 8 252 44 252 80 252 116 252 152 252 188 252 224 253 5 253 41 253 77 253 113 253 149 253 186 253 222 254 2 254 38 254 74 254 111 254 147 254 183 254 220 255 0 255 36 255 73 255 109 255 145 255 182 255 218 255 255 "
			{
				var entry = structure.GetEntry (0, (ushort)IFDEntryTag.ICCProfile);
				Assert.IsNotNull (entry, "Entry 0x8773 missing in IFD 0");
				Assert.IsNotNull (entry as UndefinedIFDEntry, "Entry is not an undefined IFD entry!");
				var bytes = new byte[] { 0, 0, 33, 188, 78, 75, 79, 78, 2, 32, 0, 0, 109, 110, 116, 114, 82, 71, 66, 32, 88, 89, 90, 32, 7, 210, 0, 10, 0, 25, 0, 13, 0, 32, 0, 16, 97, 99, 115, 112, 65, 80, 80, 76, 0, 0, 0, 0, 110, 111, 110, 101, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 246, 214, 0, 1, 0, 0, 0, 0, 211, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 100, 101, 115, 99, 0, 0, 0, 240, 0, 0, 0, 67, 114, 88, 89, 90, 0, 0, 1, 52, 0, 0, 0, 20, 103, 88, 89, 90, 0, 0, 1, 72, 0, 0, 0, 20, 98, 88, 89, 90, 0, 0, 1, 92, 0, 0, 0, 20, 119, 116, 112, 116, 0, 0, 1, 112, 0, 0, 0, 20, 99, 112, 114, 116, 0, 0, 1, 132, 0, 0, 0, 44, 114, 84, 82, 67, 0, 0, 1, 176, 0, 0, 32, 12, 103, 84, 82, 67, 0, 0, 1, 176, 0, 0, 32, 12, 98, 84, 82, 67, 0, 0, 1, 176, 0, 0, 32, 12, 100, 101, 115, 99, 0, 0, 0, 0, 0, 0, 0, 22, 78, 105, 107, 111, 110, 32, 115, 82, 71, 66, 32, 52, 46, 48, 46, 48, 46, 51, 48, 48, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 78, 105, 107, 111, 110, 32, 115, 82, 71, 66, 32, 52, 46, 48, 46, 48, 46, 51, 48, 48, 49, 0, 0, 88, 89, 90, 32, 0, 0, 0, 0, 0, 0, 111, 162, 0, 0, 56, 246, 0, 0, 3, 144, 88, 89, 90, 32, 0, 0, 0, 0, 0, 0, 98, 148, 0, 0, 183, 133, 0, 0, 24, 217, 88, 89, 90, 32, 0, 0, 0, 0, 0, 0, 36, 159, 0, 0, 15, 132, 0, 0, 182, 200, 88, 89, 90, 32, 0, 0, 0, 0, 0, 0, 243, 84, 0, 1, 0, 0, 0, 1, 22, 207, 116, 101, 120, 116, 0, 0, 0, 0, 78, 105, 107, 111, 110, 32, 73, 110, 99, 46, 32, 38, 32, 78, 105, 107, 111, 110, 32, 67, 111, 114, 112, 111, 114, 97, 116, 105, 111, 110, 32, 50, 48, 48, 50, 0, 99, 117, 114, 118, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 6, 0, 7, 0, 8, 0, 9, 0, 11, 0, 12, 0, 13, 0, 14, 0, 16, 0, 17, 0, 18, 0, 19, 0, 21, 0, 22, 0, 23, 0, 24, 0, 26, 0, 27, 0, 28, 0, 29, 0, 30, 0, 32, 0, 33, 0, 34, 0, 35, 0, 37, 0, 38, 0, 39, 0, 40, 0, 42, 0, 43, 0, 44, 0, 45, 0, 47, 0, 48, 0, 49, 0, 50, 0, 52, 0, 53, 0, 54, 0, 55, 0, 56, 0, 58, 0, 59, 0, 60, 0, 61, 0, 63, 0, 64, 0, 65, 0, 66, 0, 68, 0, 69, 0, 70, 0, 71, 0, 73, 0, 74, 0, 75, 0, 76, 0, 78, 0, 79, 0, 80, 0, 81, 0, 82, 0, 84, 0, 85, 0, 86, 0, 87, 0, 89, 0, 90, 0, 91, 0, 92, 0, 94, 0, 95, 0, 96, 0, 97, 0, 99, 0, 100, 0, 101, 0, 102, 0, 104, 0, 105, 0, 106, 0, 107, 0, 109, 0, 110, 0, 111, 0, 112, 0, 113, 0, 115, 0, 116, 0, 117, 0, 118, 0, 120, 0, 121, 0, 122, 0, 123, 0, 125, 0, 126, 0, 127, 0, 128, 0, 130, 0, 131, 0, 132, 0, 133, 0, 135, 0, 136, 0, 137, 0, 138, 0, 139, 0, 141, 0, 142, 0, 143, 0, 144, 0, 146, 0, 147, 0, 148, 0, 149, 0, 151, 0, 152, 0, 153, 0, 154, 0, 156, 0, 157, 0, 158, 0, 159, 0, 161, 0, 162, 0, 163, 0, 164, 0, 165, 0, 167, 0, 168, 0, 169, 0, 170, 0, 172, 0, 173, 0, 174, 0, 175, 0, 177, 0, 178, 0, 179, 0, 180, 0, 182, 0, 183, 0, 184, 0, 185, 0, 187, 0, 188, 0, 189, 0, 190, 0, 191, 0, 193, 0, 194, 0, 195, 0, 196, 0, 198, 0, 199, 0, 200, 0, 201, 0, 203, 0, 204, 0, 205, 0, 206, 0, 208, 0, 209, 0, 210, 0, 211, 0, 213, 0, 214, 0, 215, 0, 217, 0, 218, 0, 219, 0, 221, 0, 222, 0, 223, 0, 225, 0, 226, 0, 227, 0, 229, 0, 230, 0, 231, 0, 233, 0, 234, 0, 235, 0, 237, 0, 238, 0, 239, 0, 241, 0, 242, 0, 244, 0, 245, 0, 246, 0, 248, 0, 249, 0, 251, 0, 252, 0, 254, 0, 255, 1, 0, 1, 2, 1, 3, 1, 5, 1, 6, 1, 8, 1, 9, 1, 11, 1, 12, 1, 13, 1, 15, 1, 16, 1, 18, 1, 19, 1, 21, 1, 22, 1, 24, 1, 25, 1, 27, 1, 29, 1, 30, 1, 32, 1, 33, 1, 35, 1, 36, 1, 38, 1, 39, 1, 41, 1, 42, 1, 44, 1, 46, 1, 47, 1, 49, 1, 50, 1, 52, 1, 54, 1, 55, 1, 57, 1, 58, 1, 60, 1, 62, 1, 63, 1, 65, 1, 67, 1, 68, 1, 70, 1, 71, 1, 73, 1, 75, 1, 76, 1, 78, 1, 80, 1, 81, 1, 83, 1, 85, 1, 87, 1, 88, 1, 90, 1, 92, 1, 93, 1, 95, 1, 97, 1, 99, 1, 100, 1, 102, 1, 104, 1, 106, 1, 107, 1, 109, 1, 111, 1, 113, 1, 114, 1, 116, 1, 118, 1, 120, 1, 122, 1, 123, 1, 125, 1, 127, 1, 129, 1, 131, 1, 132, 1, 134, 1, 136, 1, 138, 1, 140, 1, 142, 1, 144, 1, 145, 1, 147, 1, 149, 1, 151, 1, 153, 1, 155, 1, 157, 1, 159, 1, 160, 1, 162, 1, 164, 1, 166, 1, 168, 1, 170, 1, 172, 1, 174, 1, 176, 1, 178, 1, 180, 1, 182, 1, 184, 1, 186, 1, 188, 1, 190, 1, 192, 1, 194, 1, 196, 1, 198, 1, 200, 1, 202, 1, 204, 1, 206, 1, 208, 1, 210, 1, 212, 1, 214, 1, 216, 1, 218, 1, 220, 1, 222, 1, 224, 1, 226, 1, 228, 1, 230, 1, 232, 1, 234, 1, 237, 1, 239, 1, 241, 1, 243, 1, 245, 1, 247, 1, 249, 1, 251, 1, 254, 2, 0, 2, 2, 2, 4, 2, 6, 2, 8, 2, 10, 2, 13, 2, 15, 2, 17, 2, 19, 2, 21, 2, 24, 2, 26, 2, 28, 2, 30, 2, 32, 2, 35, 2, 37, 2, 39, 2, 41, 2, 44, 2, 46, 2, 48, 2, 50, 2, 53, 2, 55, 2, 57, 2, 60, 2, 62, 2, 64, 2, 67, 2, 69, 2, 71, 2, 73, 2, 76, 2, 78, 2, 80, 2, 83, 2, 85, 2, 87, 2, 90, 2, 92, 2, 95, 2, 97, 2, 99, 2, 102, 2, 104, 2, 107, 2, 109, 2, 111, 2, 114, 2, 116, 2, 119, 2, 121, 2, 123, 2, 126, 2, 128, 2, 131, 2, 133, 2, 136, 2, 138, 2, 141, 2, 143, 2, 146, 2, 148, 2, 151, 2, 153, 2, 156, 2, 158, 2, 161, 2, 163, 2, 166, 2, 168, 2, 171, 2, 173, 2, 176, 2, 178, 2, 181, 2, 184, 2, 186, 2, 189, 2, 191, 2, 194, 2, 196, 2, 199, 2, 202, 2, 204, 2, 207, 2, 209, 2, 212, 2, 215, 2, 217, 2, 220, 2, 223, 2, 225, 2, 228, 2, 231, 2, 233, 2, 236, 2, 239, 2, 241, 2, 244, 2, 247, 2, 249, 2, 252, 2, 255, 3, 2, 3, 4, 3, 7, 3, 10, 3, 13, 3, 15, 3, 18, 3, 21, 3, 24, 3, 26, 3, 29, 3, 32, 3, 35, 3, 38, 3, 40, 3, 43, 3, 46, 3, 49, 3, 52, 3, 54, 3, 57, 3, 60, 3, 63, 3, 66, 3, 69, 3, 72, 3, 74, 3, 77, 3, 80, 3, 83, 3, 86, 3, 89, 3, 92, 3, 95, 3, 98, 3, 100, 3, 103, 3, 106, 3, 109, 3, 112, 3, 115, 3, 118, 3, 121, 3, 124, 3, 127, 3, 130, 3, 133, 3, 136, 3, 139, 3, 142, 3, 145, 3, 148, 3, 151, 3, 154, 3, 157, 3, 160, 3, 163, 3, 166, 3, 169, 3, 172, 3, 175, 3, 178, 3, 182, 3, 185, 3, 188, 3, 191, 3, 194, 3, 197, 3, 200, 3, 203, 3, 206, 3, 209, 3, 213, 3, 216, 3, 219, 3, 222, 3, 225, 3, 228, 3, 232, 3, 235, 3, 238, 3, 241, 3, 244, 3, 247, 3, 251, 3, 254, 4, 1, 4, 4, 4, 8, 4, 11, 4, 14, 4, 17, 4, 21, 4, 24, 4, 27, 4, 30, 4, 34, 4, 37, 4, 40, 4, 43, 4, 47, 4, 50, 4, 53, 4, 57, 4, 60, 4, 63, 4, 67, 4, 70, 4, 73, 4, 77, 4, 80, 4, 84, 4, 87, 4, 90, 4, 94, 4, 97, 4, 100, 4, 104, 4, 107, 4, 111, 4, 114, 4, 117, 4, 121, 4, 124, 4, 128, 4, 131, 4, 135, 4, 138, 4, 142, 4, 145, 4, 149, 4, 152, 4, 156, 4, 159, 4, 163, 4, 166, 4, 170, 4, 173, 4, 177, 4, 180, 4, 184, 4, 187, 4, 191, 4, 194, 4, 198, 4, 202, 4, 205, 4, 209, 4, 212, 4, 216, 4, 219, 4, 223, 4, 227, 4, 230, 4, 234, 4, 238, 4, 241, 4, 245, 4, 249, 4, 252, 5, 0, 5, 4, 5, 7, 5, 11, 5, 15, 5, 18, 5, 22, 5, 26, 5, 29, 5, 33, 5, 37, 5, 41, 5, 44, 5, 48, 5, 52, 5, 56, 5, 59, 5, 63, 5, 67, 5, 71, 5, 74, 5, 78, 5, 82, 5, 86, 5, 90, 5, 93, 5, 97, 5, 101, 5, 105, 5, 109, 5, 113, 5, 116, 5, 120, 5, 124, 5, 128, 5, 132, 5, 136, 5, 140, 5, 144, 5, 147, 5, 151, 5, 155, 5, 159, 5, 163, 5, 167, 5, 171, 5, 175, 5, 179, 5, 183, 5, 187, 5, 191, 5, 195, 5, 199, 5, 203, 5, 207, 5, 211, 5, 215, 5, 219, 5, 223, 5, 227, 5, 231, 5, 235, 5, 239, 5, 243, 5, 247, 5, 251, 5, 255, 6, 3, 6, 7, 6, 12, 6, 16, 6, 20, 6, 24, 6, 28, 6, 32, 6, 36, 6, 40, 6, 44, 6, 49, 6, 53, 6, 57, 6, 61, 6, 65, 6, 69, 6, 74, 6, 78, 6, 82, 6, 86, 6, 90, 6, 95, 6, 99, 6, 103, 6, 107, 6, 112, 6, 116, 6, 120, 6, 124, 6, 129, 6, 133, 6, 137, 6, 142, 6, 146, 6, 150, 6, 154, 6, 159, 6, 163, 6, 167, 6, 172, 6, 176, 6, 180, 6, 185, 6, 189, 6, 193, 6, 198, 6, 202, 6, 207, 6, 211, 6, 215, 6, 220, 6, 224, 6, 229, 6, 233, 6, 237, 6, 242, 6, 246, 6, 251, 6, 255, 7, 4, 7, 8, 7, 13, 7, 17, 7, 22, 7, 26, 7, 31, 7, 35, 7, 40, 7, 44, 7, 49, 7, 53, 7, 58, 7, 62, 7, 67, 7, 71, 7, 76, 7, 81, 7, 85, 7, 90, 7, 94, 7, 99, 7, 104, 7, 108, 7, 113, 7, 117, 7, 122, 7, 127, 7, 131, 7, 136, 7, 141, 7, 145, 7, 150, 7, 155, 7, 159, 7, 164, 7, 169, 7, 173, 7, 178, 7, 183, 7, 188, 7, 192, 7, 197, 7, 202, 7, 207, 7, 211, 7, 216, 7, 221, 7, 226, 7, 230, 7, 235, 7, 240, 7, 245, 7, 250, 7, 254, 8, 3, 8, 8, 8, 13, 8, 18, 8, 23, 8, 27, 8, 32, 8, 37, 8, 42, 8, 47, 8, 52, 8, 57, 8, 62, 8, 67, 8, 71, 8, 76, 8, 81, 8, 86, 8, 91, 8, 96, 8, 101, 8, 106, 8, 111, 8, 116, 8, 121, 8, 126, 8, 131, 8, 136, 8, 141, 8, 146, 8, 151, 8, 156, 8, 161, 8, 166, 8, 171, 8, 176, 8, 181, 8, 186, 8, 191, 8, 197, 8, 202, 8, 207, 8, 212, 8, 217, 8, 222, 8, 227, 8, 232, 8, 237, 8, 243, 8, 248, 8, 253, 9, 2, 9, 7, 9, 12, 9, 18, 9, 23, 9, 28, 9, 33, 9, 38, 9, 44, 9, 49, 9, 54, 9, 59, 9, 65, 9, 70, 9, 75, 9, 80, 9, 86, 9, 91, 9, 96, 9, 102, 9, 107, 9, 112, 9, 117, 9, 123, 9, 128, 9, 133, 9, 139, 9, 144, 9, 149, 9, 155, 9, 160, 9, 166, 9, 171, 9, 176, 9, 182, 9, 187, 9, 193, 9, 198, 9, 203, 9, 209, 9, 214, 9, 220, 9, 225, 9, 231, 9, 236, 9, 242, 9, 247, 9, 252, 10, 2, 10, 7, 10, 13, 10, 18, 10, 24, 10, 30, 10, 35, 10, 41, 10, 46, 10, 52, 10, 57, 10, 63, 10, 68, 10, 74, 10, 80, 10, 85, 10, 91, 10, 96, 10, 102, 10, 108, 10, 113, 10, 119, 10, 125, 10, 130, 10, 136, 10, 142, 10, 147, 10, 153, 10, 159, 10, 164, 10, 170, 10, 176, 10, 181, 10, 187, 10, 193, 10, 199, 10, 204, 10, 210, 10, 216, 10, 222, 10, 227, 10, 233, 10, 239, 10, 245, 10, 250, 11, 0, 11, 6, 11, 12, 11, 18, 11, 24, 11, 29, 11, 35, 11, 41, 11, 47, 11, 53, 11, 59, 11, 65, 11, 70, 11, 76, 11, 82, 11, 88, 11, 94, 11, 100, 11, 106, 11, 112, 11, 118, 11, 124, 11, 130, 11, 136, 11, 142, 11, 148, 11, 154, 11, 160, 11, 166, 11, 172, 11, 178, 11, 184, 11, 190, 11, 196, 11, 202, 11, 208, 11, 214, 11, 220, 11, 226, 11, 232, 11, 238, 11, 244, 11, 250, 12, 0, 12, 7, 12, 13, 12, 19, 12, 25, 12, 31, 12, 37, 12, 43, 12, 50, 12, 56, 12, 62, 12, 68, 12, 74, 12, 80, 12, 87, 12, 93, 12, 99, 12, 105, 12, 112, 12, 118, 12, 124, 12, 130, 12, 137, 12, 143, 12, 149, 12, 155, 12, 162, 12, 168, 12, 174, 12, 181, 12, 187, 12, 193, 12, 200, 12, 206, 12, 212, 12, 219, 12, 225, 12, 231, 12, 238, 12, 244, 12, 250, 13, 1, 13, 7, 13, 14, 13, 20, 13, 27, 13, 33, 13, 39, 13, 46, 13, 52, 13, 59, 13, 65, 13, 72, 13, 78, 13, 85, 13, 91, 13, 98, 13, 104, 13, 111, 13, 117, 13, 124, 13, 130, 13, 137, 13, 143, 13, 150, 13, 157, 13, 163, 13, 170, 13, 176, 13, 183, 13, 190, 13, 196, 13, 203, 13, 209, 13, 216, 13, 223, 13, 229, 13, 236, 13, 243, 13, 249, 14, 0, 14, 7, 14, 13, 14, 20, 14, 27, 14, 34, 14, 40, 14, 47, 14, 54, 14, 60, 14, 67, 14, 74, 14, 81, 14, 87, 14, 94, 14, 101, 14, 108, 14, 115, 14, 121, 14, 128, 14, 135, 14, 142, 14, 149, 14, 156, 14, 162, 14, 169, 14, 176, 14, 183, 14, 190, 14, 197, 14, 204, 14, 211, 14, 218, 14, 225, 14, 231, 14, 238, 14, 245, 14, 252, 15, 3, 15, 10, 15, 17, 15, 24, 15, 31, 15, 38, 15, 45, 15, 52, 15, 59, 15, 66, 15, 73, 15, 80, 15, 87, 15, 94, 15, 101, 15, 108, 15, 116, 15, 123, 15, 130, 15, 137, 15, 144, 15, 151, 15, 158, 15, 165, 15, 172, 15, 180, 15, 187, 15, 194, 15, 201, 15, 208, 15, 215, 15, 223, 15, 230, 15, 237, 15, 244, 15, 251, 16, 3, 16, 10, 16, 17, 16, 24, 16, 32, 16, 39, 16, 46, 16, 53, 16, 61, 16, 68, 16, 75, 16, 83, 16, 90, 16, 97, 16, 105, 16, 112, 16, 119, 16, 127, 16, 134, 16, 141, 16, 149, 16, 156, 16, 163, 16, 171, 16, 178, 16, 186, 16, 193, 16, 200, 16, 208, 16, 215, 16, 223, 16, 230, 16, 238, 16, 245, 16, 253, 17, 4, 17, 12, 17, 19, 17, 27, 17, 34, 17, 42, 17, 49, 17, 57, 17, 64, 17, 72, 17, 79, 17, 87, 17, 95, 17, 102, 17, 110, 17, 117, 17, 125, 17, 133, 17, 140, 17, 148, 17, 155, 17, 163, 17, 171, 17, 178, 17, 186, 17, 194, 17, 201, 17, 209, 17, 217, 17, 224, 17, 232, 17, 240, 17, 248, 17, 255, 18, 7, 18, 15, 18, 23, 18, 30, 18, 38, 18, 46, 18, 54, 18, 62, 18, 69, 18, 77, 18, 85, 18, 93, 18, 101, 18, 108, 18, 116, 18, 124, 18, 132, 18, 140, 18, 148, 18, 156, 18, 164, 18, 171, 18, 179, 18, 187, 18, 195, 18, 203, 18, 211, 18, 219, 18, 227, 18, 235, 18, 243, 18, 251, 19, 3, 19, 11, 19, 19, 19, 27, 19, 35, 19, 43, 19, 51, 19, 59, 19, 67, 19, 75, 19, 83, 19, 91, 19, 99, 19, 107, 19, 115, 19, 124, 19, 132, 19, 140, 19, 148, 19, 156, 19, 164, 19, 172, 19, 180, 19, 189, 19, 197, 19, 205, 19, 213, 19, 221, 19, 230, 19, 238, 19, 246, 19, 254, 20, 6, 20, 15, 20, 23, 20, 31, 20, 39, 20, 48, 20, 56, 20, 64, 20, 73, 20, 81, 20, 89, 20, 97, 20, 106, 20, 114, 20, 122, 20, 131, 20, 139, 20, 148, 20, 156, 20, 164, 20, 173, 20, 181, 20, 189, 20, 198, 20, 206, 20, 215, 20, 223, 20, 232, 20, 240, 20, 248, 21, 1, 21, 9, 21, 18, 21, 26, 21, 35, 21, 43, 21, 52, 21, 60, 21, 69, 21, 77, 21, 86, 21, 95, 21, 103, 21, 112, 21, 120, 21, 129, 21, 137, 21, 146, 21, 155, 21, 163, 21, 172, 21, 180, 21, 189, 21, 198, 21, 206, 21, 215, 21, 224, 21, 232, 21, 241, 21, 250, 22, 2, 22, 11, 22, 20, 22, 29, 22, 37, 22, 46, 22, 55, 22, 64, 22, 72, 22, 81, 22, 90, 22, 99, 22, 107, 22, 116, 22, 125, 22, 134, 22, 143, 22, 152, 22, 160, 22, 169, 22, 178, 22, 187, 22, 196, 22, 205, 22, 214, 22, 222, 22, 231, 22, 240, 22, 249, 23, 2, 23, 11, 23, 20, 23, 29, 23, 38, 23, 47, 23, 56, 23, 65, 23, 74, 23, 83, 23, 92, 23, 101, 23, 110, 23, 119, 23, 128, 23, 137, 23, 146, 23, 155, 23, 164, 23, 173, 23, 182, 23, 191, 23, 200, 23, 210, 23, 219, 23, 228, 23, 237, 23, 246, 23, 255, 24, 8, 24, 18, 24, 27, 24, 36, 24, 45, 24, 54, 24, 63, 24, 73, 24, 82, 24, 91, 24, 100, 24, 110, 24, 119, 24, 128, 24, 137, 24, 147, 24, 156, 24, 165, 24, 175, 24, 184, 24, 193, 24, 202, 24, 212, 24, 221, 24, 231, 24, 240, 24, 249, 25, 3, 25, 12, 25, 21, 25, 31, 25, 40, 25, 50, 25, 59, 25, 68, 25, 78, 25, 87, 25, 97, 25, 106, 25, 116, 25, 125, 25, 135, 25, 144, 25, 154, 25, 163, 25, 173, 25, 182, 25, 192, 25, 201, 25, 211, 25, 220, 25, 230, 25, 239, 25, 249, 26, 3, 26, 12, 26, 22, 26, 31, 26, 41, 26, 51, 26, 60, 26, 70, 26, 80, 26, 89, 26, 99, 26, 109, 26, 118, 26, 128, 26, 138, 26, 147, 26, 157, 26, 167, 26, 177, 26, 186, 26, 196, 26, 206, 26, 216, 26, 225, 26, 235, 26, 245, 26, 255, 27, 9, 27, 18, 27, 28, 27, 38, 27, 48, 27, 58, 27, 68, 27, 77, 27, 87, 27, 97, 27, 107, 27, 117, 27, 127, 27, 137, 27, 147, 27, 157, 27, 167, 27, 177, 27, 186, 27, 196, 27, 206, 27, 216, 27, 226, 27, 236, 27, 246, 28, 0, 28, 10, 28, 20, 28, 30, 28, 40, 28, 51, 28, 61, 28, 71, 28, 81, 28, 91, 28, 101, 28, 111, 28, 121, 28, 131, 28, 141, 28, 151, 28, 162, 28, 172, 28, 182, 28, 192, 28, 202, 28, 212, 28, 223, 28, 233, 28, 243, 28, 253, 29, 7, 29, 18, 29, 28, 29, 38, 29, 48, 29, 59, 29, 69, 29, 79, 29, 90, 29, 100, 29, 110, 29, 120, 29, 131, 29, 141, 29, 151, 29, 162, 29, 172, 29, 183, 29, 193, 29, 203, 29, 214, 29, 224, 29, 234, 29, 245, 29, 255, 30, 10, 30, 20, 30, 31, 30, 41, 30, 51, 30, 62, 30, 72, 30, 83, 30, 93, 30, 104, 30, 114, 30, 125, 30, 135, 30, 146, 30, 157, 30, 167, 30, 178, 30, 188, 30, 199, 30, 209, 30, 220, 30, 231, 30, 241, 30, 252, 31, 6, 31, 17, 31, 28, 31, 38, 31, 49, 31, 60, 31, 70, 31, 81, 31, 92, 31, 102, 31, 113, 31, 124, 31, 135, 31, 145, 31, 156, 31, 167, 31, 178, 31, 188, 31, 199, 31, 210, 31, 221, 31, 232, 31, 242, 31, 253, 32, 8, 32, 19, 32, 30, 32, 41, 32, 51, 32, 62, 32, 73, 32, 84, 32, 95, 32, 106, 32, 117, 32, 128, 32, 139, 32, 149, 32, 160, 32, 171, 32, 182, 32, 193, 32, 204, 32, 215, 32, 226, 32, 237, 32, 248, 33, 3, 33, 14, 33, 25, 33, 36, 33, 47, 33, 58, 33, 70, 33, 81, 33, 92, 33, 103, 33, 114, 33, 125, 33, 136, 33, 147, 33, 158, 33, 170, 33, 181, 33, 192, 33, 203, 33, 214, 33, 225, 33, 237, 33, 248, 34, 3, 34, 14, 34, 25, 34, 37, 34, 48, 34, 59, 34, 70, 34, 82, 34, 93, 34, 104, 34, 116, 34, 127, 34, 138, 34, 150, 34, 161, 34, 172, 34, 184, 34, 195, 34, 206, 34, 218, 34, 229, 34, 240, 34, 252, 35, 7, 35, 19, 35, 30, 35, 41, 35, 53, 35, 64, 35, 76, 35, 87, 35, 99, 35, 110, 35, 122, 35, 133, 35, 145, 35, 156, 35, 168, 35, 179, 35, 191, 35, 202, 35, 214, 35, 226, 35, 237, 35, 249, 36, 4, 36, 16, 36, 28, 36, 39, 36, 51, 36, 62, 36, 74, 36, 86, 36, 97, 36, 109, 36, 121, 36, 132, 36, 144, 36, 156, 36, 168, 36, 179, 36, 191, 36, 203, 36, 214, 36, 226, 36, 238, 36, 250, 37, 6, 37, 17, 37, 29, 37, 41, 37, 53, 37, 65, 37, 76, 37, 88, 37, 100, 37, 112, 37, 124, 37, 136, 37, 148, 37, 159, 37, 171, 37, 183, 37, 195, 37, 207, 37, 219, 37, 231, 37, 243, 37, 255, 38, 11, 38, 23, 38, 35, 38, 47, 38, 59, 38, 71, 38, 83, 38, 95, 38, 107, 38, 119, 38, 131, 38, 143, 38, 155, 38, 167, 38, 179, 38, 191, 38, 204, 38, 216, 38, 228, 38, 240, 38, 252, 39, 8, 39, 20, 39, 33, 39, 45, 39, 57, 39, 69, 39, 81, 39, 93, 39, 106, 39, 118, 39, 130, 39, 142, 39, 155, 39, 167, 39, 179, 39, 191, 39, 204, 39, 216, 39, 228, 39, 241, 39, 253, 40, 9, 40, 22, 40, 34, 40, 46, 40, 59, 40, 71, 40, 83, 40, 96, 40, 108, 40, 121, 40, 133, 40, 146, 40, 158, 40, 170, 40, 183, 40, 195, 40, 208, 40, 220, 40, 233, 40, 245, 41, 2, 41, 14, 41, 27, 41, 39, 41, 52, 41, 64, 41, 77, 41, 90, 41, 102, 41, 115, 41, 127, 41, 140, 41, 152, 41, 165, 41, 178, 41, 190, 41, 203, 41, 216, 41, 228, 41, 241, 41, 254, 42, 10, 42, 23, 42, 36, 42, 48, 42, 61, 42, 74, 42, 87, 42, 99, 42, 112, 42, 125, 42, 138, 42, 151, 42, 163, 42, 176, 42, 189, 42, 202, 42, 215, 42, 227, 42, 240, 42, 253, 43, 10, 43, 23, 43, 36, 43, 49, 43, 61, 43, 74, 43, 87, 43, 100, 43, 113, 43, 126, 43, 139, 43, 152, 43, 165, 43, 178, 43, 191, 43, 204, 43, 217, 43, 230, 43, 243, 44, 0, 44, 13, 44, 26, 44, 39, 44, 52, 44, 65, 44, 78, 44, 91, 44, 105, 44, 118, 44, 131, 44, 144, 44, 157, 44, 170, 44, 183, 44, 197, 44, 210, 44, 223, 44, 236, 44, 249, 45, 6, 45, 20, 45, 33, 45, 46, 45, 59, 45, 73, 45, 86, 45, 99, 45, 112, 45, 126, 45, 139, 45, 152, 45, 166, 45, 179, 45, 192, 45, 206, 45, 219, 45, 232, 45, 246, 46, 3, 46, 16, 46, 30, 46, 43, 46, 57, 46, 70, 46, 83, 46, 97, 46, 110, 46, 124, 46, 137, 46, 151, 46, 164, 46, 178, 46, 191, 46, 205, 46, 218, 46, 232, 46, 245, 47, 3, 47, 16, 47, 30, 47, 43, 47, 57, 47, 71, 47, 84, 47, 98, 47, 111, 47, 125, 47, 139, 47, 152, 47, 166, 47, 180, 47, 193, 47, 207, 47, 221, 47, 234, 47, 248, 48, 6, 48, 20, 48, 33, 48, 47, 48, 61, 48, 74, 48, 88, 48, 102, 48, 116, 48, 130, 48, 143, 48, 157, 48, 171, 48, 185, 48, 199, 48, 213, 48, 226, 48, 240, 48, 254, 49, 12, 49, 26, 49, 40, 49, 54, 49, 68, 49, 82, 49, 96, 49, 109, 49, 123, 49, 137, 49, 151, 49, 165, 49, 179, 49, 193, 49, 207, 49, 221, 49, 235, 49, 249, 50, 7, 50, 21, 50, 36, 50, 50, 50, 64, 50, 78, 50, 92, 50, 106, 50, 120, 50, 134, 50, 148, 50, 162, 50, 177, 50, 191, 50, 205, 50, 219, 50, 233, 50, 248, 51, 6, 51, 20, 51, 34, 51, 48, 51, 63, 51, 77, 51, 91, 51, 105, 51, 120, 51, 134, 51, 148, 51, 163, 51, 177, 51, 191, 51, 206, 51, 220, 51, 234, 51, 249, 52, 7, 52, 21, 52, 36, 52, 50, 52, 65, 52, 79, 52, 93, 52, 108, 52, 122, 52, 137, 52, 151, 52, 166, 52, 180, 52, 195, 52, 209, 52, 224, 52, 238, 52, 253, 53, 11, 53, 26, 53, 40, 53, 55, 53, 69, 53, 84, 53, 99, 53, 113, 53, 128, 53, 142, 53, 157, 53, 172, 53, 186, 53, 201, 53, 216, 53, 230, 53, 245, 54, 4, 54, 18, 54, 33, 54, 48, 54, 62, 54, 77, 54, 92, 54, 107, 54, 121, 54, 136, 54, 151, 54, 166, 54, 180, 54, 195, 54, 210, 54, 225, 54, 240, 54, 255, 55, 13, 55, 28, 55, 43, 55, 58, 55, 73, 55, 88, 55, 103, 55, 118, 55, 133, 55, 147, 55, 162, 55, 177, 55, 192, 55, 207, 55, 222, 55, 237, 55, 252, 56, 11, 56, 26, 56, 41, 56, 56, 56, 71, 56, 86, 56, 101, 56, 117, 56, 132, 56, 147, 56, 162, 56, 177, 56, 192, 56, 207, 56, 222, 56, 237, 56, 253, 57, 12, 57, 27, 57, 42, 57, 57, 57, 72, 57, 88, 57, 103, 57, 118, 57, 133, 57, 149, 57, 164, 57, 179, 57, 194, 57, 210, 57, 225, 57, 240, 58, 0, 58, 15, 58, 30, 58, 46, 58, 61, 58, 76, 58, 92, 58, 107, 58, 122, 58, 138, 58, 153, 58, 169, 58, 184, 58, 199, 58, 215, 58, 230, 58, 246, 59, 5, 59, 21, 59, 36, 59, 52, 59, 67, 59, 83, 59, 98, 59, 114, 59, 129, 59, 145, 59, 160, 59, 176, 59, 192, 59, 207, 59, 223, 59, 238, 59, 254, 60, 14, 60, 29, 60, 45, 60, 60, 60, 76, 60, 92, 60, 107, 60, 123, 60, 139, 60, 155, 60, 170, 60, 186, 60, 202, 60, 217, 60, 233, 60, 249, 61, 9, 61, 25, 61, 40, 61, 56, 61, 72, 61, 88, 61, 104, 61, 119, 61, 135, 61, 151, 61, 167, 61, 183, 61, 199, 61, 215, 61, 231, 61, 246, 62, 6, 62, 22, 62, 38, 62, 54, 62, 70, 62, 86, 62, 102, 62, 118, 62, 134, 62, 150, 62, 166, 62, 182, 62, 198, 62, 214, 62, 230, 62, 246, 63, 6, 63, 22, 63, 38, 63, 55, 63, 71, 63, 87, 63, 103, 63, 119, 63, 135, 63, 151, 63, 168, 63, 184, 63, 200, 63, 216, 63, 232, 63, 248, 64, 9, 64, 25, 64, 41, 64, 57, 64, 74, 64, 90, 64, 106, 64, 122, 64, 139, 64, 155, 64, 171, 64, 188, 64, 204, 64, 220, 64, 237, 64, 253, 65, 13, 65, 30, 65, 46, 65, 63, 65, 79, 65, 95, 65, 112, 65, 128, 65, 145, 65, 161, 65, 178, 65, 194, 65, 211, 65, 227, 65, 244, 66, 4, 66, 21, 66, 37, 66, 54, 66, 70, 66, 87, 66, 103, 66, 120, 66, 136, 66, 153, 66, 170, 66, 186, 66, 203, 66, 220, 66, 236, 66, 253, 67, 14, 67, 30, 67, 47, 67, 64, 67, 80, 67, 97, 67, 114, 67, 130, 67, 147, 67, 164, 67, 181, 67, 197, 67, 214, 67, 231, 67, 248, 68, 9, 68, 25, 68, 42, 68, 59, 68, 76, 68, 93, 68, 110, 68, 126, 68, 143, 68, 160, 68, 177, 68, 194, 68, 211, 68, 228, 68, 245, 69, 6, 69, 23, 69, 40, 69, 57, 69, 74, 69, 91, 69, 108, 69, 125, 69, 142, 69, 159, 69, 176, 69, 193, 69, 210, 69, 227, 69, 244, 70, 5, 70, 22, 70, 39, 70, 56, 70, 73, 70, 91, 70, 108, 70, 125, 70, 142, 70, 159, 70, 176, 70, 194, 70, 211, 70, 228, 70, 245, 71, 6, 71, 24, 71, 41, 71, 58, 71, 75, 71, 93, 71, 110, 71, 127, 71, 145, 71, 162, 71, 179, 71, 197, 71, 214, 71, 231, 71, 249, 72, 10, 72, 27, 72, 45, 72, 62, 72, 80, 72, 97, 72, 114, 72, 132, 72, 149, 72, 167, 72, 184, 72, 202, 72, 219, 72, 237, 72, 254, 73, 16, 73, 33, 73, 51, 73, 68, 73, 86, 73, 103, 73, 121, 73, 139, 73, 156, 73, 174, 73, 191, 73, 209, 73, 227, 73, 244, 74, 6, 74, 24, 74, 41, 74, 59, 74, 77, 74, 94, 74, 112, 74, 130, 74, 147, 74, 165, 74, 183, 74, 201, 74, 218, 74, 236, 74, 254, 75, 16, 75, 34, 75, 51, 75, 69, 75, 87, 75, 105, 75, 123, 75, 141, 75, 159, 75, 176, 75, 194, 75, 212, 75, 230, 75, 248, 76, 10, 76, 28, 76, 46, 76, 64, 76, 82, 76, 100, 76, 118, 76, 136, 76, 154, 76, 172, 76, 190, 76, 208, 76, 226, 76, 244, 77, 6, 77, 24, 77, 42, 77, 60, 77, 78, 77, 96, 77, 115, 77, 133, 77, 151, 77, 169, 77, 187, 77, 205, 77, 223, 77, 242, 78, 4, 78, 22, 78, 40, 78, 59, 78, 77, 78, 95, 78, 113, 78, 132, 78, 150, 78, 168, 78, 186, 78, 205, 78, 223, 78, 241, 79, 4, 79, 22, 79, 40, 79, 59, 79, 77, 79, 95, 79, 114, 79, 132, 79, 151, 79, 169, 79, 188, 79, 206, 79, 224, 79, 243, 80, 5, 80, 24, 80, 42, 80, 61, 80, 79, 80, 98, 80, 116, 80, 135, 80, 153, 80, 172, 80, 191, 80, 209, 80, 228, 80, 246, 81, 9, 81, 28, 81, 46, 81, 65, 81, 83, 81, 102, 81, 121, 81, 139, 81, 158, 81, 177, 81, 196, 81, 214, 81, 233, 81, 252, 82, 14, 82, 33, 82, 52, 82, 71, 82, 90, 82, 108, 82, 127, 82, 146, 82, 165, 82, 184, 82, 202, 82, 221, 82, 240, 83, 3, 83, 22, 83, 41, 83, 60, 83, 79, 83, 97, 83, 116, 83, 135, 83, 154, 83, 173, 83, 192, 83, 211, 83, 230, 83, 249, 84, 12, 84, 31, 84, 50, 84, 69, 84, 88, 84, 107, 84, 126, 84, 146, 84, 165, 84, 184, 84, 203, 84, 222, 84, 241, 85, 4, 85, 23, 85, 42, 85, 62, 85, 81, 85, 100, 85, 119, 85, 138, 85, 158, 85, 177, 85, 196, 85, 215, 85, 235, 85, 254, 86, 17, 86, 36, 86, 56, 86, 75, 86, 94, 86, 114, 86, 133, 86, 152, 86, 172, 86, 191, 86, 210, 86, 230, 86, 249, 87, 13, 87, 32, 87, 51, 87, 71, 87, 90, 87, 110, 87, 129, 87, 149, 87, 168, 87, 188, 87, 207, 87, 227, 87, 246, 88, 10, 88, 29, 88, 49, 88, 68, 88, 88, 88, 107, 88, 127, 88, 147, 88, 166, 88, 186, 88, 205, 88, 225, 88, 245, 89, 8, 89, 28, 89, 48, 89, 67, 89, 87, 89, 107, 89, 127, 89, 146, 89, 166, 89, 186, 89, 206, 89, 225, 89, 245, 90, 9, 90, 29, 90, 48, 90, 68, 90, 88, 90, 108, 90, 128, 90, 148, 90, 167, 90, 187, 90, 207, 90, 227, 90, 247, 91, 11, 91, 31, 91, 51, 91, 71, 91, 91, 91, 111, 91, 131, 91, 151, 91, 171, 91, 191, 91, 211, 91, 231, 91, 251, 92, 15, 92, 35, 92, 55, 92, 75, 92, 95, 92, 115, 92, 135, 92, 155, 92, 175, 92, 196, 92, 216, 92, 236, 93, 0, 93, 20, 93, 40, 93, 61, 93, 81, 93, 101, 93, 121, 93, 141, 93, 162, 93, 182, 93, 202, 93, 222, 93, 243, 94, 7, 94, 27, 94, 48, 94, 68, 94, 88, 94, 109, 94, 129, 94, 149, 94, 170, 94, 190, 94, 211, 94, 231, 94, 251, 95, 16, 95, 36, 95, 57, 95, 77, 95, 98, 95, 118, 95, 139, 95, 159, 95, 180, 95, 200, 95, 221, 95, 241, 96, 6, 96, 26, 96, 47, 96, 67, 96, 88, 96, 108, 96, 129, 96, 150, 96, 170, 96, 191, 96, 212, 96, 232, 96, 253, 97, 18, 97, 38, 97, 59, 97, 80, 97, 100, 97, 121, 97, 142, 97, 163, 97, 183, 97, 204, 97, 225, 97, 246, 98, 10, 98, 31, 98, 52, 98, 73, 98, 94, 98, 115, 98, 135, 98, 156, 98, 177, 98, 198, 98, 219, 98, 240, 99, 5, 99, 26, 99, 47, 99, 68, 99, 89, 99, 109, 99, 130, 99, 151, 99, 172, 99, 193, 99, 214, 99, 235, 100, 1, 100, 22, 100, 43, 100, 64, 100, 85, 100, 106, 100, 127, 100, 148, 100, 169, 100, 190, 100, 211, 100, 233, 100, 254, 101, 19, 101, 40, 101, 61, 101, 82, 101, 104, 101, 125, 101, 146, 101, 167, 101, 189, 101, 210, 101, 231, 101, 252, 102, 18, 102, 39, 102, 60, 102, 82, 102, 103, 102, 124, 102, 146, 102, 167, 102, 188, 102, 210, 102, 231, 102, 253, 103, 18, 103, 39, 103, 61, 103, 82, 103, 104, 103, 125, 103, 147, 103, 168, 103, 190, 103, 211, 103, 233, 103, 254, 104, 20, 104, 41, 104, 63, 104, 84, 104, 106, 104, 127, 104, 149, 104, 171, 104, 192, 104, 214, 104, 235, 105, 1, 105, 23, 105, 44, 105, 66, 105, 88, 105, 110, 105, 131, 105, 153, 105, 175, 105, 196, 105, 218, 105, 240, 106, 6, 106, 27, 106, 49, 106, 71, 106, 93, 106, 115, 106, 136, 106, 158, 106, 180, 106, 202, 106, 224, 106, 246, 107, 12, 107, 34, 107, 55, 107, 77, 107, 99, 107, 121, 107, 143, 107, 165, 107, 187, 107, 209, 107, 231, 107, 253, 108, 19, 108, 41, 108, 63, 108, 85, 108, 107, 108, 129, 108, 151, 108, 173, 108, 196, 108, 218, 108, 240, 109, 6, 109, 28, 109, 50, 109, 72, 109, 94, 109, 117, 109, 139, 109, 161, 109, 183, 109, 205, 109, 228, 109, 250, 110, 16, 110, 38, 110, 61, 110, 83, 110, 105, 110, 127, 110, 150, 110, 172, 110, 194, 110, 217, 110, 239, 111, 5, 111, 28, 111, 50, 111, 73, 111, 95, 111, 117, 111, 140, 111, 162, 111, 185, 111, 207, 111, 230, 111, 252, 112, 19, 112, 41, 112, 64, 112, 86, 112, 109, 112, 131, 112, 154, 112, 176, 112, 199, 112, 221, 112, 244, 113, 11, 113, 33, 113, 56, 113, 78, 113, 101, 113, 124, 113, 146, 113, 169, 113, 192, 113, 214, 113, 237, 114, 4, 114, 27, 114, 49, 114, 72, 114, 95, 114, 117, 114, 140, 114, 163, 114, 186, 114, 209, 114, 231, 114, 254, 115, 21, 115, 44, 115, 67, 115, 90, 115, 113, 115, 135, 115, 158, 115, 181, 115, 204, 115, 227, 115, 250, 116, 17, 116, 40, 116, 63, 116, 86, 116, 109, 116, 132, 116, 155, 116, 178, 116, 201, 116, 224, 116, 247, 117, 14, 117, 37, 117, 60, 117, 83, 117, 106, 117, 129, 117, 153, 117, 176, 117, 199, 117, 222, 117, 245, 118, 12, 118, 36, 118, 59, 118, 82, 118, 105, 118, 128, 118, 152, 118, 175, 118, 198, 118, 221, 118, 245, 119, 12, 119, 35, 119, 59, 119, 82, 119, 105, 119, 129, 119, 152, 119, 175, 119, 199, 119, 222, 119, 245, 120, 13, 120, 36, 120, 60, 120, 83, 120, 106, 120, 130, 120, 153, 120, 177, 120, 200, 120, 224, 120, 247, 121, 15, 121, 38, 121, 62, 121, 85, 121, 109, 121, 133, 121, 156, 121, 180, 121, 203, 121, 227, 121, 251, 122, 18, 122, 42, 122, 66, 122, 89, 122, 113, 122, 137, 122, 160, 122, 184, 122, 208, 122, 231, 122, 255, 123, 23, 123, 47, 123, 70, 123, 94, 123, 118, 123, 142, 123, 166, 123, 189, 123, 213, 123, 237, 124, 5, 124, 29, 124, 53, 124, 76, 124, 100, 124, 124, 124, 148, 124, 172, 124, 196, 124, 220, 124, 244, 125, 12, 125, 36, 125, 60, 125, 84, 125, 108, 125, 132, 125, 156, 125, 180, 125, 204, 125, 228, 125, 252, 126, 20, 126, 44, 126, 68, 126, 93, 126, 117, 126, 141, 126, 165, 126, 189, 126, 213, 126, 237, 127, 6, 127, 30, 127, 54, 127, 78, 127, 102, 127, 127, 127, 151, 127, 175, 127, 199, 127, 224, 127, 248, 128, 16, 128, 41, 128, 65, 128, 89, 128, 114, 128, 138, 128, 162, 128, 187, 128, 211, 128, 236, 129, 4, 129, 28, 129, 53, 129, 77, 129, 102, 129, 126, 129, 151, 129, 175, 129, 200, 129, 224, 129, 249, 130, 17, 130, 42, 130, 66, 130, 91, 130, 115, 130, 140, 130, 164, 130, 189, 130, 214, 130, 238, 131, 7, 131, 32, 131, 56, 131, 81, 131, 105, 131, 130, 131, 155, 131, 180, 131, 204, 131, 229, 131, 254, 132, 22, 132, 47, 132, 72, 132, 97, 132, 122, 132, 146, 132, 171, 132, 196, 132, 221, 132, 246, 133, 14, 133, 39, 133, 64, 133, 89, 133, 114, 133, 139, 133, 164, 133, 189, 133, 214, 133, 239, 134, 8, 134, 33, 134, 57, 134, 82, 134, 107, 134, 132, 134, 158, 134, 183, 134, 208, 134, 233, 135, 2, 135, 27, 135, 52, 135, 77, 135, 102, 135, 127, 135, 152, 135, 177, 135, 203, 135, 228, 135, 253, 136, 22, 136, 47, 136, 72, 136, 98, 136, 123, 136, 148, 136, 173, 136, 199, 136, 224, 136, 249, 137, 18, 137, 44, 137, 69, 137, 94, 137, 120, 137, 145, 137, 170, 137, 196, 137, 221, 137, 246, 138, 16, 138, 41, 138, 67, 138, 92, 138, 117, 138, 143, 138, 168, 138, 194, 138, 219, 138, 245, 139, 14, 139, 40, 139, 65, 139, 91, 139, 116, 139, 142, 139, 168, 139, 193, 139, 219, 139, 244, 140, 14, 140, 39, 140, 65, 140, 91, 140, 116, 140, 142, 140, 168, 140, 193, 140, 219, 140, 245, 141, 14, 141, 40, 141, 66, 141, 92, 141, 117, 141, 143, 141, 169, 141, 195, 141, 221, 141, 246, 142, 16, 142, 42, 142, 68, 142, 94, 142, 120, 142, 145, 142, 171, 142, 197, 142, 223, 142, 249, 143, 19, 143, 45, 143, 71, 143, 97, 143, 123, 143, 149, 143, 175, 143, 201, 143, 227, 143, 253, 144, 23, 144, 49, 144, 75, 144, 101, 144, 127, 144, 153, 144, 179, 144, 205, 144, 231, 145, 2, 145, 28, 145, 54, 145, 80, 145, 106, 145, 132, 145, 159, 145, 185, 145, 211, 145, 237, 146, 7, 146, 34, 146, 60, 146, 86, 146, 112, 146, 139, 146, 165, 146, 191, 146, 218, 146, 244, 147, 14, 147, 41, 147, 67, 147, 93, 147, 120, 147, 146, 147, 173, 147, 199, 147, 225, 147, 252, 148, 22, 148, 49, 148, 75, 148, 102, 148, 128, 148, 155, 148, 181, 148, 208, 148, 234, 149, 5, 149, 31, 149, 58, 149, 85, 149, 111, 149, 138, 149, 164, 149, 191, 149, 218, 149, 244, 150, 15, 150, 42, 150, 68, 150, 95, 150, 122, 150, 148, 150, 175, 150, 202, 150, 229, 150, 255, 151, 26, 151, 53, 151, 80, 151, 106, 151, 133, 151, 160, 151, 187, 151, 214, 151, 241, 152, 11, 152, 38, 152, 65, 152, 92, 152, 119, 152, 146, 152, 173, 152, 200, 152, 227, 152, 254, 153, 25, 153, 52, 153, 79, 153, 106, 153, 133, 153, 160, 153, 187, 153, 214, 153, 241, 154, 12, 154, 39, 154, 66, 154, 93, 154, 120, 154, 147, 154, 174, 154, 202, 154, 229, 155, 0, 155, 27, 155, 54, 155, 81, 155, 109, 155, 136, 155, 163, 155, 190, 155, 218, 155, 245, 156, 16, 156, 43, 156, 71, 156, 98, 156, 125, 156, 153, 156, 180, 156, 207, 156, 235, 157, 6, 157, 33, 157, 61, 157, 88, 157, 116, 157, 143, 157, 171, 157, 198, 157, 225, 157, 253, 158, 24, 158, 52, 158, 79, 158, 107, 158, 134, 158, 162, 158, 189, 158, 217, 158, 245, 159, 16, 159, 44, 159, 71, 159, 99, 159, 127, 159, 154, 159, 182, 159, 210, 159, 237, 160, 9, 160, 37, 160, 64, 160, 92, 160, 120, 160, 147, 160, 175, 160, 203, 160, 231, 161, 2, 161, 30, 161, 58, 161, 86, 161, 114, 161, 141, 161, 169, 161, 197, 161, 225, 161, 253, 162, 25, 162, 53, 162, 81, 162, 108, 162, 136, 162, 164, 162, 192, 162, 220, 162, 248, 163, 20, 163, 48, 163, 76, 163, 104, 163, 132, 163, 160, 163, 188, 163, 216, 163, 244, 164, 17, 164, 45, 164, 73, 164, 101, 164, 129, 164, 157, 164, 185, 164, 213, 164, 242, 165, 14, 165, 42, 165, 70, 165, 98, 165, 127, 165, 155, 165, 183, 165, 211, 165, 240, 166, 12, 166, 40, 166, 68, 166, 97, 166, 125, 166, 153, 166, 182, 166, 210, 166, 238, 167, 11, 167, 39, 167, 68, 167, 96, 167, 124, 167, 153, 167, 181, 167, 210, 167, 238, 168, 11, 168, 39, 168, 68, 168, 96, 168, 125, 168, 153, 168, 182, 168, 210, 168, 239, 169, 11, 169, 40, 169, 69, 169, 97, 169, 126, 169, 154, 169, 183, 169, 212, 169, 240, 170, 13, 170, 42, 170, 70, 170, 99, 170, 128, 170, 157, 170, 185, 170, 214, 170, 243, 171, 16, 171, 44, 171, 73, 171, 102, 171, 131, 171, 160, 171, 188, 171, 217, 171, 246, 172, 19, 172, 48, 172, 77, 172, 106, 172, 135, 172, 164, 172, 193, 172, 221, 172, 250, 173, 23, 173, 52, 173, 81, 173, 110, 173, 139, 173, 168, 173, 197, 173, 227, 174, 0, 174, 29, 174, 58, 174, 87, 174, 116, 174, 145, 174, 174, 174, 203, 174, 232, 175, 6, 175, 35, 175, 64, 175, 93, 175, 122, 175, 152, 175, 181, 175, 210, 175, 239, 176, 13, 176, 42, 176, 71, 176, 100, 176, 130, 176, 159, 176, 188, 176, 218, 176, 247, 177, 20, 177, 50, 177, 79, 177, 108, 177, 138, 177, 167, 177, 197, 177, 226, 178, 0, 178, 29, 178, 59, 178, 88, 178, 118, 178, 147, 178, 177, 178, 206, 178, 236, 179, 9, 179, 39, 179, 68, 179, 98, 179, 127, 179, 157, 179, 187, 179, 216, 179, 246, 180, 20, 180, 49, 180, 79, 180, 109, 180, 138, 180, 168, 180, 198, 180, 227, 181, 1, 181, 31, 181, 61, 181, 90, 181, 120, 181, 150, 181, 180, 181, 210, 181, 239, 182, 13, 182, 43, 182, 73, 182, 103, 182, 133, 182, 163, 182, 193, 182, 222, 182, 252, 183, 26, 183, 56, 183, 86, 183, 116, 183, 146, 183, 176, 183, 206, 183, 236, 184, 10, 184, 40, 184, 70, 184, 100, 184, 130, 184, 160, 184, 191, 184, 221, 184, 251, 185, 25, 185, 55, 185, 85, 185, 115, 185, 146, 185, 176, 185, 206, 185, 236, 186, 10, 186, 41, 186, 71, 186, 101, 186, 131, 186, 162, 186, 192, 186, 222, 186, 252, 187, 27, 187, 57, 187, 87, 187, 118, 187, 148, 187, 179, 187, 209, 187, 239, 188, 14, 188, 44, 188, 75, 188, 105, 188, 135, 188, 166, 188, 196, 188, 227, 189, 1, 189, 32, 189, 62, 189, 93, 189, 123, 189, 154, 189, 185, 189, 215, 189, 246, 190, 20, 190, 51, 190, 82, 190, 112, 190, 143, 190, 173, 190, 204, 190, 235, 191, 10, 191, 40, 191, 71, 191, 102, 191, 132, 191, 163, 191, 194, 191, 225, 191, 255, 192, 30, 192, 61, 192, 92, 192, 123, 192, 153, 192, 184, 192, 215, 192, 246, 193, 21, 193, 52, 193, 83, 193, 114, 193, 145, 193, 175, 193, 206, 193, 237, 194, 12, 194, 43, 194, 74, 194, 105, 194, 136, 194, 167, 194, 198, 194, 229, 195, 4, 195, 36, 195, 67, 195, 98, 195, 129, 195, 160, 195, 191, 195, 222, 195, 253, 196, 29, 196, 60, 196, 91, 196, 122, 196, 153, 196, 184, 196, 216, 196, 247, 197, 22, 197, 53, 197, 85, 197, 116, 197, 147, 197, 179, 197, 210, 197, 241, 198, 17, 198, 48, 198, 79, 198, 111, 198, 142, 198, 173, 198, 205, 198, 236, 199, 12, 199, 43, 199, 75, 199, 106, 199, 138, 199, 169, 199, 201, 199, 232, 200, 8, 200, 39, 200, 71, 200, 102, 200, 134, 200, 165, 200, 197, 200, 229, 201, 4, 201, 36, 201, 67, 201, 99, 201, 131, 201, 162, 201, 194, 201, 226, 202, 1, 202, 33, 202, 65, 202, 97, 202, 128, 202, 160, 202, 192, 202, 224, 203, 0, 203, 31, 203, 63, 203, 95, 203, 127, 203, 159, 203, 191, 203, 222, 203, 254, 204, 30, 204, 62, 204, 94, 204, 126, 204, 158, 204, 190, 204, 222, 204, 254, 205, 30, 205, 62, 205, 94, 205, 126, 205, 158, 205, 190, 205, 222, 205, 254, 206, 30, 206, 62, 206, 94, 206, 126, 206, 158, 206, 191, 206, 223, 206, 255, 207, 31, 207, 63, 207, 95, 207, 128, 207, 160, 207, 192, 207, 224, 208, 1, 208, 33, 208, 65, 208, 97, 208, 130, 208, 162, 208, 194, 208, 227, 209, 3, 209, 35, 209, 68, 209, 100, 209, 132, 209, 165, 209, 197, 209, 230, 210, 6, 210, 39, 210, 71, 210, 103, 210, 136, 210, 168, 210, 201, 210, 233, 211, 10, 211, 42, 211, 75, 211, 108, 211, 140, 211, 173, 211, 205, 211, 238, 212, 15, 212, 47, 212, 80, 212, 112, 212, 145, 212, 178, 212, 210, 212, 243, 213, 20, 213, 53, 213, 85, 213, 118, 213, 151, 213, 184, 213, 216, 213, 249, 214, 26, 214, 59, 214, 92, 214, 124, 214, 157, 214, 190, 214, 223, 215, 0, 215, 33, 215, 66, 215, 99, 215, 131, 215, 164, 215, 197, 215, 230, 216, 7, 216, 40, 216, 73, 216, 106, 216, 139, 216, 172, 216, 205, 216, 238, 217, 15, 217, 48, 217, 82, 217, 115, 217, 148, 217, 181, 217, 214, 217, 247, 218, 24, 218, 57, 218, 91, 218, 124, 218, 157, 218, 190, 218, 223, 219, 1, 219, 34, 219, 67, 219, 100, 219, 134, 219, 167, 219, 200, 219, 234, 220, 11, 220, 44, 220, 78, 220, 111, 220, 144, 220, 178, 220, 211, 220, 245, 221, 22, 221, 55, 221, 89, 221, 122, 221, 156, 221, 189, 221, 223, 222, 0, 222, 34, 222, 67, 222, 101, 222, 134, 222, 168, 222, 201, 222, 235, 223, 13, 223, 46, 223, 80, 223, 113, 223, 147, 223, 181, 223, 214, 223, 248, 224, 26, 224, 59, 224, 93, 224, 127, 224, 161, 224, 194, 224, 228, 225, 6, 225, 40, 225, 73, 225, 107, 225, 141, 225, 175, 225, 209, 225, 242, 226, 20, 226, 54, 226, 88, 226, 122, 226, 156, 226, 190, 226, 224, 227, 2, 227, 36, 227, 70, 227, 104, 227, 138, 227, 171, 227, 206, 227, 240, 228, 18, 228, 52, 228, 86, 228, 120, 228, 154, 228, 188, 228, 222, 229, 0, 229, 34, 229, 68, 229, 102, 229, 137, 229, 171, 229, 205, 229, 239, 230, 17, 230, 52, 230, 86, 230, 120, 230, 154, 230, 189, 230, 223, 231, 1, 231, 35, 231, 70, 231, 104, 231, 138, 231, 173, 231, 207, 231, 241, 232, 20, 232, 54, 232, 89, 232, 123, 232, 157, 232, 192, 232, 226, 233, 5, 233, 39, 233, 74, 233, 108, 233, 143, 233, 177, 233, 212, 233, 246, 234, 25, 234, 59, 234, 94, 234, 129, 234, 163, 234, 198, 234, 232, 235, 11, 235, 46, 235, 80, 235, 115, 235, 150, 235, 184, 235, 219, 235, 254, 236, 32, 236, 67, 236, 102, 236, 137, 236, 171, 236, 206, 236, 241, 237, 20, 237, 55, 237, 90, 237, 124, 237, 159, 237, 194, 237, 229, 238, 8, 238, 43, 238, 78, 238, 113, 238, 148, 238, 182, 238, 217, 238, 252, 239, 31, 239, 66, 239, 101, 239, 136, 239, 171, 239, 206, 239, 241, 240, 21, 240, 56, 240, 91, 240, 126, 240, 161, 240, 196, 240, 231, 241, 10, 241, 45, 241, 81, 241, 116, 241, 151, 241, 186, 241, 221, 242, 1, 242, 36, 242, 71, 242, 106, 242, 142, 242, 177, 242, 212, 242, 248, 243, 27, 243, 62, 243, 98, 243, 133, 243, 168, 243, 204, 243, 239, 244, 18, 244, 54, 244, 89, 244, 125, 244, 160, 244, 196, 244, 231, 245, 11, 245, 46, 245, 82, 245, 117, 245, 153, 245, 188, 245, 224, 246, 3, 246, 39, 246, 74, 246, 110, 246, 146, 246, 181, 246, 217, 246, 253, 247, 32, 247, 68, 247, 104, 247, 139, 247, 175, 247, 211, 247, 246, 248, 26, 248, 62, 248, 98, 248, 134, 248, 169, 248, 205, 248, 241, 249, 21, 249, 57, 249, 92, 249, 128, 249, 164, 249, 200, 249, 236, 250, 16, 250, 52, 250, 88, 250, 124, 250, 160, 250, 196, 250, 232, 251, 11, 251, 47, 251, 84, 251, 120, 251, 156, 251, 192, 251, 228, 252, 8, 252, 44, 252, 80, 252, 116, 252, 152, 252, 188, 252, 224, 253, 5, 253, 41, 253, 77, 253, 113, 253, 149, 253, 186, 253, 222, 254, 2, 254, 38, 254, 74, 254, 111, 254, 147, 254, 183, 254, 220, 255, 0, 255, 36, 255, 73, 255, 109, 255, 145, 255, 182, 255, 218, 255, 255 };
				var parsed_bytes = (entry as UndefinedIFDEntry).Data.Data;
				Assert.AreEqual (bytes, parsed_bytes);
			}
			// Image.0x8825 (GPSTag/SubIFD/1) "9612"
			{
				var entry = structure.GetEntry (0, (ushort)IFDEntryTag.GPSIFD);
				Assert.IsNotNull (entry, "Entry 0x8825 missing in IFD 0");
				Assert.IsNotNull (entry as SubIFDEntry, "Entry is not a sub IFD!");
			}

			var gps = structure.GetEntry (0, (ushort)IFDEntryTag.GPSIFD) as SubIFDEntry;
			Assert.IsNotNull (gps, "GPS tag not found");
			var gps_structure = gps.Structure;

			// GPSInfo.0x0000 (GPSVersionID/Byte/4) "2 2 0 0 "
			{
				var entry = gps_structure.GetEntry (0, (ushort)GPSEntryTag.GPSVersionID);
				Assert.IsNotNull (entry, "Entry 0x0000 missing in IFD 0");
				Assert.IsNotNull (entry as ByteVectorIFDEntry, "Entry is not a byte array!");
				var bytes = new byte[] { 2, 2, 0, 0 };
				var parsed_bytes = (entry as ByteVectorIFDEntry).Data.Data;
				Assert.AreEqual (bytes, parsed_bytes);
			}
			// Thumbnail.0x0100 (ImageWidth/Long/1) "160"
			{
				var entry = structure.GetEntry (1, (ushort)IFDEntryTag.ImageWidth);
				Assert.IsNotNull (entry, "Entry 0x0100 missing in IFD 1");
				Assert.IsNotNull (entry as LongIFDEntry, "Entry is not a long!");
				Assert.AreEqual (160, (entry as LongIFDEntry).Value);
			}
			// Thumbnail.0x0101 (ImageLength/Long/1) "107"
			{
				var entry = structure.GetEntry (1, (ushort)IFDEntryTag.ImageLength);
				Assert.IsNotNull (entry, "Entry 0x0101 missing in IFD 1");
				Assert.IsNotNull (entry as LongIFDEntry, "Entry is not a long!");
				Assert.AreEqual (107, (entry as LongIFDEntry).Value);
			}
			// Thumbnail.0x0102 (BitsPerSample/Short/3) "8 8 8"
			{
				var entry = structure.GetEntry (1, (ushort)IFDEntryTag.BitsPerSample);
				Assert.IsNotNull (entry, "Entry 0x0102 missing in IFD 1");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.AreEqual (new ushort[] { 8, 8, 8 }, (entry as ShortArrayIFDEntry).Values);
			}
			// Thumbnail.0x0103 (Compression/Short/1) "1"
			{
				var entry = structure.GetEntry (1, (ushort)IFDEntryTag.Compression);
				Assert.IsNotNull (entry, "Entry 0x0103 missing in IFD 1");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (1, (entry as ShortIFDEntry).Value);
			}
			// Thumbnail.0x0106 (PhotometricInterpretation/Short/1) "2"
			{
				var entry = structure.GetEntry (1, (ushort)IFDEntryTag.PhotometricInterpretation);
				Assert.IsNotNull (entry, "Entry 0x0106 missing in IFD 1");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (2, (entry as ShortIFDEntry).Value);
			}
			// Thumbnail.0x0111 (StripOffsets/StripOffsets/1) "19674"
			{
				var entry = structure.GetEntry (1, (ushort)IFDEntryTag.StripOffsets);
				Assert.IsNotNull (entry, "Entry 0x0111 missing in IFD 1");
				Assert.IsNotNull (entry as StripOffsetsIFDEntry, "Entry is not a strip offsets entry!");
				Assert.AreEqual (1, (entry as StripOffsetsIFDEntry).Values.Length);
			}
			// Thumbnail.0x0112 (Orientation/Short/1) "1"
			{
				var entry = structure.GetEntry (1, (ushort)IFDEntryTag.Orientation);
				Assert.IsNotNull (entry, "Entry 0x0112 missing in IFD 1");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (1, (entry as ShortIFDEntry).Value);
			}
			// Thumbnail.0x0115 (SamplesPerPixel/Short/1) "3"
			{
				var entry = structure.GetEntry (1, (ushort)IFDEntryTag.SamplesPerPixel);
				Assert.IsNotNull (entry, "Entry 0x0115 missing in IFD 1");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (3, (entry as ShortIFDEntry).Value);
			}
			// Thumbnail.0x0116 (RowsPerStrip/Long/1) "107"
			{
				var entry = structure.GetEntry (1, (ushort)IFDEntryTag.RowsPerStrip);
				Assert.IsNotNull (entry, "Entry 0x0116 missing in IFD 1");
				Assert.IsNotNull (entry as LongIFDEntry, "Entry is not a long!");
				Assert.AreEqual (107, (entry as LongIFDEntry).Value);
			}
			// Thumbnail.0x0117 (StripByteCounts/Long/1) "51360"
			{
				var entry = structure.GetEntry (1, (ushort)IFDEntryTag.StripByteCounts);
				Assert.IsNotNull (entry, "Entry 0x0117 missing in IFD 1");
				Assert.IsNotNull (entry as LongIFDEntry, "Entry is not a long!");
				Assert.AreEqual (51360, (entry as LongIFDEntry).Value);
			}
			// Thumbnail.0x011A (XResolution/Rational/1) "300/1"
			{
				var entry = structure.GetEntry (1, (ushort)IFDEntryTag.XResolution);
				Assert.IsNotNull (entry, "Entry 0x011A missing in IFD 1");
				Assert.IsNotNull (entry as RationalIFDEntry, "Entry is not a rational!");
				Assert.AreEqual (300, (entry as RationalIFDEntry).Value.Numerator);
				Assert.AreEqual (1, (entry as RationalIFDEntry).Value.Denominator);
			}
			// Thumbnail.0x011B (YResolution/Rational/1) "300/1"
			{
				var entry = structure.GetEntry (1, (ushort)IFDEntryTag.YResolution);
				Assert.IsNotNull (entry, "Entry 0x011B missing in IFD 1");
				Assert.IsNotNull (entry as RationalIFDEntry, "Entry is not a rational!");
				Assert.AreEqual (300, (entry as RationalIFDEntry).Value.Numerator);
				Assert.AreEqual (1, (entry as RationalIFDEntry).Value.Denominator);
			}
			// Thumbnail.0x011C (PlanarConfiguration/Short/1) "1"
			{
				var entry = structure.GetEntry (1, (ushort)IFDEntryTag.PlanarConfiguration);
				Assert.IsNotNull (entry, "Entry 0x011C missing in IFD 1");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (1, (entry as ShortIFDEntry).Value);
			}
			// Thumbnail.0x0128 (ResolutionUnit/Short/1) "2"
			{
				var entry = structure.GetEntry (1, (ushort)IFDEntryTag.ResolutionUnit);
				Assert.IsNotNull (entry, "Entry 0x0128 missing in IFD 1");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (2, (entry as ShortIFDEntry).Value);
			}

			//  ---------- End of IFD tests ----------

		}
	}
}
