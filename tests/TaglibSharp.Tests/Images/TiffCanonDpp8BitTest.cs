// TODO: This file is automatically generated
// TODO: Further manual verification is needed

using NUnit.Framework;
using TagLib;
using TagLib.IFD;
using TagLib.IFD.Entries;
using TagLib.IFD.Tags;
using TaglibSharp.Tests.Images.Validators;

namespace TaglibSharp.Tests.Images
{
	[TestFixture]
	public class TiffCanonDpp8BitTest
	{
		[Test]
		public void Test ()
		{
			ImageTest.Run ("sample_canon_dpp_8bit.tiff",
				new TiffCanonDpp8BitTestInvariantValidator (),
				NoModificationValidator.Instance,
				new CommentModificationValidator (string.Empty),
				new TagCommentModificationValidator (string.Empty, TagTypes.TiffIFD, true),
				new TagCommentModificationValidator (null, TagTypes.XMP, false),
				new TagKeywordsModificationValidator (null, TagTypes.XMP, false)
			);
		}
	}

	public class TiffCanonDpp8BitTestInvariantValidator : IMetadataInvariantValidator
	{
		public void ValidateMetadataInvariants (TagLib.Image.File file)
		{
			Assert.IsNotNull (file);
			//  ---------- Start of IFD tests ----------

			var tag = file.GetTag (TagTypes.TiffIFD) as IFDTag;
			Assert.IsNotNull (tag, "IFD tag not found");

			var structure = tag.Structure;

			// Image.0x0100 (ImageWidth/Short/1) "66"
			{
				var entry = structure.GetEntry (0, (ushort)IFDEntryTag.ImageWidth);
				Assert.IsNotNull (entry, "Entry 0x0100 missing in IFD 0");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (66, (entry as ShortIFDEntry).Value);
			}
			// Image.0x0101 (ImageLength/Short/1) "42"
			{
				var entry = structure.GetEntry (0, (ushort)IFDEntryTag.ImageLength);
				Assert.IsNotNull (entry, "Entry 0x0101 missing in IFD 0");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (42, (entry as ShortIFDEntry).Value);
			}
			// Image.0x0102 (BitsPerSample/Short/3) "8 8 8"
			{
				var entry = structure.GetEntry (0, (ushort)IFDEntryTag.BitsPerSample);
				Assert.IsNotNull (entry, "Entry 0x0102 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.AreEqual (new ushort[] { 8, 8, 8 }, (entry as ShortArrayIFDEntry).Values);
			}
			// Image.0x0103 (Compression/Short/1) "1"
			{
				var entry = structure.GetEntry (0, (ushort)IFDEntryTag.Compression);
				Assert.IsNotNull (entry, "Entry 0x0103 missing in IFD 0");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (1, (entry as ShortIFDEntry).Value);
			}
			// Image.0x0106 (PhotometricInterpretation/Short/1) "2"
			{
				var entry = structure.GetEntry (0, (ushort)IFDEntryTag.PhotometricInterpretation);
				Assert.IsNotNull (entry, "Entry 0x0106 missing in IFD 0");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (2, (entry as ShortIFDEntry).Value);
			}
			// Image.0x010E (ImageDescription/Ascii/1) ""
			//  --> Test removed because of CommentModificationValidator, value is checked there.
			// Image.0x010F (Make/Ascii/6) "Canon"
			{
				var entry = structure.GetEntry (0, (ushort)IFDEntryTag.Make);
				Assert.IsNotNull (entry, "Entry 0x010F missing in IFD 0");
				Assert.IsNotNull (entry as StringIFDEntry, "Entry is not a string!");
				Assert.AreEqual ("Canon", (entry as StringIFDEntry).Value);
			}
			// Image.0x0110 (Model/Ascii/23) "Canon EOS 400D DIGITAL"
			{
				var entry = structure.GetEntry (0, (ushort)IFDEntryTag.Model);
				Assert.IsNotNull (entry, "Entry 0x0110 missing in IFD 0");
				Assert.IsNotNull (entry as StringIFDEntry, "Entry is not a string!");
				Assert.AreEqual ("Canon EOS 400D DIGITAL", (entry as StringIFDEntry).Value);
			}
			// Image.0x0111 (StripOffsets/StripOffsets/42) "125834 126032 126230 126428 126626 126824 127022 127220 127418 127616 127814 128012 128210 128408 128606 128804 129002 129200 129398 129596 129794 129992 130190 130388 130586 130784 130982 131180 131378 131576 131774 131972 132170 132368 132566 132764 132962 133160 133358 133556 133754 133952"
			{
				var entry = structure.GetEntry (0, (ushort)IFDEntryTag.StripOffsets);
				Assert.IsNotNull (entry, "Entry 0x0111 missing in IFD 0");
				Assert.IsNotNull (entry as StripOffsetsIFDEntry, "Entry is not a strip offsets entry!");
				Assert.AreEqual (42, (entry as StripOffsetsIFDEntry).Values.Length);
			}
			// Image.0x0112 (Orientation/Short/1) "1"
			{
				var entry = structure.GetEntry (0, (ushort)IFDEntryTag.Orientation);
				Assert.IsNotNull (entry, "Entry 0x0112 missing in IFD 0");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (1, (entry as ShortIFDEntry).Value);
			}
			// Image.0x0115 (SamplesPerPixel/Short/1) "3"
			{
				var entry = structure.GetEntry (0, (ushort)IFDEntryTag.SamplesPerPixel);
				Assert.IsNotNull (entry, "Entry 0x0115 missing in IFD 0");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (3, (entry as ShortIFDEntry).Value);
			}
			// Image.0x0116 (RowsPerStrip/Short/1) "1"
			{
				var entry = structure.GetEntry (0, (ushort)IFDEntryTag.RowsPerStrip);
				Assert.IsNotNull (entry, "Entry 0x0116 missing in IFD 0");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (1, (entry as ShortIFDEntry).Value);
			}
			// Image.0x0117 (StripByteCounts/Long/42) "198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198"
			{
				var entry = structure.GetEntry (0, (ushort)IFDEntryTag.StripByteCounts);
				Assert.IsNotNull (entry, "Entry 0x0117 missing in IFD 0");
				Assert.IsNotNull (entry as LongArrayIFDEntry, "Entry is not a long array!");
				Assert.AreEqual (new long[] { 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198 }, (entry as LongArrayIFDEntry).Values);
			}
			// Image.0x011A (XResolution/Rational/1) "734003200/2097152"
			{
				var entry = structure.GetEntry (0, (ushort)IFDEntryTag.XResolution);
				Assert.IsNotNull (entry, "Entry 0x011A missing in IFD 0");
				Assert.IsNotNull (entry as RationalIFDEntry, "Entry is not a rational!");
				Assert.AreEqual (734003200, (entry as RationalIFDEntry).Value.Numerator);
				Assert.AreEqual (2097152, (entry as RationalIFDEntry).Value.Denominator);
			}
			// Image.0x011B (YResolution/Rational/1) "734003200/2097152"
			{
				var entry = structure.GetEntry (0, (ushort)IFDEntryTag.YResolution);
				Assert.IsNotNull (entry, "Entry 0x011B missing in IFD 0");
				Assert.IsNotNull (entry as RationalIFDEntry, "Entry is not a rational!");
				Assert.AreEqual (734003200, (entry as RationalIFDEntry).Value.Numerator);
				Assert.AreEqual (2097152, (entry as RationalIFDEntry).Value.Denominator);
			}
			// Image.0x011C (PlanarConfiguration/Short/1) "1"
			{
				var entry = structure.GetEntry (0, (ushort)IFDEntryTag.PlanarConfiguration);
				Assert.IsNotNull (entry, "Entry 0x011C missing in IFD 0");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (1, (entry as ShortIFDEntry).Value);
			}
			// Image.0x0128 (ResolutionUnit/Short/1) "2"
			{
				var entry = structure.GetEntry (0, (ushort)IFDEntryTag.ResolutionUnit);
				Assert.IsNotNull (entry, "Entry 0x0128 missing in IFD 0");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (2, (entry as ShortIFDEntry).Value);
			}
			// Image.0x0131 (Software/Ascii/27) "Digital Photo Professional"
			{
				var entry = structure.GetEntry (0, (ushort)IFDEntryTag.Software);
				Assert.IsNotNull (entry, "Entry 0x0131 missing in IFD 0");
				Assert.IsNotNull (entry as StringIFDEntry, "Entry is not a string!");
				Assert.AreEqual ("Digital Photo Professional", (entry as StringIFDEntry).Value);
			}
			// Image.0x0132 (DateTime/Ascii/20) "2010:01:31 15:16:46"
			{
				var entry = structure.GetEntry (0, (ushort)IFDEntryTag.DateTime);
				Assert.IsNotNull (entry, "Entry 0x0132 missing in IFD 0");
				Assert.IsNotNull (entry as StringIFDEntry, "Entry is not a string!");
				Assert.AreEqual ("2010:01:31 15:16:46", (entry as StringIFDEntry).Value);
			}
			// Image.0x013B (Artist/Ascii/1) ""
			{
				var entry = structure.GetEntry (0, (ushort)IFDEntryTag.Artist);
				Assert.IsNotNull (entry, "Entry 0x013B missing in IFD 0");
				Assert.IsNotNull (entry as StringIFDEntry, "Entry is not a string!");
				Assert.AreEqual ("", (entry as StringIFDEntry).Value.Trim ());
			}
			// Image.0x8298 (Copyright/Ascii/1) ""
			{
				var entry = structure.GetEntry (0, (ushort)IFDEntryTag.Copyright);
				Assert.IsNotNull (entry, "Entry 0x8298 missing in IFD 0");
				Assert.IsNotNull (entry as StringIFDEntry, "Entry is not a string!");
				Assert.AreEqual ("", (entry as StringIFDEntry).Value.Trim ());
			}
			// Image.0x8769 (ExifTag/SubIFD/1) "122432"
			{
				var entry = structure.GetEntry (0, (ushort)IFDEntryTag.ExifIFD);
				Assert.IsNotNull (entry, "Entry 0x8769 missing in IFD 0");
				Assert.IsNotNull (entry as SubIFDEntry, "Entry is not a sub IFD!");
			}

			var exif = structure.GetEntry (0, (ushort)IFDEntryTag.ExifIFD) as SubIFDEntry;
			Assert.IsNotNull (exif, "Exif tag not found");
			var exif_structure = exif.Structure;

			// Photo.0x829A (ExposureTime/Rational/1) "1/60"
			{
				var entry = exif_structure.GetEntry (0, (ushort)ExifEntryTag.ExposureTime);
				Assert.IsNotNull (entry, "Entry 0x829A missing in IFD 0");
				Assert.IsNotNull (entry as RationalIFDEntry, "Entry is not a rational!");
				Assert.AreEqual (1, (entry as RationalIFDEntry).Value.Numerator);
				Assert.AreEqual (60, (entry as RationalIFDEntry).Value.Denominator);
			}
			// Photo.0x829D (FNumber/Rational/1) "50/10"
			{
				var entry = exif_structure.GetEntry (0, (ushort)ExifEntryTag.FNumber);
				Assert.IsNotNull (entry, "Entry 0x829D missing in IFD 0");
				Assert.IsNotNull (entry as RationalIFDEntry, "Entry is not a rational!");
				Assert.AreEqual (50, (entry as RationalIFDEntry).Value.Numerator);
				Assert.AreEqual (10, (entry as RationalIFDEntry).Value.Denominator);
			}
			// Photo.0x8827 (ISOSpeedRatings/Short/1) "200"
			{
				var entry = exif_structure.GetEntry (0, (ushort)ExifEntryTag.ISOSpeedRatings);
				Assert.IsNotNull (entry, "Entry 0x8827 missing in IFD 0");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (200, (entry as ShortIFDEntry).Value);
			}
			// Photo.0x9000 (ExifVersion/Undefined/4) "48 50 50 49 "
			{
				var entry = exif_structure.GetEntry (0, (ushort)ExifEntryTag.ExifVersion);
				Assert.IsNotNull (entry, "Entry 0x9000 missing in IFD 0");
				Assert.IsNotNull (entry as UndefinedIFDEntry, "Entry is not an undefined IFD entry!");
				var bytes = new byte[] { 48, 50, 50, 49 };
				var parsed_bytes = (entry as UndefinedIFDEntry).Data.Data;
				Assert.AreEqual (bytes, parsed_bytes);
			}
			// Photo.0x9003 (DateTimeOriginal/Ascii/20) "2010:01:31 15:16:46"
			{
				var entry = exif_structure.GetEntry (0, (ushort)ExifEntryTag.DateTimeOriginal);
				Assert.IsNotNull (entry, "Entry 0x9003 missing in IFD 0");
				Assert.IsNotNull (entry as StringIFDEntry, "Entry is not a string!");
				Assert.AreEqual ("2010:01:31 15:16:46", (entry as StringIFDEntry).Value);
			}
			// Photo.0x9004 (DateTimeDigitized/Ascii/20) "2010:01:31 15:16:46"
			{
				var entry = exif_structure.GetEntry (0, (ushort)ExifEntryTag.DateTimeDigitized);
				Assert.IsNotNull (entry, "Entry 0x9004 missing in IFD 0");
				Assert.IsNotNull (entry as StringIFDEntry, "Entry is not a string!");
				Assert.AreEqual ("2010:01:31 15:16:46", (entry as StringIFDEntry).Value);
			}
			// Photo.0x9201 (ShutterSpeedValue/SRational/1) "387114/65536"
			{
				var entry = exif_structure.GetEntry (0, (ushort)ExifEntryTag.ShutterSpeedValue);
				Assert.IsNotNull (entry, "Entry 0x9201 missing in IFD 0");
				Assert.IsNotNull (entry as SRationalIFDEntry, "Entry is not a srational!");
				Assert.AreEqual (387114, (entry as SRationalIFDEntry).Value.Numerator);
				Assert.AreEqual (65536, (entry as SRationalIFDEntry).Value.Denominator);
			}
			// Photo.0x9202 (ApertureValue/Rational/1) "304340/65536"
			{
				var entry = exif_structure.GetEntry (0, (ushort)ExifEntryTag.ApertureValue);
				Assert.IsNotNull (entry, "Entry 0x9202 missing in IFD 0");
				Assert.IsNotNull (entry as RationalIFDEntry, "Entry is not a rational!");
				Assert.AreEqual (304340, (entry as RationalIFDEntry).Value.Numerator);
				Assert.AreEqual (65536, (entry as RationalIFDEntry).Value.Denominator);
			}
			// Photo.0x9204 (ExposureBiasValue/SRational/1) "0/3"
			{
				var entry = exif_structure.GetEntry (0, (ushort)ExifEntryTag.ExposureBiasValue);
				Assert.IsNotNull (entry, "Entry 0x9204 missing in IFD 0");
				Assert.IsNotNull (entry as SRationalIFDEntry, "Entry is not a srational!");
				Assert.AreEqual (0, (entry as SRationalIFDEntry).Value.Numerator);
				Assert.AreEqual (3, (entry as SRationalIFDEntry).Value.Denominator);
			}
			// Photo.0x9209 (Flash/Short/1) "9"
			{
				var entry = exif_structure.GetEntry (0, (ushort)ExifEntryTag.Flash);
				Assert.IsNotNull (entry, "Entry 0x9209 missing in IFD 0");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (9, (entry as ShortIFDEntry).Value);
			}
			// Photo.0x920A (FocalLength/Rational/1) "55/1"
			{
				var entry = exif_structure.GetEntry (0, (ushort)ExifEntryTag.FocalLength);
				Assert.IsNotNull (entry, "Entry 0x920A missing in IFD 0");
				Assert.IsNotNull (entry as RationalIFDEntry, "Entry is not a rational!");
				Assert.AreEqual (55, (entry as RationalIFDEntry).Value.Numerator);
				Assert.AreEqual (1, (entry as RationalIFDEntry).Value.Denominator);
			}
			// Photo.0x927C (MakerNote/MakerNote/2764) ""
			{
				var entry = exif_structure.GetEntry (0, (ushort)ExifEntryTag.MakerNote);
				Assert.IsNotNull (entry, "Entry 0x927C missing in IFD 0");
				Assert.IsNotNull (entry as MakernoteIFDEntry, "Entry is not a makernote IFD!");
			}

			var makernote = exif_structure.GetEntry (0, (ushort)ExifEntryTag.MakerNote) as MakernoteIFDEntry;
			Assert.IsNotNull (makernote, "MakerNote tag not found");
			var makernote_structure = makernote.Structure;


			Assert.AreEqual (MakernoteType.Canon, makernote.MakernoteType);

			// CanonCs.0x0000 (0x0000/Short/1) "94"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.CameraSettings);
				Assert.IsNotNull (entry, "Entry 0x0001 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (1 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (94, (entry as ShortArrayIFDEntry).Values[0]);
			}
			// CanonCs.0x0001 (Macro/Short/1) "2"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.CameraSettings);
				Assert.IsNotNull (entry, "Entry 0x0001 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (2 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (2, (entry as ShortArrayIFDEntry).Values[1]);
			}
			// CanonCs.0x0002 (Selftimer/Short/1) "0"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.CameraSettings);
				Assert.IsNotNull (entry, "Entry 0x0001 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (3 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (0, (entry as ShortArrayIFDEntry).Values[2]);
			}
			// CanonCs.0x0003 (Quality/Short/1) "65535"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.CameraSettings);
				Assert.IsNotNull (entry, "Entry 0x0001 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (4 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (65535, (entry as ShortArrayIFDEntry).Values[3]);
			}
			// CanonCs.0x0004 (FlashMode/Short/1) "2"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.CameraSettings);
				Assert.IsNotNull (entry, "Entry 0x0001 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (5 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (2, (entry as ShortArrayIFDEntry).Values[4]);
			}
			// CanonCs.0x0005 (DriveMode/Short/1) "0"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.CameraSettings);
				Assert.IsNotNull (entry, "Entry 0x0001 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (6 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (0, (entry as ShortArrayIFDEntry).Values[5]);
			}
			// CanonCs.0x0006 (0x0006/Short/1) "0"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.CameraSettings);
				Assert.IsNotNull (entry, "Entry 0x0001 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (7 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (0, (entry as ShortArrayIFDEntry).Values[6]);
			}
			// CanonCs.0x0007 (FocusMode/Short/1) "0"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.CameraSettings);
				Assert.IsNotNull (entry, "Entry 0x0001 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (8 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (0, (entry as ShortArrayIFDEntry).Values[7]);
			}
			// CanonCs.0x0008 (0x0008/Short/1) "65535"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.CameraSettings);
				Assert.IsNotNull (entry, "Entry 0x0001 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (9 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (65535, (entry as ShortArrayIFDEntry).Values[8]);
			}
			// CanonCs.0x0009 (0x0009/Short/1) "65535"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.CameraSettings);
				Assert.IsNotNull (entry, "Entry 0x0001 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (10 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (65535, (entry as ShortArrayIFDEntry).Values[9]);
			}
			// CanonCs.0x000A (ImageSize/Short/1) "65535"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.CameraSettings);
				Assert.IsNotNull (entry, "Entry 0x0001 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (11 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (65535, (entry as ShortArrayIFDEntry).Values[10]);
			}
			// CanonCs.0x000B (EasyMode/Short/1) "1"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.CameraSettings);
				Assert.IsNotNull (entry, "Entry 0x0001 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (12 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (1, (entry as ShortArrayIFDEntry).Values[11]);
			}
			// CanonCs.0x000C (DigitalZoom/Short/1) "65535"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.CameraSettings);
				Assert.IsNotNull (entry, "Entry 0x0001 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (13 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (65535, (entry as ShortArrayIFDEntry).Values[12]);
			}
			// CanonCs.0x000D (Contrast/Short/1) "0"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.CameraSettings);
				Assert.IsNotNull (entry, "Entry 0x0001 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (14 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (0, (entry as ShortArrayIFDEntry).Values[13]);
			}
			// CanonCs.0x000E (Saturation/Short/1) "0"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.CameraSettings);
				Assert.IsNotNull (entry, "Entry 0x0001 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (15 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (0, (entry as ShortArrayIFDEntry).Values[14]);
			}
			// CanonCs.0x000F (Sharpness/Short/1) "3"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.CameraSettings);
				Assert.IsNotNull (entry, "Entry 0x0001 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (16 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (3, (entry as ShortArrayIFDEntry).Values[15]);
			}
			// CanonCs.0x0010 (ISOSpeed/Short/1) "32767"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.CameraSettings);
				Assert.IsNotNull (entry, "Entry 0x0001 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (17 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (32767, (entry as ShortArrayIFDEntry).Values[16]);
			}
			// CanonCs.0x0011 (MeteringMode/Short/1) "3"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.CameraSettings);
				Assert.IsNotNull (entry, "Entry 0x0001 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (18 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (3, (entry as ShortArrayIFDEntry).Values[17]);
			}
			// CanonCs.0x0012 (FocusType/Short/1) "2"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.CameraSettings);
				Assert.IsNotNull (entry, "Entry 0x0001 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (19 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (2, (entry as ShortArrayIFDEntry).Values[18]);
			}
			// CanonCs.0x0013 (AFPoint/Short/1) "0"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.CameraSettings);
				Assert.IsNotNull (entry, "Entry 0x0001 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (20 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (0, (entry as ShortArrayIFDEntry).Values[19]);
			}
			// CanonCs.0x0014 (ExposureProgram/Short/1) "4"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.CameraSettings);
				Assert.IsNotNull (entry, "Entry 0x0001 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (21 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (4, (entry as ShortArrayIFDEntry).Values[20]);
			}
			// CanonCs.0x0015 (0x0015/Short/1) "65535"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.CameraSettings);
				Assert.IsNotNull (entry, "Entry 0x0001 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (22 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (65535, (entry as ShortArrayIFDEntry).Values[21]);
			}
			// CanonCs.0x0016 (LensType/Short/1) "65535"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.CameraSettings);
				Assert.IsNotNull (entry, "Entry 0x0001 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (23 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (65535, (entry as ShortArrayIFDEntry).Values[22]);
			}
			// CanonCs.0x0017 (Lens/Short/3) "55 17 1"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.CameraSettings);
				Assert.IsNotNull (entry, "Entry 0x0001 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (26 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (55, (entry as ShortArrayIFDEntry).Values[23]);
				Assert.AreEqual (17, (entry as ShortArrayIFDEntry).Values[24]);
				Assert.AreEqual (1, (entry as ShortArrayIFDEntry).Values[25]);
			}
			// CanonCs.0x001A (MaxAperture/Short/1) "95"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.CameraSettings);
				Assert.IsNotNull (entry, "Entry 0x0001 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (27 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (95, (entry as ShortArrayIFDEntry).Values[26]);
			}
			// CanonCs.0x001B (MinAperture/Short/1) "285"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.CameraSettings);
				Assert.IsNotNull (entry, "Entry 0x0001 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (28 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (285, (entry as ShortArrayIFDEntry).Values[27]);
			}
			// CanonCs.0x001C (FlashActivity/Short/1) "65535"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.CameraSettings);
				Assert.IsNotNull (entry, "Entry 0x0001 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (29 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (65535, (entry as ShortArrayIFDEntry).Values[28]);
			}
			// CanonCs.0x001D (FlashDetails/Short/1) "1"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.CameraSettings);
				Assert.IsNotNull (entry, "Entry 0x0001 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (30 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (1, (entry as ShortArrayIFDEntry).Values[29]);
			}
			// CanonCs.0x001E (0x001e/Short/1) "0"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.CameraSettings);
				Assert.IsNotNull (entry, "Entry 0x0001 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (31 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (0, (entry as ShortArrayIFDEntry).Values[30]);
			}
			// CanonCs.0x001F (0x001f/Short/1) "0"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.CameraSettings);
				Assert.IsNotNull (entry, "Entry 0x0001 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (32 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (0, (entry as ShortArrayIFDEntry).Values[31]);
			}
			// CanonCs.0x0020 (FocusContinuous/Short/1) "0"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.CameraSettings);
				Assert.IsNotNull (entry, "Entry 0x0001 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (33 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (0, (entry as ShortArrayIFDEntry).Values[32]);
			}
			// CanonCs.0x0021 (AESetting/Short/1) "65535"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.CameraSettings);
				Assert.IsNotNull (entry, "Entry 0x0001 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (34 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (65535, (entry as ShortArrayIFDEntry).Values[33]);
			}
			// CanonCs.0x0022 (ImageStabilization/Short/1) "65535"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.CameraSettings);
				Assert.IsNotNull (entry, "Entry 0x0001 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (35 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (65535, (entry as ShortArrayIFDEntry).Values[34]);
			}
			// CanonCs.0x0023 (DisplayAperture/Short/1) "0"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.CameraSettings);
				Assert.IsNotNull (entry, "Entry 0x0001 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (36 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (0, (entry as ShortArrayIFDEntry).Values[35]);
			}
			// CanonCs.0x0024 (ZoomSourceWidth/Short/1) "0"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.CameraSettings);
				Assert.IsNotNull (entry, "Entry 0x0001 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (37 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (0, (entry as ShortArrayIFDEntry).Values[36]);
			}
			// CanonCs.0x0025 (ZoomTargetWidth/Short/1) "0"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.CameraSettings);
				Assert.IsNotNull (entry, "Entry 0x0001 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (38 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (0, (entry as ShortArrayIFDEntry).Values[37]);
			}
			// CanonCs.0x0026 (0x0026/Short/1) "0"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.CameraSettings);
				Assert.IsNotNull (entry, "Entry 0x0001 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (39 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (0, (entry as ShortArrayIFDEntry).Values[38]);
			}
			// CanonCs.0x0027 (0x0027/Short/1) "65535"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.CameraSettings);
				Assert.IsNotNull (entry, "Entry 0x0001 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (40 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (65535, (entry as ShortArrayIFDEntry).Values[39]);
			}
			// CanonCs.0x0028 (PhotoEffect/Short/1) "0"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.CameraSettings);
				Assert.IsNotNull (entry, "Entry 0x0001 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (41 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (0, (entry as ShortArrayIFDEntry).Values[40]);
			}
			// CanonCs.0x0029 (0x0029/Short/1) "0"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.CameraSettings);
				Assert.IsNotNull (entry, "Entry 0x0001 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (42 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (0, (entry as ShortArrayIFDEntry).Values[41]);
			}
			// CanonCs.0x002A (ColorTone/Short/1) "0"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.CameraSettings);
				Assert.IsNotNull (entry, "Entry 0x0001 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (43 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (0, (entry as ShortArrayIFDEntry).Values[42]);
			}
			// CanonCs.0x002B (0x002b/Short/1) "32767"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.CameraSettings);
				Assert.IsNotNull (entry, "Entry 0x0001 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (44 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (32767, (entry as ShortArrayIFDEntry).Values[43]);
			}
			// CanonCs.0x002C (0x002c/Short/1) "65535"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.CameraSettings);
				Assert.IsNotNull (entry, "Entry 0x0001 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (45 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (65535, (entry as ShortArrayIFDEntry).Values[44]);
			}
			// CanonCs.0x002D (0x002d/Short/1) "65535"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.CameraSettings);
				Assert.IsNotNull (entry, "Entry 0x0001 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (46 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (65535, (entry as ShortArrayIFDEntry).Values[45]);
			}
			// CanonCs.0x002E (0x002e/Short/1) "0"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.CameraSettings);
				Assert.IsNotNull (entry, "Entry 0x0001 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (47 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (0, (entry as ShortArrayIFDEntry).Values[46]);
			}
			// Canon.0x0002 (FocalLength/Short/4) "2 55 907 605"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.FocalLength);
				Assert.IsNotNull (entry, "Entry 0x0002 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.AreEqual (new ushort[] { 2, 55, 907, 605 }, (entry as ShortArrayIFDEntry).Values);
			}
			// CanonSi.0x0000 (0x0000/Short/1) "66"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.ShotInfo);
				Assert.IsNotNull (entry, "Entry 0x0004 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (1 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (66, (entry as ShortArrayIFDEntry).Values[0]);
			}
			// CanonSi.0x0001 (0x0001/Short/1) "0"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.ShotInfo);
				Assert.IsNotNull (entry, "Entry 0x0004 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (2 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (0, (entry as ShortArrayIFDEntry).Values[1]);
			}
			// CanonSi.0x0002 (ISOSpeed/Short/1) "192"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.ShotInfo);
				Assert.IsNotNull (entry, "Entry 0x0004 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (3 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (192, (entry as ShortArrayIFDEntry).Values[2]);
			}
			// CanonSi.0x0003 (0x0003/Short/1) "0"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.ShotInfo);
				Assert.IsNotNull (entry, "Entry 0x0004 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (4 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (0, (entry as ShortArrayIFDEntry).Values[3]);
			}
			// CanonSi.0x0004 (TargetAperture/Short/1) "149"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.ShotInfo);
				Assert.IsNotNull (entry, "Entry 0x0004 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (5 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (149, (entry as ShortArrayIFDEntry).Values[4]);
			}
			// CanonSi.0x0005 (TargetShutterSpeed/Short/1) "189"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.ShotInfo);
				Assert.IsNotNull (entry, "Entry 0x0004 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (6 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (189, (entry as ShortArrayIFDEntry).Values[5]);
			}
			// CanonSi.0x0006 (0x0006/Short/1) "0"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.ShotInfo);
				Assert.IsNotNull (entry, "Entry 0x0004 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (7 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (0, (entry as ShortArrayIFDEntry).Values[6]);
			}
			// CanonSi.0x0007 (WhiteBalance/Short/1) "0"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.ShotInfo);
				Assert.IsNotNull (entry, "Entry 0x0004 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (8 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (0, (entry as ShortArrayIFDEntry).Values[7]);
			}
			// CanonSi.0x0008 (0x0008/Short/1) "3"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.ShotInfo);
				Assert.IsNotNull (entry, "Entry 0x0004 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (9 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (3, (entry as ShortArrayIFDEntry).Values[8]);
			}
			// CanonSi.0x0009 (Sequence/Short/1) "0"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.ShotInfo);
				Assert.IsNotNull (entry, "Entry 0x0004 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (10 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (0, (entry as ShortArrayIFDEntry).Values[9]);
			}
			// CanonSi.0x000A (0x000a/Short/1) "8"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.ShotInfo);
				Assert.IsNotNull (entry, "Entry 0x0004 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (11 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (8, (entry as ShortArrayIFDEntry).Values[10]);
			}
			// CanonSi.0x000B (0x000b/Short/1) "8"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.ShotInfo);
				Assert.IsNotNull (entry, "Entry 0x0004 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (12 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (8, (entry as ShortArrayIFDEntry).Values[11]);
			}
			// CanonSi.0x000C (0x000c/Short/1) "0"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.ShotInfo);
				Assert.IsNotNull (entry, "Entry 0x0004 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (13 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (0, (entry as ShortArrayIFDEntry).Values[12]);
			}
			// CanonSi.0x000D (0x000d/Short/1) "65535"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.ShotInfo);
				Assert.IsNotNull (entry, "Entry 0x0004 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (14 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (65535, (entry as ShortArrayIFDEntry).Values[13]);
			}
			// CanonSi.0x000E (AFPointUsed/Short/1) "0"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.ShotInfo);
				Assert.IsNotNull (entry, "Entry 0x0004 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (15 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (0, (entry as ShortArrayIFDEntry).Values[14]);
			}
			// CanonSi.0x000F (FlashBias/Short/1) "0"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.ShotInfo);
				Assert.IsNotNull (entry, "Entry 0x0004 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (16 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (0, (entry as ShortArrayIFDEntry).Values[15]);
			}
			// CanonSi.0x0010 (0x0010/Short/1) "0"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.ShotInfo);
				Assert.IsNotNull (entry, "Entry 0x0004 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (17 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (0, (entry as ShortArrayIFDEntry).Values[16]);
			}
			// CanonSi.0x0011 (0x0011/Short/1) "0"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.ShotInfo);
				Assert.IsNotNull (entry, "Entry 0x0004 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (18 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (0, (entry as ShortArrayIFDEntry).Values[17]);
			}
			// CanonSi.0x0012 (0x0012/Short/1) "0"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.ShotInfo);
				Assert.IsNotNull (entry, "Entry 0x0004 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (19 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (0, (entry as ShortArrayIFDEntry).Values[18]);
			}
			// CanonSi.0x0013 (SubjectDistance/Short/1) "0"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.ShotInfo);
				Assert.IsNotNull (entry, "Entry 0x0004 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (20 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (0, (entry as ShortArrayIFDEntry).Values[19]);
			}
			// CanonSi.0x0014 (0x0014/Short/1) "0"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.ShotInfo);
				Assert.IsNotNull (entry, "Entry 0x0004 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (21 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (0, (entry as ShortArrayIFDEntry).Values[20]);
			}
			// CanonSi.0x0015 (ApertureValue/Short/1) "0"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.ShotInfo);
				Assert.IsNotNull (entry, "Entry 0x0004 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (22 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (0, (entry as ShortArrayIFDEntry).Values[21]);
			}
			// CanonSi.0x0016 (ShutterSpeedValue/Short/1) "0"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.ShotInfo);
				Assert.IsNotNull (entry, "Entry 0x0004 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (23 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (0, (entry as ShortArrayIFDEntry).Values[22]);
			}
			// CanonSi.0x0017 (0x0017/Short/1) "0"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.ShotInfo);
				Assert.IsNotNull (entry, "Entry 0x0004 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (24 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (0, (entry as ShortArrayIFDEntry).Values[23]);
			}
			// CanonSi.0x0018 (0x0018/Short/1) "0"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.ShotInfo);
				Assert.IsNotNull (entry, "Entry 0x0004 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (25 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (0, (entry as ShortArrayIFDEntry).Values[24]);
			}
			// CanonSi.0x0019 (0x0019/Short/1) "0"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.ShotInfo);
				Assert.IsNotNull (entry, "Entry 0x0004 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (26 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (0, (entry as ShortArrayIFDEntry).Values[25]);
			}
			// CanonSi.0x001A (0x001a/Short/1) "0"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.ShotInfo);
				Assert.IsNotNull (entry, "Entry 0x0004 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (27 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (0, (entry as ShortArrayIFDEntry).Values[26]);
			}
			// CanonSi.0x001B (0x001b/Short/1) "65535"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.ShotInfo);
				Assert.IsNotNull (entry, "Entry 0x0004 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (28 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (65535, (entry as ShortArrayIFDEntry).Values[27]);
			}
			// CanonSi.0x001C (0x001c/Short/1) "65535"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.ShotInfo);
				Assert.IsNotNull (entry, "Entry 0x0004 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (29 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (65535, (entry as ShortArrayIFDEntry).Values[28]);
			}
			// CanonSi.0x001D (0x001d/Short/1) "65535"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.ShotInfo);
				Assert.IsNotNull (entry, "Entry 0x0004 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (30 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (65535, (entry as ShortArrayIFDEntry).Values[29]);
			}
			// CanonSi.0x001E (0x001e/Short/1) "0"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.ShotInfo);
				Assert.IsNotNull (entry, "Entry 0x0004 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (31 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (0, (entry as ShortArrayIFDEntry).Values[30]);
			}
			// CanonSi.0x001F (0x001f/Short/1) "0"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.ShotInfo);
				Assert.IsNotNull (entry, "Entry 0x0004 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (32 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (0, (entry as ShortArrayIFDEntry).Values[31]);
			}
			// CanonSi.0x0020 (0x0020/Short/1) "0"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.ShotInfo);
				Assert.IsNotNull (entry, "Entry 0x0004 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (33 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (0, (entry as ShortArrayIFDEntry).Values[32]);
			}
			// Canon.0x0006 (ImageType/Ascii/32) "Canon EOS 400D DIGITAL"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.ImageType);
				Assert.IsNotNull (entry, "Entry 0x0006 missing in IFD 0");
				Assert.IsNotNull (entry as StringIFDEntry, "Entry is not a string!");
				Assert.AreEqual ("Canon EOS 400D DIGITAL", (entry as StringIFDEntry).Value);
			}
			// Canon.0x0007 (FirmwareVersion/Ascii/32) "Firmware 1.1.0"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.FirmwareVersion);
				Assert.IsNotNull (entry, "Entry 0x0007 missing in IFD 0");
				Assert.IsNotNull (entry as StringIFDEntry, "Entry is not a string!");
				Assert.AreEqual ("Firmware 1.1.0", (entry as StringIFDEntry).Value);
			}
			// Canon.0x0008 (ImageNumber/Long/1) "0"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.ImageNumber);
				Assert.IsNotNull (entry, "Entry 0x0008 missing in IFD 0");
				Assert.IsNotNull (entry as LongIFDEntry, "Entry is not a long!");
				Assert.AreEqual (0, (entry as LongIFDEntry).Value);
			}
			// Canon.0x0009 (OwnerName/Ascii/32) "Mike Gemuende"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.OwnerName);
				Assert.IsNotNull (entry, "Entry 0x0009 missing in IFD 0");
				Assert.IsNotNull (entry as StringIFDEntry, "Entry is not a string!");
				Assert.AreEqual ("Mike Gemuende", (entry as StringIFDEntry).Value);
			}
			// Canon.0x000C (SerialNumber/Long/1) "630363764"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.SerialNumber);
				Assert.IsNotNull (entry, "Entry 0x000C missing in IFD 0");
				Assert.IsNotNull (entry as LongIFDEntry, "Entry is not a long!");
				Assert.AreEqual (630363764, (entry as LongIFDEntry).Value);
			}
			// CanonCf.0x0000 (0x0000/Short/1) "24"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.CustomFunctions);
				Assert.IsNotNull (entry, "Entry 0x000F missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (1 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (24, (entry as ShortArrayIFDEntry).Values[0]);
			}
			// CanonCf.0x0001 (NoiseReduction/Short/1) "0"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.CustomFunctions);
				Assert.IsNotNull (entry, "Entry 0x000F missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (2 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (0, (entry as ShortArrayIFDEntry).Values[1]);
			}
			// CanonCf.0x0002 (ShutterAeLock/Short/1) "256"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.CustomFunctions);
				Assert.IsNotNull (entry, "Entry 0x000F missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (3 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (256, (entry as ShortArrayIFDEntry).Values[2]);
			}
			// CanonCf.0x0003 (MirrorLockup/Short/1) "512"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.CustomFunctions);
				Assert.IsNotNull (entry, "Entry 0x000F missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (4 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (512, (entry as ShortArrayIFDEntry).Values[3]);
			}
			// CanonCf.0x0004 (ExposureLevelIncrements/Short/1) "768"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.CustomFunctions);
				Assert.IsNotNull (entry, "Entry 0x000F missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (5 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (768, (entry as ShortArrayIFDEntry).Values[4]);
			}
			// CanonCf.0x0005 (AFAssist/Short/1) "1024"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.CustomFunctions);
				Assert.IsNotNull (entry, "Entry 0x000F missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (6 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (1024, (entry as ShortArrayIFDEntry).Values[5]);
			}
			// CanonCf.0x0006 (FlashSyncSpeedAv/Short/1) "1280"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.CustomFunctions);
				Assert.IsNotNull (entry, "Entry 0x000F missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (7 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (1280, (entry as ShortArrayIFDEntry).Values[6]);
			}
			// CanonCf.0x0007 (AEBSequence/Short/1) "1536"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.CustomFunctions);
				Assert.IsNotNull (entry, "Entry 0x000F missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (8 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (1536, (entry as ShortArrayIFDEntry).Values[7]);
			}
			// CanonCf.0x0008 (ShutterCurtainSync/Short/1) "1792"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.CustomFunctions);
				Assert.IsNotNull (entry, "Entry 0x000F missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (9 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (1792, (entry as ShortArrayIFDEntry).Values[8]);
			}
			// CanonCf.0x0009 (LensAFStopButton/Short/1) "2048"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.CustomFunctions);
				Assert.IsNotNull (entry, "Entry 0x000F missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (10 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (2048, (entry as ShortArrayIFDEntry).Values[9]);
			}
			// CanonCf.0x000A (FillFlashAutoReduction/Short/1) "2304"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.CustomFunctions);
				Assert.IsNotNull (entry, "Entry 0x000F missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (11 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (2304, (entry as ShortArrayIFDEntry).Values[10]);
			}
			// CanonCf.0x000B (MenuButtonReturn/Short/1) "2560"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.CustomFunctions);
				Assert.IsNotNull (entry, "Entry 0x000F missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.IsTrue (12 <= (entry as ShortArrayIFDEntry).Values.Length);
				Assert.AreEqual (2560, (entry as ShortArrayIFDEntry).Values[11]);
			}
			// Canon.0x0010 (ModelID/Long/1) "2147484214"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.ModelID);
				Assert.IsNotNull (entry, "Entry 0x0010 missing in IFD 0");
				Assert.IsNotNull (entry as LongIFDEntry, "Entry is not a long!");
				Assert.AreEqual (2147484214, (entry as LongIFDEntry).Value);
			}
			// Canon.0x0015 (0x0015/Long/1) "2684354560"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.SerialNumberFormat);
				Assert.IsNotNull (entry, "Entry 0x0015 missing in IFD 0");
				Assert.IsNotNull (entry as LongIFDEntry, "Entry is not a long!");
				Assert.AreEqual (2684354560, (entry as LongIFDEntry).Value);
			}
			// Canon.0x0019 (0x0019/Short/1) "1"
			{
				// TODO: Unknown IFD tag: Canon / 0x0019
				var entry = makernote_structure.GetEntry (0, 0x0019);
				Assert.IsNotNull (entry, "Entry 0x0019 missing in IFD 0");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (1, (entry as ShortIFDEntry).Value);
			}
			// Canon.0x0026 (0x0026/Short/48) "96 0 9 9 66 42 66 42 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 65503 65503 65503 65503 65503 65503 65503 65503 65503 21 21 21 21 21 21 21 21 21 16 0 511 65535"
			{
				// TODO: Unknown IFD tag: Canon / 0x0026
				var entry = makernote_structure.GetEntry (0, 0x0026);
				Assert.IsNotNull (entry, "Entry 0x0026 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.AreEqual (new ushort[] { 96, 0, 9, 9, 66, 42, 66, 42, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 65503, 65503, 65503, 65503, 65503, 65503, 65503, 65503, 65503, 21, 21, 21, 21, 21, 21, 21, 21, 21, 16, 0, 511, 65535 }, (entry as ShortArrayIFDEntry).Values);
			}
			// Canon.0x0093 (0x0093/Short/17) "34 44545 144 0 0 0 3 0 0 0 0 0 0 0 0 0 54"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.CanonFileInfo);
				Assert.IsNotNull (entry, "Entry 0x0093 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.AreEqual (new ushort[] { 34, 44545, 144, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54 }, (entry as ShortArrayIFDEntry).Values);
			}
			// Canon.0x0095 (0x0095/Ascii/64) "EF-S17-55mm f/2.8 IS USM"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.LensModel);
				Assert.IsNotNull (entry, "Entry 0x0095 missing in IFD 0");
				Assert.IsNotNull (entry as StringIFDEntry, "Entry is not a string!");
				Assert.AreEqual ("EF-S17-55mm f/2.8 IS USM", (entry as StringIFDEntry).Value);
			}
			// Canon.0x0096 (0x0096/Ascii/16) "H0733598"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.SerialInfo);
				Assert.IsNotNull (entry, "Entry 0x0096 missing in IFD 0");
				Assert.IsNotNull (entry as StringIFDEntry, "Entry is not a string!");
				Assert.AreEqual ("H0733598", (entry as StringIFDEntry).Value);
			}
			// Canon.0x00A0 (0x00a0/Short/14) "28 0 3 0 0 0 0 0 32768 5200 129 0 0 0"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.ProcessingInfo);
				Assert.IsNotNull (entry, "Entry 0x00A0 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.AreEqual (new ushort[] { 28, 0, 3, 0, 0, 0, 0, 0, 32768, 5200, 129, 0, 0, 0 }, (entry as ShortArrayIFDEntry).Values);
			}
			// Canon.0x00AA (0x00aa/Short/5) "10 485 1024 1024 649"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.MeasuredColor);
				Assert.IsNotNull (entry, "Entry 0x00AA missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.AreEqual (new ushort[] { 10, 485, 1024, 1024, 649 }, (entry as ShortArrayIFDEntry).Values);
			}
			// Canon.0x00B4 (0x00b4/Short/1) "1"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.ColorSpace);
				Assert.IsNotNull (entry, "Entry 0x00B4 missing in IFD 0");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (1, (entry as ShortIFDEntry).Value);
			}
			// Canon.0x00E0 (0x00e0/Short/17) "34 3948 2622 1 1 52 23 3939 2614 0 0 0 0 0 0 0 0"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.SensorInfo);
				Assert.IsNotNull (entry, "Entry 0x00E0 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.AreEqual (new ushort[] { 34, 3948, 2622, 1, 1, 52, 23, 3939, 2614, 0, 0, 0, 0, 0, 0, 0, 0 }, (entry as ShortArrayIFDEntry).Values);
			}
			// Canon.0x4001 (0x4001/Short/796) "1 863 1024 1024 365 570 1024 1024 525 372 1024 1024 767 224 284 285 101 165 320 320 164 117 345 345 256 0 0 146 143 149 0 427 1030 1024 617 231 48 48 4 422 811 813 124 27 240 239 391 427 1006 1003 609 236 51 51 4 418 785 787 114 29 235 233 390 2668 1024 1024 1378 6430 2668 1024 1024 1378 6430 2666 1023 1024 1378 6430 2341 1024 1024 1560 5200 2731 1024 1024 1304 7000 2539 1024 1024 1419 6000 1689 1102 1102 2606 3200 2000 1043 1043 2189 3769 2341 1024 1024 1560 5189 2781 1024 1024 1367 6689 512 1024 1024 8191 4799 512 1024 1024 8191 4799 512 1024 1024 8191 4799 1613 1052 1052 1823 3689 65155 336 953 10900 65173 344 928 10000 65219 362 867 8300 65268 384 804 7000 65326 413 739 6000 65355 429 708 5600 65390 448 672 5200 65440 479 624 4700 65500 521 572 4200 27 568 523 3800 84 613 481 3500 151 668 433 3200 199 713 403 3000 257 770 369 2800 382 925 305 2400 500 2070 2085 256 255 256 256 20 23 20 21 30 18 17 23 25 22 28 27 26 37 33 39 31 35 37 21 26 26 29 26 29 27 31 41 32 35 34 40 48 58 56 108 24 24 26 25 27 24 32 33 33 29 63 0 55 63 117 152 34 29 29 27 29 40 45 58 67 70 66 58 64 74 66 57 79 36 43 49 54 39 48 46 43 60 56 55 120 120 120 50 64 62 74 55 62 49 55 72 57 57 56 59 180 198 176 276 58 55 59 52 56 47 56 63 59 59 103 0 160 180 310 397 76 64 63 58 61 79 87 110 125 126 115 100 55 63 54 49 67 35 36 45 47 37 45 41 39 53 43 44 100 103 104 48 58 56 65 52 57 48 54 66 51 53 47 47 155 177 160 275 55 53 56 52 55 45 56 57 53 47 90 0 165 183 316 397 78 66 64 58 61 78 85 104 116 118 101 78 61 69 59 46 59 26 30 33 35 24 28 26 23 31 28 25 109 107 103 37 44 42 49 35 38 28 30 38 29 28 26 24 161 170 144 208 39 36 37 32 32 26 29 32 28 30 45 0 133 145 237 295 46 38 37 33 34 40 42 51 55 54 46 37 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 7 9 36 70 4 15 4 12 20 9 21 9 3 6 19 3 20 40 93 486 83 109 69 51 115 25 41 25 11 10 34 2 13 28 92 4670 216 132 117 106 145 34 44 20 8 5 12 0 99 209 1456 33005 644 949 1486 2096 2303 297 215 117 61 48 162 12 144 192 6885 1113 0 1152 1024 1024 2729 3958 7000 1 4001 210 65394 3861 4185 65308 154 4337 4023 3890 4128 65510 65483 65519 3908 3739 3978 65510 31 59 4313 4064 56 17 4487 4218 65502 65474 0 514 512 257 259 0 1 257 259 3082 2305 0 11 1539 1284 8 519 0 0 0 0 0 256 0 27358 0 62069 0 62002 0 39069 1024 1024 5 1024 0 0 0 0 0 8191 512 8191 512 1024 1024 718 433 480 678 387 865 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
			{
				// TODO: Unknown IFD tag: Canon / 0x4001
				var entry = makernote_structure.GetEntry (0, 0x4001);
				Assert.IsNotNull (entry, "Entry 0x4001 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.AreEqual (new ushort[] { 1, 863, 1024, 1024, 365, 570, 1024, 1024, 525, 372, 1024, 1024, 767, 224, 284, 285, 101, 165, 320, 320, 164, 117, 345, 345, 256, 0, 0, 146, 143, 149, 0, 427, 1030, 1024, 617, 231, 48, 48, 4, 422, 811, 813, 124, 27, 240, 239, 391, 427, 1006, 1003, 609, 236, 51, 51, 4, 418, 785, 787, 114, 29, 235, 233, 390, 2668, 1024, 1024, 1378, 6430, 2668, 1024, 1024, 1378, 6430, 2666, 1023, 1024, 1378, 6430, 2341, 1024, 1024, 1560, 5200, 2731, 1024, 1024, 1304, 7000, 2539, 1024, 1024, 1419, 6000, 1689, 1102, 1102, 2606, 3200, 2000, 1043, 1043, 2189, 3769, 2341, 1024, 1024, 1560, 5189, 2781, 1024, 1024, 1367, 6689, 512, 1024, 1024, 8191, 4799, 512, 1024, 1024, 8191, 4799, 512, 1024, 1024, 8191, 4799, 1613, 1052, 1052, 1823, 3689, 65155, 336, 953, 10900, 65173, 344, 928, 10000, 65219, 362, 867, 8300, 65268, 384, 804, 7000, 65326, 413, 739, 6000, 65355, 429, 708, 5600, 65390, 448, 672, 5200, 65440, 479, 624, 4700, 65500, 521, 572, 4200, 27, 568, 523, 3800, 84, 613, 481, 3500, 151, 668, 433, 3200, 199, 713, 403, 3000, 257, 770, 369, 2800, 382, 925, 305, 2400, 500, 2070, 2085, 256, 255, 256, 256, 20, 23, 20, 21, 30, 18, 17, 23, 25, 22, 28, 27, 26, 37, 33, 39, 31, 35, 37, 21, 26, 26, 29, 26, 29, 27, 31, 41, 32, 35, 34, 40, 48, 58, 56, 108, 24, 24, 26, 25, 27, 24, 32, 33, 33, 29, 63, 0, 55, 63, 117, 152, 34, 29, 29, 27, 29, 40, 45, 58, 67, 70, 66, 58, 64, 74, 66, 57, 79, 36, 43, 49, 54, 39, 48, 46, 43, 60, 56, 55, 120, 120, 120, 50, 64, 62, 74, 55, 62, 49, 55, 72, 57, 57, 56, 59, 180, 198, 176, 276, 58, 55, 59, 52, 56, 47, 56, 63, 59, 59, 103, 0, 160, 180, 310, 397, 76, 64, 63, 58, 61, 79, 87, 110, 125, 126, 115, 100, 55, 63, 54, 49, 67, 35, 36, 45, 47, 37, 45, 41, 39, 53, 43, 44, 100, 103, 104, 48, 58, 56, 65, 52, 57, 48, 54, 66, 51, 53, 47, 47, 155, 177, 160, 275, 55, 53, 56, 52, 55, 45, 56, 57, 53, 47, 90, 0, 165, 183, 316, 397, 78, 66, 64, 58, 61, 78, 85, 104, 116, 118, 101, 78, 61, 69, 59, 46, 59, 26, 30, 33, 35, 24, 28, 26, 23, 31, 28, 25, 109, 107, 103, 37, 44, 42, 49, 35, 38, 28, 30, 38, 29, 28, 26, 24, 161, 170, 144, 208, 39, 36, 37, 32, 32, 26, 29, 32, 28, 30, 45, 0, 133, 145, 237, 295, 46, 38, 37, 33, 34, 40, 42, 51, 55, 54, 46, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 9, 36, 70, 4, 15, 4, 12, 20, 9, 21, 9, 3, 6, 19, 3, 20, 40, 93, 486, 83, 109, 69, 51, 115, 25, 41, 25, 11, 10, 34, 2, 13, 28, 92, 4670, 216, 132, 117, 106, 145, 34, 44, 20, 8, 5, 12, 0, 99, 209, 1456, 33005, 644, 949, 1486, 2096, 2303, 297, 215, 117, 61, 48, 162, 12, 144, 192, 6885, 1113, 0, 1152, 1024, 1024, 2729, 3958, 7000, 1, 4001, 210, 65394, 3861, 4185, 65308, 154, 4337, 4023, 3890, 4128, 65510, 65483, 65519, 3908, 3739, 3978, 65510, 31, 59, 4313, 4064, 56, 17, 4487, 4218, 65502, 65474, 0, 514, 512, 257, 259, 0, 1, 257, 259, 3082, 2305, 0, 11, 1539, 1284, 8, 519, 0, 0, 0, 0, 0, 256, 0, 27358, 0, 62069, 0, 62002, 0, 39069, 1024, 1024, 5, 1024, 0, 0, 0, 0, 0, 8191, 512, 8191, 512, 1024, 1024, 718, 433, 480, 678, 387, 865, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, (entry as ShortArrayIFDEntry).Values);
			}
			// Canon.0x4008 (0x4008/Short/3) "129 129 129"
			{
				var entry = makernote_structure.GetEntry (0, (ushort)CanonMakerNoteEntryTag.BlackLevel);
				Assert.IsNotNull (entry, "Entry 0x4008 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.AreEqual (new ushort[] { 129, 129, 129 }, (entry as ShortArrayIFDEntry).Values);
			}
			// Canon.0x4009 (0x4009/Short/3) "0 0 0"
			{
				// TODO: Unknown IFD tag: Canon / 0x4009
				var entry = makernote_structure.GetEntry (0, 0x4009);
				Assert.IsNotNull (entry, "Entry 0x4009 missing in IFD 0");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.AreEqual (new ushort[] { 0, 0, 0 }, (entry as ShortArrayIFDEntry).Values);
			}
			// Canon.0x4010 (0x4010/Ascii/32) ""
			{
				// TODO: Unknown IFD tag: Canon / 0x4010
				var entry = makernote_structure.GetEntry (0, 0x4010);
				Assert.IsNotNull (entry, "Entry 0x4010 missing in IFD 0");
				Assert.IsNotNull (entry as StringIFDEntry, "Entry is not a string!");
				Assert.AreEqual ("", (entry as StringIFDEntry).Value.Trim ());
			}
			// Canon.0x4011 (0x4011/Undefined/252) "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 "
			{
				// TODO: Unknown IFD tag: Canon / 0x4011
				var entry = makernote_structure.GetEntry (0, 0x4011);
				Assert.IsNotNull (entry, "Entry 0x4011 missing in IFD 0");
				Assert.IsNotNull (entry as UndefinedIFDEntry, "Entry is not an undefined IFD entry!");
				var bytes = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
				var parsed_bytes = (entry as UndefinedIFDEntry).Data.Data;
				Assert.AreEqual (bytes, parsed_bytes);
			}
			// Photo.0x9286 (UserComment/UserComment/264) ""
			//  --> Test removed because of CommentModificationValidator, value is checked there.
			// Photo.0xA000 (FlashpixVersion/Undefined/4) "48 49 48 48 "
			{
				var entry = exif_structure.GetEntry (0, (ushort)ExifEntryTag.FlashpixVersion);
				Assert.IsNotNull (entry, "Entry 0xA000 missing in IFD 0");
				Assert.IsNotNull (entry as UndefinedIFDEntry, "Entry is not an undefined IFD entry!");
				var bytes = new byte[] { 48, 49, 48, 48 };
				var parsed_bytes = (entry as UndefinedIFDEntry).Data.Data;
				Assert.AreEqual (bytes, parsed_bytes);
			}
			// Photo.0xA001 (ColorSpace/Short/1) "1"
			{
				var entry = exif_structure.GetEntry (0, (ushort)ExifEntryTag.ColorSpace);
				Assert.IsNotNull (entry, "Entry 0xA001 missing in IFD 0");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (1, (entry as ShortIFDEntry).Value);
			}
			// Photo.0xA20E (FocalPlaneXResolution/Rational/1) "1162161792/262144"
			{
				var entry = exif_structure.GetEntry (0, (ushort)ExifEntryTag.FocalPlaneXResolution);
				Assert.IsNotNull (entry, "Entry 0xA20E missing in IFD 0");
				Assert.IsNotNull (entry as RationalIFDEntry, "Entry is not a rational!");
				Assert.AreEqual (1162161792, (entry as RationalIFDEntry).Value.Numerator);
				Assert.AreEqual (262144, (entry as RationalIFDEntry).Value.Denominator);
			}
			// Photo.0xA20F (FocalPlaneYResolution/Rational/1) "1167486720/262144"
			{
				var entry = exif_structure.GetEntry (0, (ushort)ExifEntryTag.FocalPlaneYResolution);
				Assert.IsNotNull (entry, "Entry 0xA20F missing in IFD 0");
				Assert.IsNotNull (entry as RationalIFDEntry, "Entry is not a rational!");
				Assert.AreEqual (1167486720, (entry as RationalIFDEntry).Value.Numerator);
				Assert.AreEqual (262144, (entry as RationalIFDEntry).Value.Denominator);
			}
			// Photo.0xA210 (FocalPlaneResolutionUnit/Short/1) "2"
			{
				var entry = exif_structure.GetEntry (0, (ushort)ExifEntryTag.FocalPlaneResolutionUnit);
				Assert.IsNotNull (entry, "Entry 0xA210 missing in IFD 0");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (2, (entry as ShortIFDEntry).Value);
			}
			// Photo.0xA401 (CustomRendered/Short/1) "0"
			{
				var entry = exif_structure.GetEntry (0, (ushort)ExifEntryTag.CustomRendered);
				Assert.IsNotNull (entry, "Entry 0xA401 missing in IFD 0");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (0, (entry as ShortIFDEntry).Value);
			}
			// Photo.0xA402 (ExposureMode/Short/1) "1"
			{
				var entry = exif_structure.GetEntry (0, (ushort)ExifEntryTag.ExposureMode);
				Assert.IsNotNull (entry, "Entry 0xA402 missing in IFD 0");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (1, (entry as ShortIFDEntry).Value);
			}
			// Photo.0xA403 (WhiteBalance/Short/1) "0"
			{
				var entry = exif_structure.GetEntry (0, (ushort)ExifEntryTag.WhiteBalance);
				Assert.IsNotNull (entry, "Entry 0xA403 missing in IFD 0");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (0, (entry as ShortIFDEntry).Value);
			}
			// Photo.0xA406 (SceneCaptureType/Short/1) "0"
			{
				var entry = exif_structure.GetEntry (0, (ushort)ExifEntryTag.SceneCaptureType);
				Assert.IsNotNull (entry, "Entry 0xA406 missing in IFD 0");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (0, (entry as ShortIFDEntry).Value);
			}
			// Image.0x8773 (InterColorProfile/Undefined/3140) "0 0 12 68 85 67 67 77 2 64 0 0 109 110 116 114 82 71 66 32 88 89 90 32 7 211 0 4 0 4 0 0 0 0 0 0 97 99 115 112 77 83 70 84 0 0 0 0 67 65 78 79 90 48 48 57 0 0 0 0 0 0 0 0 0 0 0 0 0 0 246 214 0 1 0 0 0 0 211 45 67 65 78 79 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 14 114 84 82 67 0 0 1 44 0 0 8 12 103 84 82 67 0 0 1 44 0 0 8 12 98 84 82 67 0 0 1 44 0 0 8 12 114 88 89 90 0 0 9 56 0 0 0 20 103 88 89 90 0 0 9 76 0 0 0 20 98 88 89 90 0 0 9 96 0 0 0 20 99 104 97 100 0 0 9 116 0 0 0 44 99 112 114 116 0 0 9 160 0 0 0 64 100 109 110 100 0 0 9 224 0 0 0 124 100 109 100 100 0 0 10 92 0 0 0 148 119 116 112 116 0 0 10 240 0 0 0 20 116 101 99 104 0 0 11 4 0 0 0 12 100 101 115 99 0 0 10 92 0 0 0 148 117 99 109 73 0 0 11 16 0 0 1 52 99 117 114 118 0 0 0 0 0 0 4 0 0 0 0 4 0 9 0 14 0 19 0 24 0 29 0 34 0 39 0 44 0 49 0 54 0 59 0 64 0 69 0 74 0 79 0 84 0 89 0 94 0 99 0 104 0 109 0 114 0 118 0 123 0 128 0 133 0 138 0 143 0 148 0 153 0 158 0 163 0 168 0 173 0 178 0 183 0 188 0 193 0 198 0 203 0 208 0 213 0 218 0 223 0 229 0 234 0 240 0 245 0 251 1 1 1 6 1 12 1 18 1 24 1 30 1 36 1 43 1 49 1 55 1 62 1 68 1 75 1 82 1 89 1 95 1 102 1 109 1 117 1 124 1 131 1 138 1 146 1 153 1 161 1 169 1 176 1 184 1 192 1 200 1 208 1 216 1 225 1 233 1 241 1 250 2 2 2 11 2 20 2 29 2 38 2 47 2 56 2 65 2 74 2 83 2 93 2 102 2 112 2 122 2 131 2 141 2 151 2 161 2 172 2 182 2 192 2 202 2 213 2 224 2 234 2 245 3 0 3 11 3 22 3 33 3 44 3 55 3 67 3 78 3 90 3 102 3 113 3 125 3 137 3 149 3 161 3 173 3 186 3 198 3 211 3 223 3 236 3 249 4 6 4 19 4 32 4 45 4 58 4 71 4 85 4 98 4 112 4 126 4 140 4 154 4 168 4 182 4 196 4 210 4 225 4 239 4 254 5 13 5 27 5 42 5 57 5 72 5 88 5 103 5 118 5 134 5 149 5 165 5 181 5 197 5 213 5 229 5 245 6 5 6 22 6 38 6 55 6 72 6 88 6 105 6 122 6 139 6 157 6 174 6 191 6 209 6 227 6 244 7 6 7 24 7 42 7 60 7 79 7 97 7 115 7 134 7 153 7 171 7 190 7 209 7 228 7 248 8 11 8 30 8 50 8 69 8 89 8 109 8 129 8 149 8 169 8 190 8 210 8 230 8 251 9 16 9 36 9 57 9 78 9 100 9 121 9 142 9 164 9 185 9 207 9 229 9 251 10 17 10 39 10 61 10 83 10 106 10 128 10 151 10 174 10 197 10 220 10 243 11 10 11 33 11 57 11 80 11 104 11 128 11 152 11 176 11 200 11 224 11 249 12 17 12 42 12 66 12 91 12 116 12 141 12 166 12 192 12 217 12 242 13 12 13 38 13 64 13 90 13 116 13 142 13 168 13 195 13 221 13 248 14 19 14 46 14 73 14 100 14 127 14 154 14 182 14 209 14 237 15 9 15 37 15 65 15 93 15 121 15 150 15 178 15 207 15 236 16 9 16 38 16 67 16 96 16 125 16 155 16 185 16 214 16 244 17 18 17 48 17 78 17 109 17 139 17 170 17 200 17 231 18 6 18 37 18 68 18 100 18 131 18 163 18 194 18 226 19 2 19 34 19 66 19 99 19 131 19 164 19 196 19 229 20 6 20 39 20 72 20 105 20 139 20 172 20 206 20 240 21 17 21 52 21 86 21 120 21 154 21 189 21 223 22 2 22 37 22 72 22 107 22 143 22 178 22 213 22 249 23 29 23 65 23 101 23 137 23 173 23 210 23 246 24 27 24 64 24 101 24 138 24 175 24 212 24 250 25 31 25 69 25 107 25 145 25 183 25 221 26 3 26 42 26 80 26 119 26 158 26 197 26 236 27 19 27 59 27 98 27 138 27 177 27 217 28 1 28 41 28 82 28 122 28 163 28 203 28 244 29 29 29 70 29 111 29 153 29 194 29 236 30 22 30 63 30 105 30 147 30 190 30 232 31 19 31 61 31 104 31 147 31 190 31 233 32 21 32 64 32 108 32 151 32 195 32 239 33 27 33 72 33 116 33 161 33 205 33 250 34 39 34 84 34 129 34 175 34 220 35 10 35 55 35 101 35 147 35 194 35 240 36 30 36 77 36 124 36 170 36 217 37 8 37 56 37 103 37 151 37 198 37 246 38 38 38 86 38 134 38 183 38 231 39 24 39 73 39 121 39 170 39 220 40 13 40 62 40 112 40 162 40 212 41 6 41 56 41 106 41 157 41 207 42 2 42 53 42 104 42 155 42 206 43 1 43 53 43 105 43 157 43 209 44 5 44 57 44 109 44 162 44 215 45 11 45 64 45 117 45 171 45 224 46 22 46 75 46 129 46 183 46 237 47 35 47 90 47 144 47 199 47 254 48 53 48 108 48 163 48 218 49 18 49 74 49 129 49 185 49 241 50 42 50 98 50 155 50 211 51 12 51 69 51 126 51 183 51 241 52 42 52 100 52 158 52 216 53 18 53 76 53 135 53 193 53 252 54 55 54 114 54 173 54 232 55 36 55 95 55 155 55 215 56 19 56 79 56 140 56 200 57 5 57 65 57 126 57 187 57 249 58 54 58 115 58 177 58 239 59 45 59 107 59 169 59 231 60 38 60 101 60 164 60 227 61 34 61 97 61 160 61 224 62 32 62 96 62 160 62 224 63 32 63 97 63 161 63 226 64 35 64 100 64 165 64 231 65 40 65 106 65 172 65 238 66 48 66 114 66 180 66 247 67 58 67 125 67 192 68 3 68 70 68 138 68 205 69 17 69 85 69 153 69 221 70 34 70 102 70 171 70 240 71 53 71 122 71 191 72 5 72 74 72 144 72 214 73 28 73 98 73 169 73 239 74 54 74 125 74 196 75 11 75 82 75 154 75 225 76 41 76 113 76 185 77 2 77 74 77 146 77 219 78 36 78 109 78 182 79 0 79 73 79 147 79 220 80 38 80 112 80 187 81 5 81 80 81 154 81 229 82 48 82 124 82 199 83 18 83 94 83 170 83 246 84 66 84 142 84 219 85 39 85 116 85 193 86 14 86 91 86 169 86 246 87 68 87 146 87 224 88 46 88 124 88 203 89 26 89 104 89 183 90 7 90 86 90 165 90 245 91 69 91 149 91 229 92 53 92 133 92 214 93 39 93 119 93 201 94 26 94 107 94 189 95 14 95 96 95 178 96 4 96 87 96 169 96 252 97 79 97 162 97 245 98 72 98 155 98 239 99 67 99 151 99 235 100 63 100 148 100 232 101 61 101 146 101 231 102 60 102 146 102 231 103 61 103 147 103 233 104 63 104 149 104 236 105 67 105 153 105 240 106 72 106 159 106 247 107 78 107 166 107 254 108 86 108 175 109 7 109 96 109 185 110 17 110 107 110 196 111 29 111 119 111 209 112 43 112 133 112 223 113 58 113 148 113 239 114 74 114 165 115 1 115 92 115 184 116 19 116 111 116 204 117 40 117 132 117 225 118 62 118 155 118 248 119 85 119 179 120 16 120 110 120 204 121 42 121 136 121 231 122 69 122 164 123 3 123 98 123 193 124 33 124 129 124 224 125 64 125 160 126 1 126 97 126 194 127 35 127 132 127 229 128 70 128 168 129 9 129 107 129 205 130 47 130 145 130 244 131 87 131 185 132 28 132 128 132 227 133 70 133 170 134 14 134 114 134 214 135 58 135 159 136 4 136 104 136 205 137 51 137 152 137 254 138 99 138 201 139 47 139 149 139 252 140 98 140 201 141 48 141 151 141 254 142 102 142 205 143 53 143 157 144 5 144 109 144 214 145 63 145 167 146 16 146 121 146 227 147 76 147 182 148 32 148 138 148 244 149 94 149 201 150 51 150 158 151 9 151 117 151 224 152 76 152 183 153 35 153 143 153 251 154 104 154 213 155 65 155 174 156 27 156 137 156 246 157 100 157 210 158 64 158 174 159 28 159 139 159 249 160 104 160 215 161 70 161 182 162 37 162 149 163 5 163 117 163 229 164 86 164 198 165 55 165 168 166 25 166 139 166 252 167 110 167 224 168 82 168 196 169 54 169 169 170 28 170 142 171 2 171 117 171 232 172 92 172 208 173 68 173 184 174 44 174 161 175 21 175 138 175 255 176 116 176 234 177 95 177 213 178 75 178 193 179 55 179 174 180 36 180 155 181 18 181 137 182 1 182 120 182 240 183 104 183 224 184 88 184 209 185 73 185 194 186 59 186 180 187 45 187 167 188 33 188 154 189 20 189 143 190 9 190 132 190 254 191 121 191 244 192 112 192 235 193 103 193 227 194 95 194 219 195 87 195 212 196 81 196 205 197 75 197 200 198 69 198 195 199 65 199 191 200 61 200 187 201 58 201 185 202 56 202 183 203 54 203 181 204 53 204 181 205 53 205 181 206 53 206 182 207 55 207 184 208 57 208 186 209 59 209 189 210 63 210 193 211 67 211 197 212 72 212 203 213 78 213 209 214 84 214 216 215 91 215 223 216 99 216 231 217 108 217 240 218 117 218 250 219 127 220 4 220 138 221 16 221 150 222 28 222 162 223 40 223 175 224 54 224 189 225 68 225 203 226 83 226 218 227 98 227 234 228 115 228 251 229 132 230 13 230 150 231 31 231 168 232 50 232 188 233 70 233 208 234 90 234 229 235 111 235 250 236 133 237 16 237 156 238 39 238 179 239 63 239 203 240 88 240 228 241 113 241 254 242 139 243 25 243 166 244 52 244 194 245 80 245 222 246 108 246 251 247 138 248 25 248 168 249 55 249 199 250 87 250 231 251 119 252 7 252 152 253 40 253 185 254 74 254 219 255 109 255 255 88 89 90 32 0 0 0 0 0 0 111 160 0 0 56 242 0 0 3 143 88 89 90 32 0 0 0 0 0 0 98 150 0 0 183 138 0 0 24 218 88 89 90 32 0 0 0 0 0 0 36 160 0 0 15 133 0 0 182 196 115 102 51 50 0 0 0 0 0 1 12 63 0 0 5 220 255 255 243 39 0 0 7 144 0 0 253 146 255 255 251 162 255 255 253 163 0 0 3 220 0 0 192 113 116 101 120 116 0 0 0 0 67 111 112 121 114 105 103 104 116 32 40 99 41 32 50 48 48 51 44 32 67 97 110 111 110 32 73 110 99 46 32 32 65 108 108 32 114 105 103 104 116 115 32 114 101 115 101 114 118 101 100 46 0 0 0 0 100 101 115 99 0 0 0 0 0 0 0 11 67 97 110 111 110 32 73 110 99 46 0 0 0 0 0 0 0 0 10 0 67 0 97 0 110 0 111 0 110 0 32 0 73 0 110 0 99 0 46 0 0 11 67 97 110 111 110 32 73 110 99 46 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 100 101 115 99 0 0 0 0 0 0 0 19 115 82 71 66 32 118 49 46 51 49 32 40 67 97 110 111 110 41 0 0 0 0 0 0 0 0 18 0 115 0 82 0 71 0 66 0 32 0 118 0 49 0 46 0 51 0 49 0 32 0 40 0 67 0 97 0 110 0 111 0 110 0 41 0 0 19 115 82 71 66 32 118 49 46 51 49 32 40 67 97 110 111 110 41 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 88 89 90 32 0 0 0 0 0 0 246 214 0 1 0 0 0 0 211 45 115 105 103 32 0 0 0 0 67 82 84 32 117 99 109 73 67 83 73 71 0 0 1 40 1 8 0 0 1 8 0 0 1 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 86 73 84 32 76 97 98 111 114 97 116 111 114 121 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 67 73 78 67 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 243 84 0 1 0 0 0 1 22 207 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 20 0 0 0 0 0 1 0 1 0 0 0 0 0 1 "
			{
				var entry = structure.GetEntry (0, (ushort)IFDEntryTag.ICCProfile);
				Assert.IsNotNull (entry, "Entry 0x8773 missing in IFD 0");
				Assert.IsNotNull (entry as UndefinedIFDEntry, "Entry is not an undefined IFD entry!");
				var bytes = new byte[] { 0, 0, 12, 68, 85, 67, 67, 77, 2, 64, 0, 0, 109, 110, 116, 114, 82, 71, 66, 32, 88, 89, 90, 32, 7, 211, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 97, 99, 115, 112, 77, 83, 70, 84, 0, 0, 0, 0, 67, 65, 78, 79, 90, 48, 48, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 246, 214, 0, 1, 0, 0, 0, 0, 211, 45, 67, 65, 78, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 114, 84, 82, 67, 0, 0, 1, 44, 0, 0, 8, 12, 103, 84, 82, 67, 0, 0, 1, 44, 0, 0, 8, 12, 98, 84, 82, 67, 0, 0, 1, 44, 0, 0, 8, 12, 114, 88, 89, 90, 0, 0, 9, 56, 0, 0, 0, 20, 103, 88, 89, 90, 0, 0, 9, 76, 0, 0, 0, 20, 98, 88, 89, 90, 0, 0, 9, 96, 0, 0, 0, 20, 99, 104, 97, 100, 0, 0, 9, 116, 0, 0, 0, 44, 99, 112, 114, 116, 0, 0, 9, 160, 0, 0, 0, 64, 100, 109, 110, 100, 0, 0, 9, 224, 0, 0, 0, 124, 100, 109, 100, 100, 0, 0, 10, 92, 0, 0, 0, 148, 119, 116, 112, 116, 0, 0, 10, 240, 0, 0, 0, 20, 116, 101, 99, 104, 0, 0, 11, 4, 0, 0, 0, 12, 100, 101, 115, 99, 0, 0, 10, 92, 0, 0, 0, 148, 117, 99, 109, 73, 0, 0, 11, 16, 0, 0, 1, 52, 99, 117, 114, 118, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 4, 0, 9, 0, 14, 0, 19, 0, 24, 0, 29, 0, 34, 0, 39, 0, 44, 0, 49, 0, 54, 0, 59, 0, 64, 0, 69, 0, 74, 0, 79, 0, 84, 0, 89, 0, 94, 0, 99, 0, 104, 0, 109, 0, 114, 0, 118, 0, 123, 0, 128, 0, 133, 0, 138, 0, 143, 0, 148, 0, 153, 0, 158, 0, 163, 0, 168, 0, 173, 0, 178, 0, 183, 0, 188, 0, 193, 0, 198, 0, 203, 0, 208, 0, 213, 0, 218, 0, 223, 0, 229, 0, 234, 0, 240, 0, 245, 0, 251, 1, 1, 1, 6, 1, 12, 1, 18, 1, 24, 1, 30, 1, 36, 1, 43, 1, 49, 1, 55, 1, 62, 1, 68, 1, 75, 1, 82, 1, 89, 1, 95, 1, 102, 1, 109, 1, 117, 1, 124, 1, 131, 1, 138, 1, 146, 1, 153, 1, 161, 1, 169, 1, 176, 1, 184, 1, 192, 1, 200, 1, 208, 1, 216, 1, 225, 1, 233, 1, 241, 1, 250, 2, 2, 2, 11, 2, 20, 2, 29, 2, 38, 2, 47, 2, 56, 2, 65, 2, 74, 2, 83, 2, 93, 2, 102, 2, 112, 2, 122, 2, 131, 2, 141, 2, 151, 2, 161, 2, 172, 2, 182, 2, 192, 2, 202, 2, 213, 2, 224, 2, 234, 2, 245, 3, 0, 3, 11, 3, 22, 3, 33, 3, 44, 3, 55, 3, 67, 3, 78, 3, 90, 3, 102, 3, 113, 3, 125, 3, 137, 3, 149, 3, 161, 3, 173, 3, 186, 3, 198, 3, 211, 3, 223, 3, 236, 3, 249, 4, 6, 4, 19, 4, 32, 4, 45, 4, 58, 4, 71, 4, 85, 4, 98, 4, 112, 4, 126, 4, 140, 4, 154, 4, 168, 4, 182, 4, 196, 4, 210, 4, 225, 4, 239, 4, 254, 5, 13, 5, 27, 5, 42, 5, 57, 5, 72, 5, 88, 5, 103, 5, 118, 5, 134, 5, 149, 5, 165, 5, 181, 5, 197, 5, 213, 5, 229, 5, 245, 6, 5, 6, 22, 6, 38, 6, 55, 6, 72, 6, 88, 6, 105, 6, 122, 6, 139, 6, 157, 6, 174, 6, 191, 6, 209, 6, 227, 6, 244, 7, 6, 7, 24, 7, 42, 7, 60, 7, 79, 7, 97, 7, 115, 7, 134, 7, 153, 7, 171, 7, 190, 7, 209, 7, 228, 7, 248, 8, 11, 8, 30, 8, 50, 8, 69, 8, 89, 8, 109, 8, 129, 8, 149, 8, 169, 8, 190, 8, 210, 8, 230, 8, 251, 9, 16, 9, 36, 9, 57, 9, 78, 9, 100, 9, 121, 9, 142, 9, 164, 9, 185, 9, 207, 9, 229, 9, 251, 10, 17, 10, 39, 10, 61, 10, 83, 10, 106, 10, 128, 10, 151, 10, 174, 10, 197, 10, 220, 10, 243, 11, 10, 11, 33, 11, 57, 11, 80, 11, 104, 11, 128, 11, 152, 11, 176, 11, 200, 11, 224, 11, 249, 12, 17, 12, 42, 12, 66, 12, 91, 12, 116, 12, 141, 12, 166, 12, 192, 12, 217, 12, 242, 13, 12, 13, 38, 13, 64, 13, 90, 13, 116, 13, 142, 13, 168, 13, 195, 13, 221, 13, 248, 14, 19, 14, 46, 14, 73, 14, 100, 14, 127, 14, 154, 14, 182, 14, 209, 14, 237, 15, 9, 15, 37, 15, 65, 15, 93, 15, 121, 15, 150, 15, 178, 15, 207, 15, 236, 16, 9, 16, 38, 16, 67, 16, 96, 16, 125, 16, 155, 16, 185, 16, 214, 16, 244, 17, 18, 17, 48, 17, 78, 17, 109, 17, 139, 17, 170, 17, 200, 17, 231, 18, 6, 18, 37, 18, 68, 18, 100, 18, 131, 18, 163, 18, 194, 18, 226, 19, 2, 19, 34, 19, 66, 19, 99, 19, 131, 19, 164, 19, 196, 19, 229, 20, 6, 20, 39, 20, 72, 20, 105, 20, 139, 20, 172, 20, 206, 20, 240, 21, 17, 21, 52, 21, 86, 21, 120, 21, 154, 21, 189, 21, 223, 22, 2, 22, 37, 22, 72, 22, 107, 22, 143, 22, 178, 22, 213, 22, 249, 23, 29, 23, 65, 23, 101, 23, 137, 23, 173, 23, 210, 23, 246, 24, 27, 24, 64, 24, 101, 24, 138, 24, 175, 24, 212, 24, 250, 25, 31, 25, 69, 25, 107, 25, 145, 25, 183, 25, 221, 26, 3, 26, 42, 26, 80, 26, 119, 26, 158, 26, 197, 26, 236, 27, 19, 27, 59, 27, 98, 27, 138, 27, 177, 27, 217, 28, 1, 28, 41, 28, 82, 28, 122, 28, 163, 28, 203, 28, 244, 29, 29, 29, 70, 29, 111, 29, 153, 29, 194, 29, 236, 30, 22, 30, 63, 30, 105, 30, 147, 30, 190, 30, 232, 31, 19, 31, 61, 31, 104, 31, 147, 31, 190, 31, 233, 32, 21, 32, 64, 32, 108, 32, 151, 32, 195, 32, 239, 33, 27, 33, 72, 33, 116, 33, 161, 33, 205, 33, 250, 34, 39, 34, 84, 34, 129, 34, 175, 34, 220, 35, 10, 35, 55, 35, 101, 35, 147, 35, 194, 35, 240, 36, 30, 36, 77, 36, 124, 36, 170, 36, 217, 37, 8, 37, 56, 37, 103, 37, 151, 37, 198, 37, 246, 38, 38, 38, 86, 38, 134, 38, 183, 38, 231, 39, 24, 39, 73, 39, 121, 39, 170, 39, 220, 40, 13, 40, 62, 40, 112, 40, 162, 40, 212, 41, 6, 41, 56, 41, 106, 41, 157, 41, 207, 42, 2, 42, 53, 42, 104, 42, 155, 42, 206, 43, 1, 43, 53, 43, 105, 43, 157, 43, 209, 44, 5, 44, 57, 44, 109, 44, 162, 44, 215, 45, 11, 45, 64, 45, 117, 45, 171, 45, 224, 46, 22, 46, 75, 46, 129, 46, 183, 46, 237, 47, 35, 47, 90, 47, 144, 47, 199, 47, 254, 48, 53, 48, 108, 48, 163, 48, 218, 49, 18, 49, 74, 49, 129, 49, 185, 49, 241, 50, 42, 50, 98, 50, 155, 50, 211, 51, 12, 51, 69, 51, 126, 51, 183, 51, 241, 52, 42, 52, 100, 52, 158, 52, 216, 53, 18, 53, 76, 53, 135, 53, 193, 53, 252, 54, 55, 54, 114, 54, 173, 54, 232, 55, 36, 55, 95, 55, 155, 55, 215, 56, 19, 56, 79, 56, 140, 56, 200, 57, 5, 57, 65, 57, 126, 57, 187, 57, 249, 58, 54, 58, 115, 58, 177, 58, 239, 59, 45, 59, 107, 59, 169, 59, 231, 60, 38, 60, 101, 60, 164, 60, 227, 61, 34, 61, 97, 61, 160, 61, 224, 62, 32, 62, 96, 62, 160, 62, 224, 63, 32, 63, 97, 63, 161, 63, 226, 64, 35, 64, 100, 64, 165, 64, 231, 65, 40, 65, 106, 65, 172, 65, 238, 66, 48, 66, 114, 66, 180, 66, 247, 67, 58, 67, 125, 67, 192, 68, 3, 68, 70, 68, 138, 68, 205, 69, 17, 69, 85, 69, 153, 69, 221, 70, 34, 70, 102, 70, 171, 70, 240, 71, 53, 71, 122, 71, 191, 72, 5, 72, 74, 72, 144, 72, 214, 73, 28, 73, 98, 73, 169, 73, 239, 74, 54, 74, 125, 74, 196, 75, 11, 75, 82, 75, 154, 75, 225, 76, 41, 76, 113, 76, 185, 77, 2, 77, 74, 77, 146, 77, 219, 78, 36, 78, 109, 78, 182, 79, 0, 79, 73, 79, 147, 79, 220, 80, 38, 80, 112, 80, 187, 81, 5, 81, 80, 81, 154, 81, 229, 82, 48, 82, 124, 82, 199, 83, 18, 83, 94, 83, 170, 83, 246, 84, 66, 84, 142, 84, 219, 85, 39, 85, 116, 85, 193, 86, 14, 86, 91, 86, 169, 86, 246, 87, 68, 87, 146, 87, 224, 88, 46, 88, 124, 88, 203, 89, 26, 89, 104, 89, 183, 90, 7, 90, 86, 90, 165, 90, 245, 91, 69, 91, 149, 91, 229, 92, 53, 92, 133, 92, 214, 93, 39, 93, 119, 93, 201, 94, 26, 94, 107, 94, 189, 95, 14, 95, 96, 95, 178, 96, 4, 96, 87, 96, 169, 96, 252, 97, 79, 97, 162, 97, 245, 98, 72, 98, 155, 98, 239, 99, 67, 99, 151, 99, 235, 100, 63, 100, 148, 100, 232, 101, 61, 101, 146, 101, 231, 102, 60, 102, 146, 102, 231, 103, 61, 103, 147, 103, 233, 104, 63, 104, 149, 104, 236, 105, 67, 105, 153, 105, 240, 106, 72, 106, 159, 106, 247, 107, 78, 107, 166, 107, 254, 108, 86, 108, 175, 109, 7, 109, 96, 109, 185, 110, 17, 110, 107, 110, 196, 111, 29, 111, 119, 111, 209, 112, 43, 112, 133, 112, 223, 113, 58, 113, 148, 113, 239, 114, 74, 114, 165, 115, 1, 115, 92, 115, 184, 116, 19, 116, 111, 116, 204, 117, 40, 117, 132, 117, 225, 118, 62, 118, 155, 118, 248, 119, 85, 119, 179, 120, 16, 120, 110, 120, 204, 121, 42, 121, 136, 121, 231, 122, 69, 122, 164, 123, 3, 123, 98, 123, 193, 124, 33, 124, 129, 124, 224, 125, 64, 125, 160, 126, 1, 126, 97, 126, 194, 127, 35, 127, 132, 127, 229, 128, 70, 128, 168, 129, 9, 129, 107, 129, 205, 130, 47, 130, 145, 130, 244, 131, 87, 131, 185, 132, 28, 132, 128, 132, 227, 133, 70, 133, 170, 134, 14, 134, 114, 134, 214, 135, 58, 135, 159, 136, 4, 136, 104, 136, 205, 137, 51, 137, 152, 137, 254, 138, 99, 138, 201, 139, 47, 139, 149, 139, 252, 140, 98, 140, 201, 141, 48, 141, 151, 141, 254, 142, 102, 142, 205, 143, 53, 143, 157, 144, 5, 144, 109, 144, 214, 145, 63, 145, 167, 146, 16, 146, 121, 146, 227, 147, 76, 147, 182, 148, 32, 148, 138, 148, 244, 149, 94, 149, 201, 150, 51, 150, 158, 151, 9, 151, 117, 151, 224, 152, 76, 152, 183, 153, 35, 153, 143, 153, 251, 154, 104, 154, 213, 155, 65, 155, 174, 156, 27, 156, 137, 156, 246, 157, 100, 157, 210, 158, 64, 158, 174, 159, 28, 159, 139, 159, 249, 160, 104, 160, 215, 161, 70, 161, 182, 162, 37, 162, 149, 163, 5, 163, 117, 163, 229, 164, 86, 164, 198, 165, 55, 165, 168, 166, 25, 166, 139, 166, 252, 167, 110, 167, 224, 168, 82, 168, 196, 169, 54, 169, 169, 170, 28, 170, 142, 171, 2, 171, 117, 171, 232, 172, 92, 172, 208, 173, 68, 173, 184, 174, 44, 174, 161, 175, 21, 175, 138, 175, 255, 176, 116, 176, 234, 177, 95, 177, 213, 178, 75, 178, 193, 179, 55, 179, 174, 180, 36, 180, 155, 181, 18, 181, 137, 182, 1, 182, 120, 182, 240, 183, 104, 183, 224, 184, 88, 184, 209, 185, 73, 185, 194, 186, 59, 186, 180, 187, 45, 187, 167, 188, 33, 188, 154, 189, 20, 189, 143, 190, 9, 190, 132, 190, 254, 191, 121, 191, 244, 192, 112, 192, 235, 193, 103, 193, 227, 194, 95, 194, 219, 195, 87, 195, 212, 196, 81, 196, 205, 197, 75, 197, 200, 198, 69, 198, 195, 199, 65, 199, 191, 200, 61, 200, 187, 201, 58, 201, 185, 202, 56, 202, 183, 203, 54, 203, 181, 204, 53, 204, 181, 205, 53, 205, 181, 206, 53, 206, 182, 207, 55, 207, 184, 208, 57, 208, 186, 209, 59, 209, 189, 210, 63, 210, 193, 211, 67, 211, 197, 212, 72, 212, 203, 213, 78, 213, 209, 214, 84, 214, 216, 215, 91, 215, 223, 216, 99, 216, 231, 217, 108, 217, 240, 218, 117, 218, 250, 219, 127, 220, 4, 220, 138, 221, 16, 221, 150, 222, 28, 222, 162, 223, 40, 223, 175, 224, 54, 224, 189, 225, 68, 225, 203, 226, 83, 226, 218, 227, 98, 227, 234, 228, 115, 228, 251, 229, 132, 230, 13, 230, 150, 231, 31, 231, 168, 232, 50, 232, 188, 233, 70, 233, 208, 234, 90, 234, 229, 235, 111, 235, 250, 236, 133, 237, 16, 237, 156, 238, 39, 238, 179, 239, 63, 239, 203, 240, 88, 240, 228, 241, 113, 241, 254, 242, 139, 243, 25, 243, 166, 244, 52, 244, 194, 245, 80, 245, 222, 246, 108, 246, 251, 247, 138, 248, 25, 248, 168, 249, 55, 249, 199, 250, 87, 250, 231, 251, 119, 252, 7, 252, 152, 253, 40, 253, 185, 254, 74, 254, 219, 255, 109, 255, 255, 88, 89, 90, 32, 0, 0, 0, 0, 0, 0, 111, 160, 0, 0, 56, 242, 0, 0, 3, 143, 88, 89, 90, 32, 0, 0, 0, 0, 0, 0, 98, 150, 0, 0, 183, 138, 0, 0, 24, 218, 88, 89, 90, 32, 0, 0, 0, 0, 0, 0, 36, 160, 0, 0, 15, 133, 0, 0, 182, 196, 115, 102, 51, 50, 0, 0, 0, 0, 0, 1, 12, 63, 0, 0, 5, 220, 255, 255, 243, 39, 0, 0, 7, 144, 0, 0, 253, 146, 255, 255, 251, 162, 255, 255, 253, 163, 0, 0, 3, 220, 0, 0, 192, 113, 116, 101, 120, 116, 0, 0, 0, 0, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 99, 41, 32, 50, 48, 48, 51, 44, 32, 67, 97, 110, 111, 110, 32, 73, 110, 99, 46, 32, 32, 65, 108, 108, 32, 114, 105, 103, 104, 116, 115, 32, 114, 101, 115, 101, 114, 118, 101, 100, 46, 0, 0, 0, 0, 100, 101, 115, 99, 0, 0, 0, 0, 0, 0, 0, 11, 67, 97, 110, 111, 110, 32, 73, 110, 99, 46, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 67, 0, 97, 0, 110, 0, 111, 0, 110, 0, 32, 0, 73, 0, 110, 0, 99, 0, 46, 0, 0, 11, 67, 97, 110, 111, 110, 32, 73, 110, 99, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 101, 115, 99, 0, 0, 0, 0, 0, 0, 0, 19, 115, 82, 71, 66, 32, 118, 49, 46, 51, 49, 32, 40, 67, 97, 110, 111, 110, 41, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 115, 0, 82, 0, 71, 0, 66, 0, 32, 0, 118, 0, 49, 0, 46, 0, 51, 0, 49, 0, 32, 0, 40, 0, 67, 0, 97, 0, 110, 0, 111, 0, 110, 0, 41, 0, 0, 19, 115, 82, 71, 66, 32, 118, 49, 46, 51, 49, 32, 40, 67, 97, 110, 111, 110, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 89, 90, 32, 0, 0, 0, 0, 0, 0, 246, 214, 0, 1, 0, 0, 0, 0, 211, 45, 115, 105, 103, 32, 0, 0, 0, 0, 67, 82, 84, 32, 117, 99, 109, 73, 67, 83, 73, 71, 0, 0, 1, 40, 1, 8, 0, 0, 1, 8, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 73, 84, 32, 76, 97, 98, 111, 114, 97, 116, 111, 114, 121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 73, 78, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 243, 84, 0, 1, 0, 0, 0, 1, 22, 207, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1 };
				var parsed_bytes = (entry as UndefinedIFDEntry).Data.Data;
				Assert.AreEqual (bytes, parsed_bytes);
			}
			// Thumbnail.0x0100 (ImageWidth/Short/1) "252"
			{
				var entry = structure.GetEntry (1, (ushort)IFDEntryTag.ImageWidth);
				Assert.IsNotNull (entry, "Entry 0x0100 missing in IFD 1");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (252, (entry as ShortIFDEntry).Value);
			}
			// Thumbnail.0x0101 (ImageLength/Short/1) "160"
			{
				var entry = structure.GetEntry (1, (ushort)IFDEntryTag.ImageLength);
				Assert.IsNotNull (entry, "Entry 0x0101 missing in IFD 1");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (160, (entry as ShortIFDEntry).Value);
			}
			// Thumbnail.0x0102 (BitsPerSample/Short/3) "8 8 8"
			{
				var entry = structure.GetEntry (1, (ushort)IFDEntryTag.BitsPerSample);
				Assert.IsNotNull (entry, "Entry 0x0102 missing in IFD 1");
				Assert.IsNotNull (entry as ShortArrayIFDEntry, "Entry is not a short array!");
				Assert.AreEqual (new ushort[] { 8, 8, 8 }, (entry as ShortArrayIFDEntry).Values);
			}
			// Thumbnail.0x0103 (Compression/Short/1) "1"
			{
				var entry = structure.GetEntry (1, (ushort)IFDEntryTag.Compression);
				Assert.IsNotNull (entry, "Entry 0x0103 missing in IFD 1");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (1, (entry as ShortIFDEntry).Value);
			}
			// Thumbnail.0x0106 (PhotometricInterpretation/Short/1) "2"
			{
				var entry = structure.GetEntry (1, (ushort)IFDEntryTag.PhotometricInterpretation);
				Assert.IsNotNull (entry, "Entry 0x0106 missing in IFD 1");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (2, (entry as ShortIFDEntry).Value);
			}
			// Thumbnail.0x0111 (StripOffsets/StripOffsets
			{
				var entry = structure.GetEntry (1, (ushort)IFDEntryTag.StripOffsets);
				Assert.IsNotNull (entry, "Entry 0x0111 missing in IFD 1");
				Assert.IsNotNull (entry as StripOffsetsIFDEntry, "Entry is not a strip offsets entry!");
				Assert.AreEqual (160, (entry as StripOffsetsIFDEntry).Values.Length);
			}
			// Thumbnail.0x0115 (SamplesPerPixel/Short/1) "3"
			{
				var entry = structure.GetEntry (1, (ushort)IFDEntryTag.SamplesPerPixel);
				Assert.IsNotNull (entry, "Entry 0x0115 missing in IFD 1");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (3, (entry as ShortIFDEntry).Value);
			}
			// Thumbnail.0x0116 (RowsPerStrip/Short/1) "1"
			{
				var entry = structure.GetEntry (1, (ushort)IFDEntryTag.RowsPerStrip);
				Assert.IsNotNull (entry, "Entry 0x0116 missing in IFD 1");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (1, (entry as ShortIFDEntry).Value);
			}
			// Thumbnail.0x0117 (StripByteCounts/Long
			{
				var entry = structure.GetEntry (1, (ushort)IFDEntryTag.StripByteCounts);
				Assert.IsNotNull (entry, "Entry 0x0117 missing in IFD 1");
				Assert.IsNotNull (entry as LongArrayIFDEntry, "Entry is not a long array!");
				Assert.AreEqual (new long[] { 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756 }, (entry as LongArrayIFDEntry).Values);
			}
			// Thumbnail.0x011A (XResolution/Rational/1) "734003200/2097152"
			{
				var entry = structure.GetEntry (1, (ushort)IFDEntryTag.XResolution);
				Assert.IsNotNull (entry, "Entry 0x011A missing in IFD 1");
				Assert.IsNotNull (entry as RationalIFDEntry, "Entry is not a rational!");
				Assert.AreEqual (734003200, (entry as RationalIFDEntry).Value.Numerator);
				Assert.AreEqual (2097152, (entry as RationalIFDEntry).Value.Denominator);
			}
			// Thumbnail.0x011B (YResolution/Rational/1) "734003200/2097152"
			{
				var entry = structure.GetEntry (1, (ushort)IFDEntryTag.YResolution);
				Assert.IsNotNull (entry, "Entry 0x011B missing in IFD 1");
				Assert.IsNotNull (entry as RationalIFDEntry, "Entry is not a rational!");
				Assert.AreEqual (734003200, (entry as RationalIFDEntry).Value.Numerator);
				Assert.AreEqual (2097152, (entry as RationalIFDEntry).Value.Denominator);
			}
			// Thumbnail.0x011C (PlanarConfiguration/Short/1) "1"
			{
				var entry = structure.GetEntry (1, (ushort)IFDEntryTag.PlanarConfiguration);
				Assert.IsNotNull (entry, "Entry 0x011C missing in IFD 1");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (1, (entry as ShortIFDEntry).Value);
			}
			// Thumbnail.0x0128 (ResolutionUnit/Short/1) "2"
			{
				var entry = structure.GetEntry (1, (ushort)IFDEntryTag.ResolutionUnit);
				Assert.IsNotNull (entry, "Entry 0x0128 missing in IFD 1");
				Assert.IsNotNull (entry as ShortIFDEntry, "Entry is not a short!");
				Assert.AreEqual (2, (entry as ShortIFDEntry).Value);
			}

			//  ---------- End of IFD tests ----------

		}
	}
}
